<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>naveen srinivasan</title><link>/</link><description>Recent content on naveen srinivasan</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 09 Dec 2021 23:17:39 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Naveen Srinivasan</title><link>/resume/resume/</link><pubDate>Thu, 09 Dec 2021 23:17:39 +0000</pubDate><guid>/resume/resume/</guid><description>https://github.com/naveensrinivasan
https://twitter.com/snaveen
Google Peer Bonus Winner 2021 for supply chain security project https://twitter.com/snaveen/status/1422921438764453897 https://opensource.googleblog.com/2021/09/announcing-latest-open-source-peer-bonus-winners.html and was mentioned in google blog https://security.googleblog.com/2021/07/measuring-security-risks-in-open-source.html Maintainer across multiple supply chain projects https://github.com/naveensrinivasan https://github.com/ossf/scorecard/graphs/contributors Contribute to multiple OSS projects https://docs.google.com/spreadsheets/d/1EeSbF4gx7zjSTfHyWmp1LMg_WBfnuv3YAjcSTWxU7Zo/edit?usp=sharing Enjoys writing golang Architected, developed, deployed, and managed cloud-based solutions using Docker, Kubernetes in Google Container Engine (GKE) and AWS Working k8s infrastructure for the past 4 years Have conducted k8s hands workshop in Devfest DC conference Manage the Kubernetes environment in AWS and GKE.</description></item><item><title>Zero Trust Development Environment</title><link>/posts/zero-trust-development-environment/</link><pubDate>Thu, 30 Sep 2021 23:48:46 +0000</pubDate><guid>/posts/zero-trust-development-environment/</guid><description>Photo by novia wu on Unsplash
I am paranoid about running unknown code on my machine. I have been using a MacBook for some years now, but the way I used to install any software was brew like most developers.
Later I asked the question, &amp;ldquo;How do I trust my brew installs?&amp;rdquo; But like most of us, I had to try new packages and deploy software to do my work.</description></item><item><title>Stunning Tribble</title><link>/posts/stunning-tribble/</link><pubDate>Mon, 27 Sep 2021 00:37:38 +0000</pubDate><guid>/posts/stunning-tribble/</guid><description>Defending from including OSV/CVE in go dependencies tldr: If you want to avoid including OSV/CVE in your go.mod/go.sum you can utilize this https://github.com/naveensrinivasan/stunning-tribble tool do that. Here is an example of how this is being used in scorecard https://github.com/ossf/scorecard/blob/9df865c4f83cfb36bae487125e5ccbc6aef448c6/Makefile#L64-L72
I contribute to a project that is primarily focused on supply chain security https://github.com/ossf/scorecard which is part of Open Source Security Foundation, which is also part of Linux Foundation.
We happened to realize that between version 1.</description></item><item><title>Google Peer Bonus Award</title><link>/posts/google-peer-bonus-award/</link><pubDate>Wed, 04 Aug 2021 13:34:31 +0000</pubDate><guid>/posts/google-peer-bonus-award/</guid><description>I’m honored to receive this award Google hands out to open source contributors annually. Getting this token of appreciation feels fantastic, and I’m humbled and grateful I was nominated and selected as a recipient. Thank you, Google!
Thank you Google and Abhishek!</description></item><item><title>How to debug the CrashLoopBackOff in Kubernetes when pod is not starting</title><link>/?p=3163/</link><pubDate>Thu, 26 May 2016 02:01:16 +0000</pubDate><guid>/?p=3163/</guid><description>Here is my learning of how I debugged the CrashLoopBackOff in kubernetes when the pod wasn’t starting.
I wanted to deploy the jenkins dockerimage in the cluster. As mentioned in the jenkins docker repo I wanted to mount an external drive which is an AWS EBS volume. Here is my deployment yaml.
[gist id = “98aa6da98ebb9b7e3d7f996c8ef2cb38”]
After starting the deployment the pod never came up and this the output of kubectl get pod</description></item><item><title>Enable Shortcat app in OSX</title><link>/?p=3141/</link><pubDate>Mon, 25 Apr 2016 14:13:47 +0000</pubDate><guid>/?p=3141/</guid><description>Shortcatapp is a software that I use everyday to keep me productive and reduce my dependency on mouse.
But if you have OSX El Captain you get a message to enable the assistive devices,. But it has been changed from the previous versions of OSX.
To enable the assistive devices navigate to System Preferences &amp;gt; Security &amp;amp; Privacy &amp;gt; Privacy &amp;gt; Accessibility and enable for shortcat app.</description></item><item><title>My Docker aliases</title><link>/?p=3061/</link><pubDate>Sat, 23 Apr 2016 14:35:57 +0000</pubDate><guid>/?p=3061/</guid><description>I have been using docker very often now and because I have been spending most of time in the terminal it made sense to use alias to reduce the typing.
[gist id = “d6b41d000b93f3ecc3e7a1b900c7382c”]
I have curated this from others and have also customized to what I want.
 All my aliases are stored in my github repo https://github.com/naveensrinivasan/dotvim/blob/master/zshrc  </description></item><item><title>How I try avoid using mouse</title><link>/?p=2901/</link><pubDate>Mon, 28 Mar 2016 00:57:41 +0000</pubDate><guid>/?p=2901/</guid><description>Like most of the Dev’s I love using my Keyboard more than mouse. I am big vim fan and have been using vim for over 7-8 years. I still consider myself novice.
Here are the ways I manage to use keyboard over mouse
Shortcat– Great app get rids of use mouse in OSX – This is a Paid App , which IMHO is the best investment for me. There is also a trial version.</description></item><item><title>Taking it up a notch with my standing desk with fluidstance</title><link>/?p=2781/</link><pubDate>Fri, 11 Mar 2016 01:09:50 +0000</pubDate><guid>/?p=2781/</guid><description>I have been standing at work for the past 2 years. And I have seen significant improvement with respect to my productivity and non-drowsiness with standing desk. The one draw back with that I have seen was standing in a position where I put a lot of stress on one of the legs. And I wanted ti try something different.
That’s when I saw fluidstance. Bought myself one which brings in a new challenge.</description></item><item><title>Solution to Adventcode Day 7 in FSharp</title><link>/?p=2641/</link><pubDate>Tue, 12 Jan 2016 22:33:14 +0000</pubDate><guid>/?p=2641/</guid><description>Here is my solution to adventcode problem 7 using F#.
I am using the adventofcode to improve my functional programming skills. The gist of the problem is to solve the logic gates which is represented as 16 bit integer’s and these depend on other gates.
The puzzle starts of with simple problem
123 -&amp;gt; x 456 -&amp;gt; y ``Here is my solution to adventcode problem 7 using F#. I am using the adventofcode to improve my functional programming skills.</description></item><item><title>Parsing GitHub API</title><link>/?p=2571/</link><pubDate>Wed, 09 Dec 2015 16:46:57 +0000</pubDate><guid>/?p=2571/</guid><description>I have been contributing to https://github.com/octokit/octokit.netproject. It is the API for accessing GitHub. One of the recent questions that came up was to get the list of https://github.com/octokit/octokit.net/issues/968.
The API’s are published in HTML https://developer.github.com/v3/There are about 63 + categories that have API. Wanted to parse all of these with least manual intervention.
[gist id = “58fa8eb57e61535f10db”]
The above goes to the main URL looks for all sub-categories and download’s each of the web pages and extracts “GET“, “DELETE“, “PATCH“, “POST“</description></item><item><title>fsharp docker image</title><link>/?p=2481/</link><pubDate>Wed, 11 Nov 2015 02:41:14 +0000</pubDate><guid>/?p=2481/</guid><description>The fsharp project has a official docker image https://github.com/fsprojects/docker-fsharp. The one issue with that is it is based on mono 4.0.4 which is buggy and fsharp does not work very well. The latest alpha release of the mono with which fsharp works well is 4.2.0. The 4.2.0 isn’t available in stable channels.
So I created a docker image with the latest mono from their alpha repo and using the latest fsharp from the github.</description></item><item><title>View the http redirect and response message from an external authentication provider using ETW</title><link>/?p=1510/</link><pubDate>Mon, 29 Jun 2015 02:57:26 +0000</pubDate><guid>/?p=1510/</guid><description>Recently I had to troubleshoot messages that were being sent from an web application hosted on IIS to an external authentication provider. The logs from the application wasn’t something closer to the metal and wasn’t really providing all the details. I really wanted something like fiddler for the webserver. I could have a ran network traces to troubleshoot the issue but the problem was it wasn’t happening consistently. It was sporadic.</description></item><item><title>Getting my Yoga stats from Yogaglo</title><link>/?p=1499/</link><pubDate>Wed, 17 Jun 2015 19:16:33 +0000</pubDate><guid>/?p=1499/</guid><description/></item><item><title>Use Eventsource to get the duration of a Start Stop of Custom ETW events</title><link>/?p=1493/</link><pubDate>Mon, 08 Jun 2015 19:53:29 +0000</pubDate><guid>/?p=1493/</guid><description>The EventSourcelibrary provides an option to get duration of Custom ETW start and stop events and when used with Perfview we could leverage this to stop tracing when the duration is more than what we expect.
What it is for example ,there could an external API call the application makes that has to be traced with the start and when it finishes then the stop of the event is called. Ideally we would have a ability to view the duration of these events similar to ASP.</description></item><item><title>Log dynamic Custom objects in ETW using EventSource</title><link>/?p=1489/</link><pubDate>Fri, 29 May 2015 03:35:50 +0000</pubDate><guid>/?p=1489/</guid><description>With the latest release of EventSourcewe could create dynamic events without having to create class that inherits from EventSource. This is will be not be good for Performance.
Using these methods we could either log Anonymous objects or Classes that have the EventData Attribute applied to it. The caveat is that these objects public properties alone will be serialized. These properties have to be of native types like string,int,datetime, guid , IEnumerable.</description></item><item><title>The case of slow Visual Studio startup</title><link>/?p=1469/</link><pubDate>Wed, 20 May 2015 01:23:35 +0000</pubDate><guid>/?p=1469/</guid><description>In this post I would use Perfview /ETW to diagnose the delayed start-up of visual studio.
To analyze the problem start-up VS within Perfview as a run command
[gist https://gist.github.com/naveensrinivasan/5eb6406d6d38f2143acb]
This would launch visual studio and collect etw traces. I have also enabled CodeMarkers , which is ETW traces for Visual Studio in case if you want to trace any extensions performance.
After it completes I choose the CPU Stacks and filtered with devenv.</description></item><item><title>Managed Stack Explorer using ClrMD</title><link>/?p=1457/</link><pubDate>Thu, 14 May 2015 23:14:45 +0000</pubDate><guid>/?p=1457/</guid><description>How often we run into an issue in the field where we just want to see the managed call-stack where the exception is or where the thread is hung. One of the options is debugger or something like ETW.
So I built a managed stack explorer
http://naveensrinivasan.github.io/ManagedStackExplorer/
Managed Stack Explorer provides call stack for .NET applications using managed code with thread local variables. The API as of now does not provide values for the local variables.</description></item><item><title>Measure GC Allocations and Collections using TraceEvent</title><link>/?p=1437/</link><pubDate>Tue, 12 May 2015 01:14:34 +0000</pubDate><guid>/?p=1437/</guid><description>In this post I will explore how we could use TraceEventto measure our code (even at function level) for GC Allocations and Collections.
Save this with “.linq” extension and then open in linqpad.
[gist https://gist.github.com/naveensrinivasan/b72fd80876eb67557ae8]
Here is the TL;DR
Why would I want to know GC events on a function level? Doesn’t the PerfMon counter provide that information on an application level? Isn’t Premature optimization root of all evil?
Yes, for most of the part Premature optimization is not necessary.</description></item><item><title>Look ma I figured out why my ETW EventSource isn’t tracing</title><link>/?p=1414/</link><pubDate>Tue, 05 May 2015 13:47:39 +0000</pubDate><guid>/?p=1414/</guid><description>The EventSource class in the framework 4.5 helps in writing custom ETW tracing.
When using EventSource class built within the framework, if the order of the methods don’t match ordinal number position in the class it would fail generating ETW traces. The EventSource has dependency on the order of the methods in the class.
This code would produce a valid ETW traces
[gist https://gist.github.com/naveensrinivasan/a1fcd0ec78d2473499d5]
This one would fail producing any ETW Traces.</description></item><item><title>Making an Image Easier to Debug</title><link>/?p=1368/</link><pubDate>Mon, 20 Jun 2011 17:45:24 +0000</pubDate><guid>/?p=1368/</guid><description>I am doing security review for a managed application which is obfuscated. So I am doing a lot of disassembling code at runtime using Windbg. One of the issues is that code gets JIT optimized because of the retail build. This makes it harder for me debug when mapping it back. Realized that I could turnoff JIT Optimization’s using the ini file.
[sourcecode]
[.NET Framework Debugging Control]
GenerateTrackingInfo=1
AllowOptimize=0
[/sourcecode]</description></item><item><title>Updating .NET String in memory with Windbg</title><link>/?p=1353/</link><pubDate>Tue, 14 Jun 2011 16:42:24 +0000</pubDate><guid>/?p=1353/</guid><description>In this post I would show a simple trick to update .NET strings in memory with Windbg. The caveat is make sure the string that you’re updating is long enough to fit into the string buffer. If not there would be a memory corruption.
Here is a simple windows form application with title “Good”
The goal is to update the title from “Good” to “Bad”.
[sourcecode language=”csharp”]
button1.Click += (s,b) =&amp;gt; Text = _caption;</description></item><item><title>Who is is blocking my UI Thread? Diagnosing the cause using Windbg</title><link>/?p=1344/</link><pubDate>Fri, 01 Apr 2011 18:59:06 +0000</pubDate><guid>/?p=1344/</guid><description>It so happens most of the applications block the UI thread and do sync I/O, which is most common reason for “Not Responding” window. Here is a post http://blogs.msdn.com/b/nathannesbit/archive/2010/12/28/detecting-ui-thread-misuse.aspx that tries helping in detecting this. I like to handle this from bottom of the stack because we have a cool tool called debugger.
The approach is simple as having a break-point on a function like “KERNEL32!WaitFor*” and checking if the current thread is a UI thread.</description></item><item><title>Correlating between .NET and native thread in Windbg</title><link>/?p=1324/</link><pubDate>Sun, 09 Jan 2011 01:46:06 +0000</pubDate><guid>/?p=1324/</guid><description>&lt;p>I recently saw a stackoverflow question where  someone wanted to know how they could correlate between  managed and native threads within Windbg.&lt;/p>
&lt;p>Here is the managed thread object within the debugger&lt;/p>
&lt;blockquote>
&lt;p>0:004&amp;gt; !do 02a1d6c4&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Name:        System.Threading.Thread&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>MethodTable: 672e001c&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>EEClass:     67018ed8&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Size:        48(0x30) bytes&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>File:        C:WindowsMicrosoft.NetassemblyGAC_32mscorlibv4.0_4.0.0.0__b77a5c561934e089mscorlib.dll&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Fields:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>MT    Field   Offset                 Type VT     Attr    Value Name&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>672c8a78  4000720        4 ….Contexts.Context  0 instance 00000000 m_Context&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>672db4b8  4000721        8 ….ExecutionContext  0 instance 00000000 m_ExecutionContext&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>672df9fc  4000722        c        System.String  0 instance 02a1a220 m_Name&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>672dfed0  4000723       10      System.Delegate  0 instance 00000000 m_Delegate&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>672e63f4  4000724       14 …ation.CultureInfo  0 instance 00000000 m_CurrentCulture&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>672e63f4  4000725       18 …ation.CultureInfo  0 instance 00000000 m_CurrentUICulture&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>672df638  4000726       1c        System.Object  0 instance 00000000 m_ThreadStartArg&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->672daa7c  4000727       20        System.IntPtr  1 instance   542560 DONT_USE_InternalThread&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>672e29c8  4000728       24         System.Int32  1 instance        2 m_Priority&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>672e29c8  4000729       28         System.Int32  1 instance        3 m_ManagedThreadId&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>672cb76c  400072a      18c …LocalDataStoreMgr  0   shared   static s_LocalDataStoreMgr&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;blockquote>
&lt;blockquote>
&lt;p>Domain:Value  0049f148:NotInit  &amp;laquo;&lt;/p>
&lt;/blockquote>
&lt;/blockquote>
&lt;/blockquote>
&lt;blockquote>
&lt;p>672ce328  400072b        c …alDataStoreHolder  0   shared TLstatic s_LocalDataStore&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;blockquote>
&lt;blockquote>
&lt;p>Thread:Value &amp;laquo;&lt;/p>
&lt;/blockquote>
&lt;/blockquote>
&lt;/blockquote>
&lt;p>The present thread’s @$teb (Thread Environment Block) is &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->7efac000&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>0:004&amp;gt; ? @$teb Evaluate expression: 2130374656 = 7efac000&lt;/p>
&lt;p>The DONT_USE_InternalThread is pointer to the native thread. Dumping the raw memory of the pointer should give us more information we are looking for.&lt;/p>
&lt;blockquote>
&lt;p>0:004&amp;gt; dd poi(02a1d6c4+20)&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>00542560  67e9ee88 0000b220 00000000 056ef42c&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>00542570  00000000 00000000 00000000 00000003&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>00542580  00000000 00542588 00542588 00542588&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>00542590  00000000 00000000 baad0000 004a4f30&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>005425a0  &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->7efac000&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> baadf00d 00000000 00000000&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>005425b0  00024dac 00000000 00000000 00000000&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>005425c0  00000000 baadf00d 00541ba0 00544290&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>005425d0  00544298 00000200 00544290 00544580&lt;/p>
&lt;/blockquote>
&lt;p>The pointer to teb is in the 40th offset of the  DONT_USE_InternalThread and here is the script that would get teb for each managed thread.&lt;/p>
&lt;p>[sourcecode]&lt;/p>
&lt;p>.foreach ($thread {!dumpheap -mt 672e001c -short}) { .if ( poi(${$thread}+20) != 0) {.printf &amp;ldquo;%p n&amp;rdquo;,dwo(poi(${$thread}+20)+40)}}&lt;/p>
&lt;p>[/sourcecode]&lt;/p>
&lt;blockquote>
&lt;p>0:004&amp;gt; .foreach ($thread {!dumpheap -mt 672e001c -short}) { .if ( poi(${$thread}+20) != 0) {.printf “%p n”,dwo(poi(${$thread}+20)+40) }}&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>7efdd000&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>7efac000&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>7ef9a000&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>7ef97000&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>7ef2f000&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>7ef26000&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>7efd7000&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>7ef20000&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>7ef1d000&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>7ef1d000&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>7ef0e000&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>7efa3000&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>7ef2c000&lt;/p>
&lt;/blockquote>
&lt;p>So with the above we could dump the teb structure using dt ntdll!_TEB command. In the next post I will demonstrate how this can be used to debug some cool stuff 🙂&lt;/p></description></item><item><title>Conditional BreakPoint based on callstack within Windbg – .NET</title><link>/?p=1314/</link><pubDate>Wed, 29 Dec 2010 02:00:12 +0000</pubDate><guid>/?p=1314/</guid><description>Someone recently asked me “How to have a break-point on a method based on certain function in the call-stack?”
Here is the sample code to demonstrate this
[sourcecode language=”csharp”]
using System;
using System.Threading.Tasks;
using System.Data.SqlClient;
namespace Test
{
class Program
{
string connectionString = @&amp;ldquo;Data Source=.sqlexpress;Initial Catalog=Tfs_Configuration;Integrated Security=True&amp;rdquo;;
public void Bar()
{
using (var c = new SqlConnection(connectionString))
{
c.Open();
var command = new SqlCommand(@&amp;ldquo;update [tbl_AccessMapping] set [DisplayName] = @param&amp;rdquo;, c);</description></item><item><title>Saving Dynamic Assembly in .NET 4.0 using Windbg</title><link>/?p=1298/</link><pubDate>Thu, 23 Dec 2010 23:37:45 +0000</pubDate><guid>/?p=1298/</guid><description>I recently had to debug a .NET 4.0 process which was loading the dependent assemblies using the AppDomain.AssemblyResolveevent. The dependent assemblies were stored within the executable. I couldn’t disassemble the code to look for the dependent assembly because the exe was obfuscated. FYI the dynamic assembly cannot be saved using !SaveModule and here is the reason for I recently had to debug a .NET 4.0 process which was loading the dependent assemblies using the AppDomain.</description></item><item><title>Dumping Generic List in .NET within Windbg</title><link>/?p=1281/</link><pubDate>Fri, 10 Dec 2010 03:15:43 +0000</pubDate><guid>/?p=1281/</guid><description>Most of the code uses Listfor storing items. The present solutions don’ t have a way to dump Listwithin windbg. Even though sosex has an option to dump the Listusing !mdt it still doesn’t meet the scripting requirements. For example here is an output using sosex “!mdt -e 029a91c0”
0:000&amp;gt; !mdt -e 029a91c0
029a91c0 (System.Collections.Generic.List`1[[Test.Foo, Test]])
Count = 2
[0] 029a9200 (Test.Foo)
[1] 029a9210 (Test.</description></item><item><title>Why isn’t the !bpmd in sos / windbg not working?</title><link>/?p=1271/</link><pubDate>Mon, 06 Dec 2010 00:16:53 +0000</pubDate><guid>/?p=1271/</guid><description>I recently noticed another blog post refer to one of my post. The issue was, sos wasn’t enabling the break-points on non-jitted functions. The classic example being “Main”. Thanks to Steve I have been using sosex and not sos for setting break-points.
From my previous post you can understand how CLR is using clrn/CLRNotificationException to notify sos/sosex on JIT. With this information when I looked at the rotor code, I noticed an interesting member variable “g_dacNotificationFlags”.</description></item><item><title>Using sosex within windbg to understand IL and Assembly code</title><link>/?p=1261/</link><pubDate>Tue, 30 Nov 2010 01:33:25 +0000</pubDate><guid>/?p=1261/</guid><description>Sometimes when debugging managed code within the debugger I would like to see the C# code ,the IL translation for the managed code and the Assembly code for the IL. For example I recently learned that callvirt MSIL instruction must do the null-check before invoking method.
C:UsersnaveenDocumentsVisual Studio 2010ProjectsConsoleApplication13Program.cs @ 18:
00bc26d8 8b4dec mov ecx,dword ptr [ebp-14h]
00bc26db 3909 cmp dword ptr [ecx],ecx //NULL Check</description></item><item><title>Windbg trick – Having custom name for user-defined pseudo-registers</title><link>/?p=1246/</link><pubDate>Tue, 23 Nov 2010 01:07:53 +0000</pubDate><guid>/?p=1246/</guid><description>There are 20 user-defined pseudo-registers ($t0, $t1, …, $t19) in windbg/cdb . To have scripts with variable names as @$t0 and @$t1 isn’t helpful for readability. The trick to avoid this is by using the “aS” command.
Here is an example, for a loop variable I would like to use a variable name like “i” instead of “@$t0” and to use “i” as a variable here is the command
aS i “@$t0”</description></item><item><title>Decoding clr20r3 .NET exception – using mono cecil</title><link>/?p=1208/</link><pubDate>Wed, 17 Nov 2010 02:01:13 +0000</pubDate><guid>/?p=1208/</guid><description>I have often seen Devs trying to figure out the cause of the app crash without a memory dump. The only information that is available to analyze is the Windows Error Reporting message in the event viewer which would have “Event Name: CLR20r3” along with Watson bucket information like this.
Fault bucket , type 0
Event Name: CLR20r3
Response: Not available
Cab Id: 0</description></item><item><title>Script to !SaveAllModules in .NET 4.0 SOS within Windbg</title><link>/?p=1202/</link><pubDate>Fri, 12 Nov 2010 19:29:06 +0000</pubDate><guid>/?p=1202/</guid><description>The .NET 4.0 sos doesn’t have save all modules (!SaveAllModules) command. It only has !SaveModule. Recently I was debugging a .NET 4.0 process for which I had to save all the modules. Here is a script that does !SaveAllModules.
[sourcecode]
!for_each_module .if ($spat (&amp;quot;${@#ImageName}&amp;quot;,&amp;quot;*.exe&amp;quot;)) { !SaveModule ${@#Base} c:temp${@#ModuleName}.exe } .else { !SaveModule ${@#Base} c:temp${@#ModuleName}.dll }
[/sourcecode]</description></item><item><title>Using Managed Code to debug Memory Dumps</title><link>/?p=1168/</link><pubDate>Thu, 11 Nov 2010 22:21:02 +0000</pubDate><guid>/?p=1168/</guid><description>I happened to notice the new I happened to notice the new and it had COM based API for dbgeng. The sample code were in VB Script. I much comfortable writing managed code compared to VB script. So I decided to use COM based API in managed code.
Here are couple of ways to solve certain problems using this
Parallel GC Roots :- Getting GC Roots from memory dump is the most time consuming because SOS is single threaded.</description></item><item><title>Downloading PDC10 videos using the new async feature</title><link>/?p=1156/</link><pubDate>Wed, 03 Nov 2010 01:56:34 +0000</pubDate><guid>/?p=1156/</guid><description>I knew PDC10 has an OData endpoint which is http://odata.microsoftpdc.com/ODataSchedule.svc/ . The best part about OData is querying for specific data that we are looking for. And here is my OData url for filtering twitter hashtag #languages
[sourcecode]
http://odata.microsoftpdc.com/ODataSchedule.svc/Sessions()?$filter=startswith(TwitterHashtag,&amp;amp;#8217;%23languages&amp;amp;#8217;)&amp;amp;$expand=DownloadableContent&amp;amp;$select=DownloadableContent
[/sourcecode]
With the above OData feed I could get urls for low bandwidth mp4’s that I can download. And here is the sample code for filtering
[sourcecode language=”csharp”]
var x =XDocument.Load(@&amp;ldquo;c:tempsession.xml&amp;rdquo;).Descendants().AsParallel().Where(xd =&amp;gt; xd.</description></item><item><title>Dumping .NET strings to files using Windbg</title><link>/?p=1128/</link><pubDate>Mon, 01 Nov 2010 21:37:16 +0000</pubDate><guid>/?p=1128/</guid><description>In this post I would demonstrate how to dump strings from a memory dump /live process to a file. Recently I had to debug a process which had few big strings where I had to analyze its contents. The !dumpobj from sos would only dump partial strings. I had to dump few hundred XML strings that I had to analyze using some automation. And hence comes the script.
[sourcecode]
$$ Dumps the managed strings to a file</description></item><item><title>Dumping ASP.NET Session (x86 /x64) within Windbg</title><link>/?p=1071/</link><pubDate>Wed, 27 Oct 2010 01:18:21 +0000</pubDate><guid>/?p=1071/</guid><description>This post is going to be about dumping ASP.NET session objects using Windbg. I had recently answered a stackoverflow question in which someone wanted to dump ASP.NET session objects for 64-bit IIS (x64). I thought why not blog about the same which might be useful to others. The challenge is to write one script that should work in both x86/x64. FYI there is a script from Tess that does dump out the session contents, AFAIK it will not work on x64 and my script iterates through the array using the array length instead of using “.</description></item><item><title>GC Start and Stop events in .NET using Windbg</title><link>/?p=1064/</link><pubDate>Wed, 08 Sep 2010 01:55:27 +0000</pubDate><guid>/?p=1064/</guid><description>I was recently showing someone the new ETW features in .NET especially the GC Event notification and I was asked if we can get this using Windbg.
So here is the sample code for the GC Collection
[sourcecode language=”csharp”]
namespace GCStartStop
{
public partial class Form1 : Form
{
public Form1()
{
InitializeComponent();
button1.Click += (s, b) =&amp;gt; GC.Collect(2);
button1.Click += (s, b) =&amp;gt; GC.Collect(1);
}
}
}
[/sourcecode]
The goal is set to a break-point only when the collection count is 2.</description></item><item><title>Get GC Information in Silverlight</title><link>/?p=1050/</link><pubDate>Wed, 11 Aug 2010 02:32:52 +0000</pubDate><guid>/?p=1050/</guid><description>I had earlier written a post on getting GC information on Silverlight using ETW. With that we would have to write code to parse the ETW csv file. In this post I am going to be using Perfmonitor to do this. This tools uses the same ETW under covers, but it does all the plumbing and gives a nice report , which is much easier to read. Here are the reports</description></item><item><title>Script to load sos within Windbg based on .NET Framework version</title><link>/?p=1032/</link><pubDate>Mon, 26 Jul 2010 04:33:21 +0000</pubDate><guid>/?p=1032/</guid><description>I often debug .NET Framework v 2.0 / v 4.0 code within windbg. In v 2.0 the main clr dll was called “mscorwks.dll” and in v 4.0 it is called “clr.dll”. As many of you are aware , to load sos in v 2.0 we would have to enter “.loadby sos mscorwks” and in v 4.0 it would be “.loadby sos clr” . This was a pain for me. Came up with a script to automate loading sos based on clr version</description></item><item><title>Debugging .NET – mystery between DEBUG versus RELEASE within windbg</title><link>/?p=1015/</link><pubDate>Thu, 22 Jul 2010 02:48:17 +0000</pubDate><guid>/?p=1015/</guid><description>I am sure most of us have debugged applications that are build with debug turned on, which is obviously much easier compared to debugging release build (optimized code). In this post I am going to share one of my experiences of debugging release build code. I will demonstrate this with a simple Console Application.
Here is the code
[sourcecode language=”csharp”]
using System;
namespace ConsoleApplication
{
class Program
{
static void Main(string[] args)</description></item><item><title>Using F# to Automate Reading–The Morning Brew</title><link>/?p=997/</link><pubDate>Fri, 16 Jul 2010 04:27:24 +0000</pubDate><guid>/?p=997/</guid><description>I guess most of the .NET Devs read The Morning Brew, if not you should. It is a morning newspaper for the dev, so I end up reading it first thing when I go to work. I like to try and automate most of the stuff . So I thought why not write a script that reads the Morning Brew feed, filter the excluded content that I am not interested in and open the urls before I come in.</description></item><item><title>Combining Stack Overflow RSS, OData and API to query</title><link>/?p=978/</link><pubDate>Wed, 14 Jul 2010 03:18:05 +0000</pubDate><guid>/?p=978/</guid><description>In my opinion Stack Overflow has a ton of knowledge to learn new tricks. And there are some really smart people in the SO community. I try and learn new things when I find time.
I subscribe to RSS feeds for new questions on a particular topic. Example, here is one for F# from Stack Overflow http://stackoverflow.com/feeds/tag/f%23. The advantage of the RSS feed is I get to see new questions, but the drawback is I would have to navigate to the site to look for answers.</description></item><item><title>Load the same Assembly from GAC and private bin path in .NET</title><link>/?p=966/</link><pubDate>Mon, 12 Jul 2010 21:31:40 +0000</pubDate><guid>/?p=966/</guid><description>This post is all about exploring the CLR loader to load an assembly from GAC and from private bin path. This is not possible because, if an assembly is loaded from GAC and if the code uses Assembly.LoadFrom to load the same assembly, then the loader would return the assembly that has already been loaded from the GAC.
Here is the ClassLibrary2 code
[sourcecode language=”csharp”]
using System;
namespace ClassLibrary2
{</description></item><item><title>Debugging Generic System.Nullable within Windbg</title><link>/?p=947/</link><pubDate>Thu, 08 Jul 2010 03:58:51 +0000</pubDate><guid>/?p=947/</guid><description>In this post I am going to unravel the mystery of debugging the Nullablewithin Windbg in .NET 3.5 and also compare it with .NET 4.0. Here is the sample code and it is compiled in .NET 3.5
[sourcecode language=”csharp”]
using System;
namespace ConsoleApplication
{
class Program
{
Int32? test;
int i = 10;
static void Main(string[] args)
{
NullableInt32? i = 10;
Object o = 10;
var p = new Program() { test = 20 };</description></item><item><title>Recursive !dumpmt – Windbg</title><link>/?p=928/</link><pubDate>Tue, 06 Jul 2010 01:04:53 +0000</pubDate><guid>/?p=928/</guid><description>In this post I will be demonstrating how we could use CLR internal data-structures to recursively get the methodtable’s of an object and its base classes. The idea behind this is to understand the CLR data structure.
Here is the sample code
[sourcecode language=”csharp”]
using System;
namespace ConsoleApplication
{
class Program : B
{
string test = &amp;ldquo;cw&amp;rdquo;;
static void Main(string[] args)
{
var p = new Program();
Console.Read();
}</description></item><item><title>dumpstring – windbg</title><link>/?p=913/</link><pubDate>Wed, 30 Jun 2010 01:55:42 +0000</pubDate><guid>/?p=913/</guid><description>Viewing strings inside the debugger has never been pretty, especially if you are using sos extension. Here is a sample !dumpobj on a string
0:000&amp;gt; !do 00000000025f2280
Name: System.String
MethodTable: 000007fef6e26960
EEClass: 000007fef69aeec8
Size: 32(0x20) bytes
String: Foo Fields:
MT Field Offset Type VT Attr Value Name
000007fef6e2c848 40000ed 8 System.Int32 1 instance 3 m_stringLength</description></item><item><title>Custom DumpArray – Windbg</title><link>/?p=885/</link><pubDate>Fri, 25 Jun 2010 00:59:42 +0000</pubDate><guid>/?p=885/</guid><description>The The has !dumparray for getting contents of the array. But it cannot be used for scripting or automation. Here is an example
[sourcecode language=”csharp”]
using System;
namespace ConsoleApplication
{
class Program
{
Test[] arr = new[] { new Test() { ID = 1, Name = &amp;ldquo;Foo&amp;rdquo; }, new Test() { ID = 2, Name = &amp;ldquo;Bar&amp;rdquo; } };
static void Main(string[] args)
{
var p = new Program();
Console.WriteLine(p.arr);</description></item><item><title>Do I have Managed or Native memory leak?</title><link>/?p=868/</link><pubDate>Tue, 22 Jun 2010 22:38:52 +0000</pubDate><guid>/?p=868/</guid><description>I noticed someone who couldn’t figure out the cause of memory leak in managed application within the debugger. This person had basic debugging skills and was comfortable with sos. FYI the leak wasn’t in the managed code, but in the native code. The managed code was using native code via PInvoke.
Here is how I figured out the cause. Every time I have to debug a memory leak in managed code ,the first command I run is !</description></item><item><title>Customizing Witty Twitter Client Part 1- using C# as Compiler Service</title><link>/?p=840/</link><pubDate>Sun, 20 Jun 2010 03:28:46 +0000</pubDate><guid>/?p=840/</guid><description>This is going to be a multipart blog post where I am going to be demonstrating how I have customized This is going to be a multipart blog post where I am going to be demonstrating how I have customized twitter client for my need. I chose Witty because it is the only OSS .NET twitter client I know of.
One of the reasons for customizing is primarily using C# as compiler service to extend it for my needs dynamically.</description></item><item><title>Using Tuple as Dictionary / Map key</title><link>/?p=829/</link><pubDate>Sat, 19 Jun 2010 12:37:53 +0000</pubDate><guid>/?p=829/</guid><description>I recently had to create a dictionary which needed a multipart key like &amp;lt;string,int&amp;gt; . To do this I would have to create a custom class override equals and gethashcode. That’s when someone told I could use Tuple, but weren’t sure it was possible. Here was the quick sample to try it in F#
[sourcecode]
let x = [(&amp;ldquo;naveen&amp;rdquo;,1),1;(&amp;ldquo;naveen&amp;rdquo;,1),2] |&amp;gt; Map.ofList
[/sourcecode]
as expected only one item in the Map</description></item><item><title>Using Tech-Ed OData to download videos</title><link>/?p=2071/</link><pubDate>Tue, 15 Jun 2010 12:20:32 +0000</pubDate><guid>/?p=2071/</guid><description>I wanted to watch the Teched 2010 videos, but the problem I had was going to the site manually to download files for offline viewing. And I was also interested only in Dev sessions which were level 300 / 400. Thanks to OData for teched http://odata.msteched.com/sessions.svc/ ,I could write 3 statements in linqpad and had them all downloaded using wget
[sourcecode language=”csharp”]
File.Delete(@&amp;ldquo;C:tempdownload.txt&amp;rdquo;);
Sessions
.Where (s =&amp;gt; (s.Level.StartsWith(&amp;ldquo;400&amp;rdquo;) || s.Level.StartsWith(&amp;ldquo;300&amp;rdquo;) ) &amp;amp;&amp;amp; s.</description></item><item><title>Debugging base class method with conditional break point in .NET using Windbg</title><link>/?p=803/</link><pubDate>Tue, 15 Jun 2010 04:40:17 +0000</pubDate><guid>/?p=803/</guid><description>In this post I am going to be demonstrating how to have a conditional break-point on the base class method where it has been used by multiple derived classes. A classic example is Winform UI.
The Control base class has got methods like set_Enabled , set_Visible which could be consumed by multiple derived controls. The goal is to debug only the control instance that we are interested in. Here is the sample code.</description></item><item><title>Piracy in .NET Code – Part 3 – Even when the code is obfuscated</title><link>/?p=769/</link><pubDate>Sat, 12 Jun 2010 00:37:46 +0000</pubDate><guid>/?p=769/</guid><description>Continuing with my series on Piracy, in this post I am going to be exploring how someone with little advanced knowledge in CLR / Windows can bypass important function calls like license validation.
Most of the developers assume just because the code is obfuscated nobody can bypass the licensing logic. I am going to be demonstrating how to bypass certain function call,this is very similar to “Set Next Statement ” in VS.</description></item><item><title>Using Windows Error Reporting (WER) API in managed code to generate memory dump</title><link>/?p=750/</link><pubDate>Thu, 10 Jun 2010 03:01:09 +0000</pubDate><guid>/?p=750/</guid><description>The WER is a pretty cool technology from Microsoft for collecting memory dumps on process crash/ hang. This can be extended to generate on demand when the application needs to. The usual reason for getting a memory dump could be based on certain conditions, for example, the customer feels the application is slow and would want to send the information to WinQual (WER server). If the application happens to be installed on hundreds / thousands of boxes then its not going to be possible to get from individual customers, the best bet is WER.</description></item><item><title>Identifying High CPU in GC (.NET) because of LOH – using Windbg</title><link>/?p=40/</link><pubDate>Mon, 15 Feb 2010 04:57:22 +0000</pubDate><guid>/?p=40/</guid><description>I am sure most of us are aware that one of the common reasons for High CPU usage .NET is because of, percentage time spent on GC is high. There are lot of write up about this. Tesshas amazing blog post on this specifically, which explains in detail how to identify the symptoms. But one thing that I want share was the experience I had ,where in i could identify the real call stack which was causing allocation on LOH by have a break-point on the CLR Garbage collector itself.</description></item><item><title>Function hit count using Pseudo-Register in Windbg</title><link>/?p=30/</link><pubDate>Sat, 13 Feb 2010 01:41:01 +0000</pubDate><guid>/?p=30/</guid><description>What if we want to know the number of times a function was invoked. We can have “.echo” or “.printf” on break-point of a function and count the output manually. The better way to do this is using pseudo-registers.
In my previouspost I had mentioned about alias inside the debugger. The debugger also provides User defined Pseudo-Registers for scripting inside the debugger. We can use them to manipulate values within our scripts.</description></item><item><title>Conditional Breakpoint in .NET using Windbg</title><link>/?p=26/</link><pubDate>Thu, 11 Feb 2010 03:50:00 +0000</pubDate><guid>/?p=26/</guid><description>With my few years of production debugging .NET code ,one thing that has really helped me a lot is Windbg. Lot us of know that using sos, sosex and Windbg we should be able to troubleshoot most of the .NET Code. But certain tips / tricks makes us productive in those crucial moments. I am assuming that you are aware of basic usage of sos and windbg.
We know by using !</description></item><item><title>Identify and Patch .NET Code using Windbg</title><link>/?p=19/</link><pubDate>Sun, 07 Feb 2010 13:30:13 +0000</pubDate><guid>/?p=19/</guid><description>The last week was really an interesting one with debugging production code. I was debugging a Winforms application which was using .NET framework 3.5 version. The real problem was with the latest release of the code, there was bug which caused certain elements on the UI not to be displayed. This is was High priority bug and very important to the business.
The code that was causing this bug was an integer variable inside a class.</description></item><item><title>Home cooked web monitoring use Rx</title><link>/?p=14/</link><pubDate>Wed, 03 Feb 2010 03:07:22 +0000</pubDate><guid>/?p=14/</guid><description>One of the key things in software is to write succinct , declarative and asynchronous code. The answer to that is Reactive Extensions for .NETI have been digging into Rx for sometime now. Though there isn’t much of documentation I have been kind of successful in getting certain things done with it.
One of requirement that came up from our Operations was to monitor some websites and notify someone if the site was not accessible.</description></item><item><title>Resharper Template for F#</title><link>/?p=6/</link><pubDate>Mon, 01 Feb 2010 19:06:03 +0000</pubDate><guid>/?p=6/</guid><description>I have been hacking F# lately and I am big fan of ReSharper. So why not create a few Live Templates for the things i do daily in F#.
Download R# live template for F#. I am sure there are few more things that can be part of this template. I have posted the code in MSDN Code gallery so that others can find and contribute.</description></item></channel></rss>