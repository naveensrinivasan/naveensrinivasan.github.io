<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GC on naveen srinivasan</title>
    <link>/tags/gc/</link>
    <description>Recent content in GC on naveen srinivasan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Feb 2010 04:57:22 +0000</lastBuildDate>
    
	<atom:link href="/tags/gc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Identifying High CPU in GC (.NET) because of LOH – using Windbg</title>
      <link>/p40/</link>
      <pubDate>Mon, 15 Feb 2010 04:57:22 +0000</pubDate>
      
      <guid>/p40/</guid>
      <description>I am sure most of us are aware that one of the common reasons for High CPU usage .NET is because of, percentage time spent on GC is high. There are lot of write up about this. Tess has amazing blog post on this specifically, which explains in detail how to identify the symptoms. But one thing that I want share was the experience I had ,where in i could identify the real call stack which was causing allocation on LOH by have a break-point on the CLR Garbage collector itself.</description>
    </item>
    
  </channel>
</rss>