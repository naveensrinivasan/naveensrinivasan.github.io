<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ETW on naveen srinivasan</title><link>/categories/etw/</link><description>Recent content in ETW on naveen srinivasan</description><generator>Hugo</generator><language>en</language><lastBuildDate>Mon, 29 Jun 2015 02:57:26 +0000</lastBuildDate><atom:link href="/categories/etw/index.xml" rel="self" type="application/rss+xml"/><item><title>View the http redirect and response message from an external authentication provider using ETW</title><link>/?p=1510/</link><pubDate>Mon, 29 Jun 2015 02:57:26 +0000</pubDate><guid>/?p=1510/</guid><description>&lt;p>Recently I had to troubleshoot messages that were being sent from an web application hosted on IIS to an external authentication provider. The logs from the application wasn’t something closer to the metal and wasn’t really providing all the details. I really wanted something like fiddler for the webserver. I could have a ran network traces to troubleshoot the issue but the problem was it wasn’t happening consistently. It was sporadic. I knew there would be ETW traces that would have this information. The IIS web logs don’t capture this information.&lt;/p></description></item><item><title>Use Eventsource to get the duration of a Start Stop of Custom ETW events</title><link>/?p=1493/</link><pubDate>Mon, 08 Jun 2015 19:53:29 +0000</pubDate><guid>/?p=1493/</guid><description>&lt;p>The &lt;!-- raw HTML omitted -->EventSource&lt;!-- raw HTML omitted --> library provides an option to get duration of Custom ETW start and stop events and when used with Perfview we could leverage this to stop tracing when the duration is more than what we expect.&lt;/p>
&lt;p>What it is for example ,there could an external API call the application makes that has to be traced with the start and when it finishes then the stop of the event is called. Ideally we would have a ability to view the duration of these events similar to ASP.NET calls.  The EventSource Library along with Perfview provides this ability to view the duration between the start and stop events.&lt;/p></description></item><item><title>Log dynamic Custom objects in ETW using EventSource</title><link>/?p=1489/</link><pubDate>Fri, 29 May 2015 03:35:50 +0000</pubDate><guid>/?p=1489/</guid><description>&lt;p>With the latest release of &lt;!-- raw HTML omitted -->EventSource&lt;!-- raw HTML omitted --> we could create dynamic events without having to create class that inherits from EventSource. This is will be not be good for Performance.&lt;/p>
&lt;p>Using these methods we could either log Anonymous objects or Classes that have the EventData Attribute applied to it. The caveat is that these objects public properties alone will be serialized. These properties have to be of native types like string,int,datetime, guid , IEnumerable. If you don’t want a property to be serialized you could apply the attribute EventIgnore.&lt;/p></description></item><item><title>The case of slow Visual Studio startup</title><link>/?p=1469/</link><pubDate>Wed, 20 May 2015 01:23:35 +0000</pubDate><guid>/?p=1469/</guid><description>&lt;p>In this post I would use Perfview /ETW to diagnose the delayed start-up of visual studio.&lt;/p>
&lt;p>To analyze the problem start-up VS within Perfview as a run command&lt;/p>
&lt;p>[gist https://gist.github.com/naveensrinivasan/5eb6406d6d38f2143acb]&lt;/p>
&lt;p>This would launch visual studio and collect etw traces. I have also enabled CodeMarkers , which is ETW traces for Visual Studio in case if you want to trace any extensions performance.&lt;/p>
&lt;p>&lt;a href="https://naveensrinivasan.files.wordpress.com/2015/05/perfview-main.jpg">&lt;!-- raw HTML omitted -->&lt;/a>After it completes I choose the CPU Stacks and filtered with devenv.exe process.&lt;/p></description></item><item><title>Measure GC Allocations and Collections using TraceEvent</title><link>/?p=1437/</link><pubDate>Tue, 12 May 2015 01:14:34 +0000</pubDate><guid>/?p=1437/</guid><description>&lt;p>In this post I will explore  how we could use &lt;!-- raw HTML omitted -->TraceEvent&lt;!-- raw HTML omitted --> to measure our code (even at function level) for GC Allocations and Collections.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Save this with “.linq” extension and then open in  linqpad.&lt;/p>
&lt;p>[gist https://gist.github.com/naveensrinivasan/b72fd80876eb67557ae8]&lt;/p>
&lt;p>Here is the TL;DR&lt;/p>
&lt;p>Why would I want to know GC events on a function level? Doesn’t the PerfMon counter  provide that information on an application level? Isn’t Premature optimization root of all evil?&lt;/p></description></item><item><title>Look ma I figured out why my ETW EventSource isn’t tracing</title><link>/?p=1414/</link><pubDate>Tue, 05 May 2015 13:47:39 +0000</pubDate><guid>/?p=1414/</guid><description>&lt;p>The &lt;!-- raw HTML omitted -->EventSource &lt;!-- raw HTML omitted -->class in the framework 4.5 helps in writing custom ETW tracing.&lt;/p>
&lt;p>When using EventSource class built within the framework, if the order of the methods don’t match ordinal number position in the class it would fail generating ETW traces. The EventSource has dependency on the order of the methods in the class.&lt;/p>
&lt;p>This code would produce a valid ETW traces&lt;/p></description></item><item><title>Get GC Information in Silverlight</title><link>/?p=1050/</link><pubDate>Wed, 11 Aug 2010 02:32:52 +0000</pubDate><guid>/?p=1050/</guid><description>&lt;p>I had earlier written a &lt;a href="http://naveensrinivasan.com/2010/03/21/get-gc-information-in-silverlight-using-etw/">post&lt;/a> on getting GC information on Silverlight using ETW. With that we would have to write code to parse the ETW csv file.  In this post I am going to be using &lt;a href="http://bcl.codeplex.com/wikipage?title=PerfMonitor&amp;referringTitle=Home">Perfmonitor&lt;/a> to do this. This tools uses the same ETW under covers, but it does all the plumbing and gives a nice report , which is much easier to read.  Here are the reports&lt;/p>
&lt;p>&lt;a href="http://104.197.135.42/wp-content/uploads/2010/08/gc1.jpg">&lt;!-- raw HTML omitted -->&lt;/a>&lt;/p></description></item></channel></rss>