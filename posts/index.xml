<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on naveen srinivasan</title>
        <link>/posts/</link>
        <description>Recent content in Posts on naveen srinivasan</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Thu, 26 May 2016 02:01:16 +0000</lastBuildDate>
        <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>How to debug the CrashLoopBackOff in Kubernetes when pod is not starting</title>
            <link>/p3163/</link>
            <pubDate>Thu, 26 May 2016 02:01:16 +0000</pubDate>
            
            <guid>/p3163/</guid>
            <description>Here is my learning of how I debugged the CrashLoopBackOff in kubernetes when the pod wasn&amp;#8217;t starting.
I wanted to deploy the jenkins docker image in the cluster. As mentioned in the jenkins docker repo I wanted to mount an external drive which is an AWS EBS volume. Here is my deployment yaml.
[gist id = &amp;#8220;98aa6da98ebb9b7e3d7f996c8ef2cb38&amp;#8221;]
After starting the deployment the pod never came up and this the output of kubectl get pod</description>
            <content type="html"><![CDATA[<p>Here is my learning of how I debugged the CrashLoopBackOff in kubernetes when the pod wasn&#8217;t starting.</p>

<p>I wanted to deploy the <a href="https://hub.docker.com/_/jenkins/" target="_blank">jenkins docker</a> image in the cluster. As mentioned in the jenkins docker  repo I wanted to mount an external drive which is an AWS EBS volume.  Here is my deployment yaml.</p>

<p>[gist id = &#8220;98aa6da98ebb9b7e3d7f996c8ef2cb38&#8221;]</p>

<p>After starting the deployment the pod never came up and this the output of  <em>kubectl get pod</em></p>

<p><em>NAME                                      READY      STATUS                  RESTARTS  AGE</em></p>

<p><em>jenkins-3317895845-x84u3  0/1       CrashLoopBackOff      10                 27m</em></p>

<p>The next step was to issue the <em>kubectl describe pod jenkins-3317895845-x84u3</em></p>

<p>[gist id = &#8220;7a79af84b53fc923aa609997fdb4fcfd&#8221;]</p>

<p>So from the logs I could make out the container is being pulled correctly but it is failing on <strong>StartContainer</strong>.  Now based on this information the next step was to get the docker logs. But the docker logs aren&#8217;t accessible from my box because it is managed by kubernetes. The only way to get the docker logs was to actually ssh into the box.</p>

<p>But which box should I ssh? The describe output has the node information which is <em>Node: ip-172-20-0-29.us-west-2.compute.internal/172.20.0.29</em> . This_ _is the private ip of the box in aws but with that information you should be able to figure out the public ip to ssh.</p>

<p>Now I know I have to ssh but where is the key for this server. If you have used the <a href="http://releases.k8s.io/release-1.2/cluster/kube-up.sh" target="_blank">kube-up.sh</a> then the keys would be stored  in this location <em>~/.ssh/kube_aws_rsa. ssh -i ~/.ssh/kube_aws_rsa admin@public-ip-oftheabovenode.</em></p>

<p>After_ _sshing into the box I issued the command _sudo docker ps -a | grep naveen _because the container could have been stopped and looked for naveen because that was my container name. This gave me container id which was stopped with exit status as 1.</p>

<p>And this was the output of docker logs command</p>

<p><em>admin@ip-172-20-0-29:~$ sudo docker logs c98a338268a1</em></p>

<p>_touch: cannot touch ‘/var/jenkins_home/copy_reference<em>file.log’: Permission denied</em></p>

<p>_Can not write to /var/jenkins_home/copy_reference<em>file.log. Wrong volume permissions?</em></p>

<p>which identified the _/var/jenkins_home  _which was mounted with aws ebs voulme  didn&#8217;t have permission to write by the jenkins user <a href="https://github.com/kubernetes/kubernetes/issues/2630" target="_blank"><a href="https://github.com/kubernetes/kubernetes/issues/2630">https://github.com/kubernetes/kubernetes/issues/2630</a></a>.</p>

<p>And after doing all of this I realized I could have done _kubectl logs jenkins-3317895845-x84u3_ which would have given the same output without having to ssh into the box. But knowing this handy because when things go wrong we really need to debug the root cause.</p>
]]></content>
        </item>
        
        <item>
            <title>Enable Shortcat app in OSX</title>
            <link>/p3141/</link>
            <pubDate>Mon, 25 Apr 2016 14:13:47 +0000</pubDate>
            
            <guid>/p3141/</guid>
            <description>Shortcat app is a software that I use everyday to keep me productive and reduce my dependency on mouse.
But if you have OSX El Captain you get a message to enable the assistive devices,. But it has been changed from the previous versions of OSX.
To enable the assistive devices navigate to System Preferences &amp;gt; Security &amp;amp; Privacy &amp;gt; Privacy &amp;gt; Accessibility and enable for shortcat app.</description>
            <content type="html"><![CDATA[<p><a href="https://shortcatapp.com/" target="_blank">Shortcat</a> app is a software that I use everyday to keep me productive and reduce my dependency on mouse.</p>

<p>But if you have OSX El Captain you get a message to enable the assistive devices,. But it has been changed from the previous versions of OSX.</p>

<p>To enable the assistive devices navigate to  <strong>System Preferences &gt; Security &amp; Privacy &gt; Privacy &gt; Accessibility</strong> and enable for shortcat app.</p>
]]></content>
        </item>
        
        <item>
            <title>My Docker aliases</title>
            <link>/p3061/</link>
            <pubDate>Sat, 23 Apr 2016 14:35:57 +0000</pubDate>
            
            <guid>/p3061/</guid>
            <description>I have been using docker very often now and because I have been spending most of time in the terminal it made sense to use alias to reduce the typing.
[gist id = &amp;#8220;d6b41d000b93f3ecc3e7a1b900c7382c&amp;#8221;]
I have curated this from others and have also customized to what I want.
&amp;nbsp;
All my aliases are stored in my github repo https://github.com/naveensrinivasan/dotvim/blob/master/zshrc
&amp;nbsp;
&amp;nbsp;</description>
            <content type="html"><![CDATA[<p>I  have been using docker very often now and because I have been spending most of time in the terminal it made sense to use alias to reduce the typing.</p>

<p>[gist id = &#8220;d6b41d000b93f3ecc3e7a1b900c7382c&#8221;]</p>

<p>I have curated this from others and have also customized to what I want.</p>

<p>&nbsp;</p>

<p>All my aliases are stored in my github repo <a href="https://github.com/naveensrinivasan/dotvim/blob/master/zshrc" target="_blank"><a href="https://github.com/naveensrinivasan/dotvim/blob/master/zshrc">https://github.com/naveensrinivasan/dotvim/blob/master/zshrc</a></a></p>

<p>&nbsp;</p>

<p>&nbsp;</p>
]]></content>
        </item>
        
        <item>
            <title>How I try avoid using mouse</title>
            <link>/p2901/</link>
            <pubDate>Mon, 28 Mar 2016 00:57:41 +0000</pubDate>
            
            <guid>/p2901/</guid>
            <description>Like most of the Dev&amp;#8217;s I love using my Keyboard more than mouse. I am big vim fan and have been using vim for over 7-8 years. I still consider myself novice.
Here are the ways I manage to use keyboard over mouse
 Shortcat &amp;#8211; Great app get rids of use mouse in OSX &amp;#8211; This is a Paid App , which IMHO is the best investment for me. There is also a trial version.</description>
            <content type="html"><![CDATA[<p>Like most of the Dev&#8217;s I love using my Keyboard more than mouse. I am big vim fan and have been using vim for over 7-8 years. I still consider myself novice.</p>

<p>Here are the ways I manage to use keyboard over mouse</p>

<ul>
<li><a href="https://shortcatapp.com/" target="_blank">Shortcat</a> &#8211; Great app get rids of use mouse in OSX &#8211; This is a Paid App , which IMHO is the best investment for me. There is also a trial version.</li>
<li>MacVim &#8211; I have been using MacVim as my primary text editor.</li>
<li><a href="https://chrome.google.com/webstore/detail/cvim/ihlenndgcmojhcghmfjfneahoeklbjjh?hl=en" target="_blank">cVim</a> &#8211; Vim features within chrome. The best part is it allows custom vimrc.</li>
<li>IntelliJ Vim Plugin &#8211; <a href="https://github.com/JetBrains/ideavim" target="_blank"><a href="https://github.com/JetBrains/ideavim">https://github.com/JetBrains/ideavim</a></a> also allow vimrc</li>
<li>Here is a plugin <a href="https://github.com/athiele/key-promoter-fork" target="_blank"><a href="https://github.com/athiele/key-promoter-fork">https://github.com/athiele/key-promoter-fork</a></a> for IntelliJ &#8211; show hints when using the mouse for something which could be done with the keyboard.</li>
<li><a href="https://github.com/eczarny/spectacle" target="_blank">Spectacle</a> &#8211; For window management in OSX with keyboard.</li>
</ul>

<p style="padding-left: 30px;">
  <a href="http://104.197.135.42/wp-content/uploads/2016/03/Screen-Shot-2016-03-27-at-10.24.42-PM.png" rel="attachment wp-att-3001"><img class="size-medium wp-image-3001 alignleft" src="http://104.197.135.42/wp-content/uploads/2016/03/Screen-Shot-2016-03-27-at-10.24.42-PM-300x208.png" alt="Screen Shot 2016-03-27 at 10.24.42 PM" width="300" height="208" srcset="https://www.naveensrinivasan.com/wp-content/uploads/2016/03/Screen-Shot-2016-03-27-at-10.24.42-PM-300x208.png 300w, https://www.naveensrinivasan.com/wp-content/uploads/2016/03/Screen-Shot-2016-03-27-at-10.24.42-PM-768x533.png 768w, https://www.naveensrinivasan.com/wp-content/uploads/2016/03/Screen-Shot-2016-03-27-at-10.24.42-PM.png 844w" sizes="(max-width: 300px) 100vw, 300px" /></a>
</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p><em>Remapped caps lock &#8211; ^ Control Key</em></p>

<p>&nbsp;</p>

<p>Here is my vimrc  <a href="https://github.com/naveensrinivasan/dotvim/blob/master/vimrc" target="_blank"><a href="https://github.com/naveensrinivasan/dotvim/blob/master/vimrc">https://github.com/naveensrinivasan/dotvim/blob/master/vimrc</a></a>. One of the things I do  is , set no-op for arrow keys makes me a better vim user.  I have tried vim hard mode <a href="https://github.com/wikitopian/hardmode" target="_blank"><a href="https://github.com/wikitopian/hardmode">https://github.com/wikitopian/hardmode</a></a> and have failed few times. That is something I want to enable to get rid of bad habits.</p>

<p>Still have to try <a href="https://neovim.io/" target="_blank">Neovim</a>. I especially like the neovim engine can be plugged into existing editor which is great.</p>

<p>And  I have ordered myself <a href="https://ultimatehackingkeyboard.com/" target="_blank">Ultimate hacking Keyboard</a> . The one of the reasons I am excited about this is ,you could use home row keys as mouse which would really replace mouse with this keyboard.</p>

<p>&nbsp;</p>

<p>&nbsp;</p>
]]></content>
        </item>
        
        <item>
            <title>Taking it up a notch with my standing desk with fluidstance</title>
            <link>/p2781/</link>
            <pubDate>Fri, 11 Mar 2016 01:09:50 +0000</pubDate>
            
            <guid>/p2781/</guid>
            <description>I have been standing at work for the past 2 years. And I have seen significant improvement with respect to my productivity and non-drowsiness with standing desk. The one draw back with that I have seen was standing in a position where I put a lot of stress on one of the legs. And I wanted ti try something different.
That&amp;#8217;s when I saw fluidstance. Bought myself one which brings in a new challenge.</description>
            <content type="html"><![CDATA[<p>I have been standing at work for the past 2  years. And I have seen significant improvement with respect to my productivity and non-drowsiness with standing desk. The one draw back with that I have seen was standing in a position where I put a lot of stress on one of the legs. And I wanted ti try something different.</p>

<p>That&#8217;s when I saw <a href="http://www.fluidstance.com" target="_blank">fluidstance</a>. Bought myself one which brings in a new challenge. I have been using it for a week and it is great  has made me sore in the places which I didn&#8217;t when I was standing without it.</p>

<p><a href="http://104.197.135.42/wp-content/uploads/2016/03/IMG_0557.jpg" rel="attachment wp-att-2791"><img class="alignnone size-medium wp-image-2791" src="http://104.197.135.42/wp-content/uploads/2016/03/IMG_0557-300x225.jpg" alt="IMG_0557" width="300" height="225" srcset="https://www.naveensrinivasan.com/wp-content/uploads/2016/03/IMG_0557-300x225.jpg 300w, https://www.naveensrinivasan.com/wp-content/uploads/2016/03/IMG_0557-768x576.jpg 768w, https://www.naveensrinivasan.com/wp-content/uploads/2016/03/IMG_0557-1024x768.jpg 1024w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>

<p>It is also a fun toy!</p>
]]></content>
        </item>
        
        <item>
            <title>Solution to Adventcode Day 7 in FSharp</title>
            <link>/p2641/</link>
            <pubDate>Tue, 12 Jan 2016 22:33:14 +0000</pubDate>
            
            <guid>/p2641/</guid>
            <description>Here is my solution to adventcode problem 7  using F#.
I am using the adventofcode to improve my functional programming skills. The gist of the problem is to solve the logic gates which is represented as 16 bit integer&amp;#8217;s and these depend on other gates.
The puzzle starts of with simple problem
 123 -&amp;gt; x 456 -&amp;gt; y ``Here is my solution to adventcode problem 7  using F#.</description>
            <content type="html"><![CDATA[<p>Here is my solution to <a href="http://adventofcode.com/day/7" target="_blank">adventcode problem 7 </a> using F#.</p>

<p>I am using the adventofcode to improve my functional programming skills. The gist of the problem is to solve the logic gates which is represented as 16 bit integer&#8217;s  and these depend on other gates.</p>

<p>The puzzle starts of with simple problem</p>

<ul>
<li><code>123 -&gt; x</code></li>
<li><code>456 -&gt; y</code></li>
<li>``Here is my solution to <a href="http://adventofcode.com/day/7" target="_blank">adventcode problem 7 </a> using F#.</li>
</ul>

<p>I am using the adventofcode to improve my functional programming skills. The gist of the problem is to solve the logic gates which is represented as 16 bit integer&#8217;s  and these depend on other gates.</p>

<p>The puzzle starts of with simple problem</p>

<ul>
<li><code>123 -&gt; x</code></li>
<li><code>456 -&gt; y</code>
*``</li>
<li>```Here is my solution to <a href="http://adventofcode.com/day/7" target="_blank">adventcode problem 7 </a> using F#.</li>
</ul>

<p>I am using the adventofcode to improve my functional programming skills. The gist of the problem is to solve the logic gates which is represented as 16 bit integer&#8217;s  and these depend on other gates.</p>

<p>The puzzle starts of with simple problem</p>

<ul>
<li><code>123 -&gt; x</code></li>
<li><code>456 -&gt; y</code></li>
<li>``Here is my solution to <a href="http://adventofcode.com/day/7" target="_blank">adventcode problem 7 </a> using F#.</li>
</ul>

<p>I am using the adventofcode to improve my functional programming skills. The gist of the problem is to solve the logic gates which is represented as 16 bit integer&#8217;s  and these depend on other gates.</p>

<p>The puzzle starts of with simple problem</p>

<ul>
<li><code>123 -&gt; x</code></li>
<li><code>456 -&gt; y</code>
*<code>
*</code>`</li>
<li>````Here is my solution to <a href="http://adventofcode.com/day/7" target="_blank">adventcode problem 7 </a> using F#.</li>
</ul>

<p>I am using the adventofcode to improve my functional programming skills. The gist of the problem is to solve the logic gates which is represented as 16 bit integer&#8217;s  and these depend on other gates.</p>

<p>The puzzle starts of with simple problem</p>

<ul>
<li><code>123 -&gt; x</code></li>
<li><code>456 -&gt; y</code></li>
<li>``Here is my solution to <a href="http://adventofcode.com/day/7" target="_blank">adventcode problem 7 </a> using F#.</li>
</ul>

<p>I am using the adventofcode to improve my functional programming skills. The gist of the problem is to solve the logic gates which is represented as 16 bit integer&#8217;s  and these depend on other gates.</p>

<p>The puzzle starts of with simple problem</p>

<ul>
<li><code>123 -&gt; x</code></li>
<li><code>456 -&gt; y</code>
*``</li>
<li>```Here is my solution to <a href="http://adventofcode.com/day/7" target="_blank">adventcode problem 7 </a> using F#.</li>
</ul>

<p>I am using the adventofcode to improve my functional programming skills. The gist of the problem is to solve the logic gates which is represented as 16 bit integer&#8217;s  and these depend on other gates.</p>

<p>The puzzle starts of with simple problem</p>

<ul>
<li><code>123 -&gt; x</code></li>
<li><code>456 -&gt; y</code></li>
<li>``Here is my solution to <a href="http://adventofcode.com/day/7" target="_blank">adventcode problem 7 </a> using F#.</li>
</ul>

<p>I am using the adventofcode to improve my functional programming skills. The gist of the problem is to solve the logic gates which is represented as 16 bit integer&#8217;s  and these depend on other gates.</p>

<p>The puzzle starts of with simple problem</p>

<ul>
<li><code>123 -&gt; x</code></li>
<li><code>456 -&gt; y</code>
*<code>
*</code><code>
*</code>```</li>
<li>`````Here is my solution to <a href="http://adventofcode.com/day/7" target="_blank">adventcode problem 7 </a> using F#.</li>
</ul>

<p>I am using the adventofcode to improve my functional programming skills. The gist of the problem is to solve the logic gates which is represented as 16 bit integer&#8217;s  and these depend on other gates.</p>

<p>The puzzle starts of with simple problem</p>

<ul>
<li><code>123 -&gt; x</code></li>
<li><code>456 -&gt; y</code></li>
<li>``Here is my solution to <a href="http://adventofcode.com/day/7" target="_blank">adventcode problem 7 </a> using F#.</li>
</ul>

<p>I am using the adventofcode to improve my functional programming skills. The gist of the problem is to solve the logic gates which is represented as 16 bit integer&#8217;s  and these depend on other gates.</p>

<p>The puzzle starts of with simple problem</p>

<ul>
<li><code>123 -&gt; x</code></li>
<li><code>456 -&gt; y</code>
*``</li>
<li>```Here is my solution to <a href="http://adventofcode.com/day/7" target="_blank">adventcode problem 7 </a> using F#.</li>
</ul>

<p>I am using the adventofcode to improve my functional programming skills. The gist of the problem is to solve the logic gates which is represented as 16 bit integer&#8217;s  and these depend on other gates.</p>

<p>The puzzle starts of with simple problem</p>

<ul>
<li><code>123 -&gt; x</code></li>
<li><code>456 -&gt; y</code></li>
<li>``Here is my solution to <a href="http://adventofcode.com/day/7" target="_blank">adventcode problem 7 </a> using F#.</li>
</ul>

<p>I am using the adventofcode to improve my functional programming skills. The gist of the problem is to solve the logic gates which is represented as 16 bit integer&#8217;s  and these depend on other gates.</p>

<p>The puzzle starts of with simple problem</p>

<ul>
<li><code>123 -&gt; x</code></li>
<li><code>456 -&gt; y</code>
*<code>
*</code>`</li>
<li>````Here is my solution to <a href="http://adventofcode.com/day/7" target="_blank">adventcode problem 7 </a> using F#.</li>
</ul>

<p>I am using the adventofcode to improve my functional programming skills. The gist of the problem is to solve the logic gates which is represented as 16 bit integer&#8217;s  and these depend on other gates.</p>

<p>The puzzle starts of with simple problem</p>

<ul>
<li><code>123 -&gt; x</code></li>
<li><code>456 -&gt; y</code></li>
<li>``Here is my solution to <a href="http://adventofcode.com/day/7" target="_blank">adventcode problem 7 </a> using F#.</li>
</ul>

<p>I am using the adventofcode to improve my functional programming skills. The gist of the problem is to solve the logic gates which is represented as 16 bit integer&#8217;s  and these depend on other gates.</p>

<p>The puzzle starts of with simple problem</p>

<ul>
<li><code>123 -&gt; x</code></li>
<li><code>456 -&gt; y</code>
*``</li>
<li>```Here is my solution to <a href="http://adventofcode.com/day/7" target="_blank">adventcode problem 7 </a> using F#.</li>
</ul>

<p>I am using the adventofcode to improve my functional programming skills. The gist of the problem is to solve the logic gates which is represented as 16 bit integer&#8217;s  and these depend on other gates.</p>

<p>The puzzle starts of with simple problem</p>

<ul>
<li><code>123 -&gt; x</code></li>
<li><code>456 -&gt; y</code></li>
<li>``Here is my solution to <a href="http://adventofcode.com/day/7" target="_blank">adventcode problem 7 </a> using F#.</li>
</ul>

<p>I am using the adventofcode to improve my functional programming skills. The gist of the problem is to solve the logic gates which is represented as 16 bit integer&#8217;s  and these depend on other gates.</p>

<p>The puzzle starts of with simple problem</p>

<ul>
<li><code>123 -&gt; x</code></li>
<li><code>456 -&gt; y</code>
*<code>
*</code><code>
*</code><code>
*</code>``</li>
<li>``````Here is my solution to <a href="http://adventofcode.com/day/7" target="_blank">adventcode problem 7 </a> using F#.</li>
</ul>

<p>I am using the adventofcode to improve my functional programming skills. The gist of the problem is to solve the logic gates which is represented as 16 bit integer&#8217;s  and these depend on other gates.</p>

<p>The puzzle starts of with simple problem</p>

<ul>
<li><code>123 -&gt; x</code></li>
<li><code>456 -&gt; y</code></li>
<li>``Here is my solution to <a href="http://adventofcode.com/day/7" target="_blank">adventcode problem 7 </a> using F#.</li>
</ul>

<p>I am using the adventofcode to improve my functional programming skills. The gist of the problem is to solve the logic gates which is represented as 16 bit integer&#8217;s  and these depend on other gates.</p>

<p>The puzzle starts of with simple problem</p>

<ul>
<li><code>123 -&gt; x</code></li>
<li><code>456 -&gt; y</code>
*``</li>
<li>```Here is my solution to <a href="http://adventofcode.com/day/7" target="_blank">adventcode problem 7 </a> using F#.</li>
</ul>

<p>I am using the adventofcode to improve my functional programming skills. The gist of the problem is to solve the logic gates which is represented as 16 bit integer&#8217;s  and these depend on other gates.</p>

<p>The puzzle starts of with simple problem</p>

<ul>
<li><code>123 -&gt; x</code></li>
<li><code>456 -&gt; y</code></li>
<li>``Here is my solution to <a href="http://adventofcode.com/day/7" target="_blank">adventcode problem 7 </a> using F#.</li>
</ul>

<p>I am using the adventofcode to improve my functional programming skills. The gist of the problem is to solve the logic gates which is represented as 16 bit integer&#8217;s  and these depend on other gates.</p>

<p>The puzzle starts of with simple problem</p>

<ul>
<li><code>123 -&gt; x</code></li>
<li><code>456 -&gt; y</code>
*<code>
*</code>`</li>
<li>````Here is my solution to <a href="http://adventofcode.com/day/7" target="_blank">adventcode problem 7 </a> using F#.</li>
</ul>

<p>I am using the adventofcode to improve my functional programming skills. The gist of the problem is to solve the logic gates which is represented as 16 bit integer&#8217;s  and these depend on other gates.</p>

<p>The puzzle starts of with simple problem</p>

<ul>
<li><code>123 -&gt; x</code></li>
<li><code>456 -&gt; y</code></li>
<li>``Here is my solution to <a href="http://adventofcode.com/day/7" target="_blank">adventcode problem 7 </a> using F#.</li>
</ul>

<p>I am using the adventofcode to improve my functional programming skills. The gist of the problem is to solve the logic gates which is represented as 16 bit integer&#8217;s  and these depend on other gates.</p>

<p>The puzzle starts of with simple problem</p>

<ul>
<li><code>123 -&gt; x</code></li>
<li><code>456 -&gt; y</code>
*``</li>
<li>```Here is my solution to <a href="http://adventofcode.com/day/7" target="_blank">adventcode problem 7 </a> using F#.</li>
</ul>

<p>I am using the adventofcode to improve my functional programming skills. The gist of the problem is to solve the logic gates which is represented as 16 bit integer&#8217;s  and these depend on other gates.</p>

<p>The puzzle starts of with simple problem</p>

<ul>
<li><code>123 -&gt; x</code></li>
<li><code>456 -&gt; y</code></li>
<li>``Here is my solution to <a href="http://adventofcode.com/day/7" target="_blank">adventcode problem 7 </a> using F#.</li>
</ul>

<p>I am using the adventofcode to improve my functional programming skills. The gist of the problem is to solve the logic gates which is represented as 16 bit integer&#8217;s  and these depend on other gates.</p>

<p>The puzzle starts of with simple problem</p>

<ul>
<li><code>123 -&gt; x</code></li>
<li><code>456 -&gt; y</code>
*<code>
*</code><code>
*</code>```</li>
<li>`````Here is my solution to <a href="http://adventofcode.com/day/7" target="_blank">adventcode problem 7 </a> using F#.</li>
</ul>

<p>I am using the adventofcode to improve my functional programming skills. The gist of the problem is to solve the logic gates which is represented as 16 bit integer&#8217;s  and these depend on other gates.</p>

<p>The puzzle starts of with simple problem</p>

<ul>
<li><code>123 -&gt; x</code></li>
<li><code>456 -&gt; y</code></li>
<li>``Here is my solution to <a href="http://adventofcode.com/day/7" target="_blank">adventcode problem 7 </a> using F#.</li>
</ul>

<p>I am using the adventofcode to improve my functional programming skills. The gist of the problem is to solve the logic gates which is represented as 16 bit integer&#8217;s  and these depend on other gates.</p>

<p>The puzzle starts of with simple problem</p>

<ul>
<li><code>123 -&gt; x</code></li>
<li><code>456 -&gt; y</code>
*``</li>
<li>```Here is my solution to <a href="http://adventofcode.com/day/7" target="_blank">adventcode problem 7 </a> using F#.</li>
</ul>

<p>I am using the adventofcode to improve my functional programming skills. The gist of the problem is to solve the logic gates which is represented as 16 bit integer&#8217;s  and these depend on other gates.</p>

<p>The puzzle starts of with simple problem</p>

<ul>
<li><code>123 -&gt; x</code></li>
<li><code>456 -&gt; y</code></li>
<li>``Here is my solution to <a href="http://adventofcode.com/day/7" target="_blank">adventcode problem 7 </a> using F#.</li>
</ul>

<p>I am using the adventofcode to improve my functional programming skills. The gist of the problem is to solve the logic gates which is represented as 16 bit integer&#8217;s  and these depend on other gates.</p>

<p>The puzzle starts of with simple problem</p>

<ul>
<li><code>123 -&gt; x</code></li>
<li><code>456 -&gt; y</code>
*<code>
*</code>`</li>
<li>````Here is my solution to <a href="http://adventofcode.com/day/7" target="_blank">adventcode problem 7 </a> using F#.</li>
</ul>

<p>I am using the adventofcode to improve my functional programming skills. The gist of the problem is to solve the logic gates which is represented as 16 bit integer&#8217;s  and these depend on other gates.</p>

<p>The puzzle starts of with simple problem</p>

<ul>
<li><code>123 -&gt; x</code></li>
<li><code>456 -&gt; y</code></li>
<li>``Here is my solution to <a href="http://adventofcode.com/day/7" target="_blank">adventcode problem 7 </a> using F#.</li>
</ul>

<p>I am using the adventofcode to improve my functional programming skills. The gist of the problem is to solve the logic gates which is represented as 16 bit integer&#8217;s  and these depend on other gates.</p>

<p>The puzzle starts of with simple problem</p>

<ul>
<li><code>123 -&gt; x</code></li>
<li><code>456 -&gt; y</code>
*``</li>
<li>```Here is my solution to <a href="http://adventofcode.com/day/7" target="_blank">adventcode problem 7 </a> using F#.</li>
</ul>

<p>I am using the adventofcode to improve my functional programming skills. The gist of the problem is to solve the logic gates which is represented as 16 bit integer&#8217;s  and these depend on other gates.</p>

<p>The puzzle starts of with simple problem</p>

<ul>
<li><code>123 -&gt; x</code></li>
<li><code>456 -&gt; y</code></li>
<li>``Here is my solution to <a href="http://adventofcode.com/day/7" target="_blank">adventcode problem 7 </a> using F#.</li>
</ul>

<p>I am using the adventofcode to improve my functional programming skills. The gist of the problem is to solve the logic gates which is represented as 16 bit integer&#8217;s  and these depend on other gates.</p>

<p>The puzzle starts of with simple problem</p>

<ul>
<li><code>123 -&gt; x</code></li>
<li><code>456 -&gt; y</code>
*<code>
*</code><code>
*</code><code>
*</code><code>
*</code>````</li>
<li><code>NOT y -&gt; i</code></li>
</ul>

<p>where the if you solve the above the code should work. But the complexity comes in when the order of the gates are not as expected and so the code would have solve the dependent ones before solving the entire solution.</p>

<p>One of the things that I really love about the FP code is union types and pattern matching.</p>

<p>That is the composite  type that could hold multiple different data types. In a non-functional static language I would have ended up creating nested types for each one of these.</p>

<p>My solutions to the adventofcode is here <a href="https://github.com/naveensrinivasan/adventcode/" target="_blank"><a href="https://github.com/naveensrinivasan/adventcode/">https://github.com/naveensrinivasan/adventcode/</a></a></p>

<p>After finishing I realized that I could have used the Tree structure which could help in traversal of the tree.</p>

<p>[gist id = &#8220;6d162d9f631cd636d14b&#8221;] which would have made this problem simpler.</p>

<p>Here is my solution.</p>

<p>[gist id = &#8220;6165418036481bae3756&#8221;]</p>
]]></content>
        </item>
        
        <item>
            <title>Parsing GitHub API</title>
            <link>/p2571/</link>
            <pubDate>Wed, 09 Dec 2015 16:46:57 +0000</pubDate>
            
            <guid>/p2571/</guid>
            <description>I have been contributing to https://github.com/octokit/octokit.net project. It is the API for accessing GitHub. One of the recent questions that came up was to get the list of https://github.com/octokit/octokit.net/issues/968.
The API&amp;#8217;s are published in HTML https://developer.github.com/v3/
There are about 63 + categories that have API. Wanted to parse all of these with least manual intervention.
[gist id = &amp;#8220;58fa8eb57e61535f10db&amp;#8221;]
The above goes to the main URL looks for all sub-categories and download&amp;#8217;s each of the web pages and extracts &amp;#8220;GET&amp;#8220;, &amp;#8220;DELETE&amp;#8220;, &amp;#8220;PATCH&amp;#8220;, &amp;#8220;POST&amp;#8220;</description>
            <content type="html"><![CDATA[<p>I have been contributing to <a href="https://github.com/octokit/octokit.net" target="_blank"><a href="https://github.com/octokit/octokit.net">https://github.com/octokit/octokit.net</a></a> project. It is the API for accessing GitHub. One of the recent questions that came up was to get the list of <a href="https://github.com/octokit/octokit.net/issues/968" target="_blank"><a href="https://github.com/octokit/octokit.net/issues/968">https://github.com/octokit/octokit.net/issues/968</a></a>.</p>

<p>The API&#8217;s are published in HTML <a href="https://developer.github.com/v3/" target="_blank"><a href="https://developer.github.com/v3/">https://developer.github.com/v3/</a></a></p>

<p>There are about 63 + categories that have API. Wanted to parse all of these with least manual intervention.</p>

<p>[gist id = &#8220;58fa8eb57e61535f10db&#8221;]</p>

<p>The above goes to the main URL looks for all sub-categories and download&#8217;s each of the web pages and extracts <span class="pl-s"><span class="pl-pds">&#8220;</span><em>GET<span class="pl-pds">&#8220;</span></em></span><em>, <span class="pl-s"><span class="pl-pds">&#8220;</span>DELETE<span class="pl-pds">&#8220;</span></span>, <span class="pl-s"><span class="pl-pds">&#8220;</span>PATCH<span class="pl-pds">&#8220;</span></span>, <span class="pl-s"><span class="pl-pds">&#8220;</span>POST<span class="pl-pds">&#8220;</span></span></em></p>

<p>This uses the <a href="https://www.nuget.org/packages/HtmlAgilityPack" target="_blank">HtmlAgility</a> for parsing.</p>

<p>And the output would look something like this.</p>

<p><img src="https://camo.githubusercontent.com/03204325907aae77bb2f865117271bf28136d5ca/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f4356766c6b5878564141456d7454332e706e67" alt="" /></p>

<p>&nbsp;</p>

<p>&nbsp;</p>
]]></content>
        </item>
        
        <item>
            <title>fsharp docker image</title>
            <link>/p2481/</link>
            <pubDate>Wed, 11 Nov 2015 02:41:14 +0000</pubDate>
            
            <guid>/p2481/</guid>
            <description>The fsharp project has a official docker image https://github.com/fsprojects/docker-fsharp . The one issue with that is it is based on mono 4.0.4 which is buggy and fsharp does not work very well. The latest alpha release of the mono with which fsharp works well is 4.2.0. The 4.2.0 isn&amp;#8217;t available in stable channels.
So I created a docker image with the latest mono from their alpha repo and using the latest fsharp from the github.</description>
            <content type="html"><![CDATA[<p>The fsharp project has a official docker image <a href="https://github.com/fsprojects/docker-fsharp" target="_blank"><a href="https://github.com/fsprojects/docker-fsharp">https://github.com/fsprojects/docker-fsharp</a></a> . The one issue with that is it is based on mono 4.0.4 which is buggy and fsharp does not work very well. The latest alpha release of the mono with which fsharp works well is 4.2.0. The 4.2.0 isn&#8217;t available in stable channels.</p>

<p>So I created a docker image with the latest mono from their alpha repo and using the latest fsharp from the github.</p>

<p><a href="https://github.com/naveensrinivasan/fsharp-docker" target="_blank"><a href="https://github.com/naveensrinivasan/fsharp-docker">https://github.com/naveensrinivasan/fsharp-docker</a></a></p>

<p>[github file = &#8220;/naveensrinivasan/fsharp-docker/blob/master/Dockerfile&#8221;]</p>

<p>It is also available in the docker hub. You could get it by</p>

<p>docker pull naveensrinivasan/fsharp</p>
]]></content>
        </item>
        
        <item>
            <title>View the http redirect and response message from an external authentication provider using ETW</title>
            <link>/p1510/</link>
            <pubDate>Mon, 29 Jun 2015 02:57:26 +0000</pubDate>
            
            <guid>/p1510/</guid>
            <description>Recently I had to troubleshoot messages that were being sent from an web application hosted on IIS to an external authentication provider. The logs from the application wasn&amp;#8217;t something closer to the metal and wasn&amp;#8217;t really providing all the details. I really wanted something like fiddler for the webserver. I could have a ran network traces to troubleshoot the issue but the problem was it wasn&amp;#8217;t happening consistently. It was sporadic.</description>
            <content type="html"><![CDATA[<p>Recently I had to troubleshoot messages that were being sent from an web application hosted on IIS to an external authentication provider. The logs from the application wasn&#8217;t something closer to the metal and wasn&#8217;t really providing all the details. I really wanted something like fiddler for the webserver. I could have a ran network traces to troubleshoot the issue but the problem was it wasn&#8217;t happening consistently. It was sporadic. I knew there would be ETW traces that would have this information. The IIS web logs don&#8217;t capture this information.</p>

<p>Here is a example of the SAML authentication process</p>

<p><a href="https://naveensrinivasan.files.wordpress.com/2015/06/500px-saml.jpg"><img class=" size-full wp-image-1511 aligncenter" src="https://naveensrinivasan.files.wordpress.com/2015/06/500px-saml.jpg" alt="500px-SAML" width="500" height="469" /></a></p>

<p>In the application I was working with, IIS was the relying party and the user was to be authenticated with Identity Provider.</p>

<p>I wanted to troubleshoot the &#8220;AuthnRequest&#8221; and &#8220;Auth Resp&#8221; from and to the IIS. This can be applied to any external authentication like credit card authentication.</p>

<p>I fired my favorite tool <a href="http://blogs.msdn.com/b/vancem/archive/tags/perfview/" target="_blank">Perfview</a> and captured all the IIS traces along with other defaults. I wasn&#8217;t really interested in the .NET Code.</p>

<p>Here is the command line for Perfview to the IIS Providers</p>

<p>[gist id = &#8220;86a6d7daac73484ef504&#8221;]</p>

<p>If for some reason that does not work.  You could always use the additional providers in Perfview and add these providers which are IIS and HTTP providers.</p>

<p>[gist id = &#8220;5ac34bdd047d2d80cc44&#8221;]</p>

<p>I let perfview do its job and then stopped the trace when there was an issue.</p>

<p>Here are the ETW events that capture the SAML Request that was sent from IIS to the IDP</p>

<p>Event Name</p>

<ol>
<li>IIS_Trace/IISGeneral/GENERAL_RESPONSE_HEADERS</li>
<li>Microsoft-Windows-IIS/EventID(47)</li>
<li>IIS_Trace/IISGeneral/GENERAL_RESPONSE_ENTITY_BUFFER</li>
<li>Microsoft-Windows-IIS/EventID(49)</li>
<li>IIS_Trace/IISGeneral/GENERAL_REQUEST_HEADERS</li>
</ol>

<p><a href="https://naveensrinivasan.files.wordpress.com/2015/06/samlrequest.jpg"><img class="alignleft size-full wp-image-1515" src="https://naveensrinivasan.files.wordpress.com/2015/06/samlrequest.jpg" alt="SamlRequest" width="660" height="231" srcset="https://www.naveensrinivasan.com/wp-content/uploads/2015/06/samlrequest.jpg 1157w, https://www.naveensrinivasan.com/wp-content/uploads/2015/06/samlrequest-300x105.jpg 300w, https://www.naveensrinivasan.com/wp-content/uploads/2015/06/samlrequest-768x269.jpg 768w, https://www.naveensrinivasan.com/wp-content/uploads/2015/06/samlrequest-1024x358.jpg 1024w" sizes="(max-width: 660px) 100vw, 660px" /></a></p>

<p>Here are the ETW events that capture the SAML Response that was being posted from the IDP to the IIS</p>

<ol>
<li>IIS_Trace/IISGeneral/GENERAL_REQUEST_ENTITY</li>
<li>Microsoft-Windows-IIS/EventID(51)</li>
</ol>

<p><a href="https://naveensrinivasan.files.wordpress.com/2015/06/samlresponse.jpg"><img class="alignleft size-full wp-image-1514" src="https://naveensrinivasan.files.wordpress.com/2015/06/samlresponse.jpg" alt="samlresponse" width="660" height="39" srcset="https://www.naveensrinivasan.com/wp-content/uploads/2015/06/samlresponse.jpg 1177w, https://www.naveensrinivasan.com/wp-content/uploads/2015/06/samlresponse-300x18.jpg 300w, https://www.naveensrinivasan.com/wp-content/uploads/2015/06/samlresponse-768x46.jpg 768w, https://www.naveensrinivasan.com/wp-content/uploads/2015/06/samlresponse-1024x61.jpg 1024w" sizes="(max-width: 660px) 100vw, 660px" /></a></p>

<p>With this I was able to troubleshoot message that was being sent and received to the IIS.</p>

<p>&nbsp;</p>
]]></content>
        </item>
        
        <item>
            <title>Getting my Yoga stats from Yogaglo</title>
            <link>/p1499/</link>
            <pubDate>Wed, 17 Jun 2015 19:16:33 +0000</pubDate>
            
            <guid>/p1499/</guid>
            <description>I am Yogi and have practiced some sort physical workout for a while now. IMHO physical strength/ movement have always attributed to better clarity in my life! This post shows how I managed to get my yogaglo stats to track and measure my practice.    I am strong believer in habit loops and always have found that has worked a lot for me. One of the good books on this which I recommend to other ishttp://www.</description>
            <content type="html"><![CDATA[<div>
  <h1>
  </h1>
  
  <p>
    I am Yogi and have practiced some sort physical workout for a while now. IMHO physical strength/ movement have always attributed to better clarity in my life! This post shows how I managed to get my <a title="Yogaglo" href="https://www.yogaglo.com/mypractice" target="_blank">yogaglo</a> stats to track and measure my practice.
  </p>
  
  <p>
    <a href="https://naveensrinivasan.files.wordpress.com/2015/06/naveensrinivasan-trx.jpg"><img class=" wp-image-1503 size-large alignnone" src="https://naveensrinivasan.files.wordpress.com/2015/06/naveensrinivasan-trx.jpg?w=343" alt="NaveenSrinivasan-TRX" width="343" height="1024" /></a>
  </p>
  
  <p>
    I am strong believer in habit loops and always have found that has worked a lot for me. One of the good books on this which I recommend to other is<a title="Power Of Habit" href="http://www.amazon.com/The-Power-Habit-What-Business/dp/081298160X" target="_blank">http://www.amazon.com/The-Power-Habit-What-Business/dp/081298160X</a> and also another good resource is <a href="http://getupandcode.com/" target="_blank">http://getupandcode.com/</a> which is a audio podcast fitness and technology.
  </p>
  
  <p>
    I have been practicing Yoga for a while now and I would like to track my practice. I usually go to studio twice a week to be part of the <a title="Sangha" href="https://en.wikipedia.org/?title=Sangha" target="_blank">Sangha</a> and the rest 4-5 days I practice twice a day.
  </p>
  
  <p>
    I knew yogaglo had my stats information stored in their site because when I logged into the site it did provide me with history. But I wanted the API to query based on the raw data. I wanted to track how often I worked and what kind of classes have I done. My goal was to work on the strengthening my core and I usually like to track that and API would help with this kind of information.
  </p>
  
  <p>
    Thanks to tools like <a title="fiddler" href="http://www.telerik.com/fiddler" target="_blank">fiddler</a> or <a href="http://mitmproxy.org/" target="_blank">http://mitmproxy.org/</a> I could look at the http traffic that was sent with the headers. The headers are important because it contained the authentication token information. FYI I have set yogaglo to remember my login information which meant I have cookies that it could send across part of the http request.
  </p>
  
  <p>
    Here is the code to download the yogaglo stats
  </p>
  
  <p>
    [gist https://gist.github.com/naveensrinivasan/2e40f409bf6c386766c6]
  </p>
  
  <p>
    You could take the json and dump into excel and get some amazing stats using <a href="https://support.office.com/en-us/article/Introduction-to-Microsoft-Power-Query-for-Excel-6E92E2F4-2079-4E1F-BAD5-89F6269CD605" target="_blank">powerquery</a>.
  </p>
  
  <p>
    I am not a excel whiz to do it. I used the json to convert it to C# objects using<a href="http://json2csharp.com/" target="_blank">http://json2csharp.com/</a> and here is the code it generated.
  </p>
  
  <p>
    [gist https://gist.github.com/naveensrinivasan/0cf3cecede742c3587dc]
  </p>
  
  <p>
    With that here is a simple query to get total duration by date.
  </p>
  
  <p>
    [gist https://gist.github.com/naveensrinivasan/213c2092babc23d7c772]
  </p>
</div>
]]></content>
        </item>
        
        <item>
            <title>Use Eventsource  to get the duration of a Start Stop of Custom ETW events</title>
            <link>/p1493/</link>
            <pubDate>Mon, 08 Jun 2015 19:53:29 +0000</pubDate>
            
            <guid>/p1493/</guid>
            <description>The EventSource library provides an option to get duration of Custom ETW start and stop events and when used with Perfview we could leverage this to stop tracing when the duration is more than what we expect.
What it is for example ,there could an external API call the application makes that has to be traced with the start and when it finishes then the stop of the event is called.</description>
            <content type="html"><![CDATA[<p>The <a href="https://www.nuget.org/packages/Microsoft.Diagnostics.Tracing.EventSource/" target="_blank">EventSource</a> library provides an option to get duration of Custom ETW start and stop events and when used with Perfview we could leverage this to stop tracing when the duration is more than what we expect.</p>

<p>What it is for example ,there could an external API call the application makes that has to be traced with the start and when it finishes then the stop of the event is called. Ideally we would have a ability to view the duration of these events similar to ASP.NET calls.  The EventSource Library along with Perfview provides this ability to view the duration between the start and stop events.</p>

<p>Here is a code sample with CustomEvent</p>

<p>[gist <a href="https://gist.github.com/naveensrinivasan/7e54c72dc628ae7da69e">https://gist.github.com/naveensrinivasan/7e54c72dc628ae7da69e</a>]</p>

<p>And here is the output from Perfview with the duration.</p>

<p><a href="https://naveensrinivasan.files.wordpress.com/2015/06/startstopetw.jpg"><img class="alignleft wp-image-1495 size-full" src="https://naveensrinivasan.files.wordpress.com/2015/06/startstopetw.jpg" alt="StartStopETW" width="494" height="204" srcset="https://www.naveensrinivasan.com/wp-content/uploads/2015/06/startstopetw.jpg 494w, https://www.naveensrinivasan.com/wp-content/uploads/2015/06/startstopetw-300x124.jpg 300w" sizes="(max-width: 494px) 100vw, 494px" /></a></p>

<p>How often we want to capture trace when the performance of our custom event goes down to figure out what went wrong. This is very much possible with this.</p>

<p>Here is the command</p>

<p>PerfView /StopOnEtwEvent:*CustomEvent//Start;TriggerMSec=2000 collect</p>

<p>This would record the ETW events on a flight recorder mode and would stop when the CustomEvent took more than 2 seconds. This is one of the features I really like because it is a great asset to DevOps to see when the issue arises.</p>

<p>Here is an example of Perfview Stop reason that shows why perfview stopped which clearly  indicates when the duration of event took more than 2000 milliseconds.</p>

<p><a href="https://naveensrinivasan.files.wordpress.com/2015/06/perfviewstopreason.jpg"><img class="alignleft size-full wp-image-1496" src="https://naveensrinivasan.files.wordpress.com/2015/06/perfviewstopreason.jpg" alt="PerfviewStopReason" width="660" height="44" srcset="https://www.naveensrinivasan.com/wp-content/uploads/2015/06/perfviewstopreason.jpg 897w, https://www.naveensrinivasan.com/wp-content/uploads/2015/06/perfviewstopreason-300x20.jpg 300w, https://www.naveensrinivasan.com/wp-content/uploads/2015/06/perfviewstopreason-768x51.jpg 768w" sizes="(max-width: 660px) 100vw, 660px" /></a></p>

<p>There is a bug in perfview that would not record Stop triggered events. I have reported this and I hope this would be fixed in the next public release.</p>

<p>The source code for these samples are here</p>

<p><a href="https://github.com/naveensrinivasan/ETWSamples" target="_blank"><a href="https://github.com/naveensrinivasan/ETWSamples">https://github.com/naveensrinivasan/ETWSamples</a></a></p>
]]></content>
        </item>
        
        <item>
            <title>Log dynamic Custom objects in ETW using EventSource</title>
            <link>/p1489/</link>
            <pubDate>Fri, 29 May 2015 03:35:50 +0000</pubDate>
            
            <guid>/p1489/</guid>
            <description>With the latest release of EventSource we could create dynamic events without having to create class that inherits from EventSource. This is will be not be good for Performance.
Using these methods we could either log Anonymous objects or Classes that have the EventData Attribute applied to it. The caveat is that these objects public properties alone will be serialized. These properties have to be of native types like string,int,datetime, guid , IEnumerable.</description>
            <content type="html"><![CDATA[<p>With the latest release of <a href="http://www.nuget.org/packages/Microsoft.Diagnostics.Tracing.EventSource" target="_blank">EventSource</a> we could create dynamic events without having to create class that inherits from EventSource. This is will be not be good for Performance.</p>

<p>Using these methods we could either log Anonymous objects or Classes that have the EventData Attribute applied to it. The caveat is that these objects public properties alone will be serialized. These properties have to be of native types like string,int,datetime, guid , IEnumerable. If you don&#8217;t want a property to be serialized you could apply the attribute EventIgnore.</p>

<p>The source code for this repository is in <a href="https://github.com/naveensrinivasan/ETWSamples" target="_blank"><a href="https://github.com/naveensrinivasan/ETWSamples">https://github.com/naveensrinivasan/ETWSamples</a></a></p>

<p>Here is the sample code of using  Dynamic eventsource to generate ETW traces</p>

<p>[gist <a href="https://gist.github.com/naveensrinivasan/83ded09f7d754ad0b3a8">https://gist.github.com/naveensrinivasan/83ded09f7d754ad0b3a8</a>]</p>

<p>Here is the trace from Perfview generated using</p>

<p>[gist <a href="https://gist.github.com/naveensrinivasan/11a793b35a18fc9546dd">https://gist.github.com/naveensrinivasan/11a793b35a18fc9546dd</a>]</p>

<p><a href="https://naveensrinivasan.files.wordpress.com/2015/05/dynamicetw.jpg"><img class=" size-full wp-image-1490 aligncenter" src="https://naveensrinivasan.files.wordpress.com/2015/05/dynamicetw.jpg" alt="DynamicETW" width="660" height="171" srcset="https://www.naveensrinivasan.com/wp-content/uploads/2015/05/dynamicetw.jpg 929w, https://www.naveensrinivasan.com/wp-content/uploads/2015/05/dynamicetw-300x78.jpg 300w, https://www.naveensrinivasan.com/wp-content/uploads/2015/05/dynamicetw-768x199.jpg 768w" sizes="(max-width: 660px) 100vw, 660px" /></a></p>
]]></content>
        </item>
        
        <item>
            <title>The case of slow Visual Studio startup</title>
            <link>/p1469/</link>
            <pubDate>Wed, 20 May 2015 01:23:35 +0000</pubDate>
            
            <guid>/p1469/</guid>
            <description>In this post I would use Perfview /ETW to diagnose the delayed start-up of visual studio.
To analyze the problem start-up VS within Perfview as a run command
[gist https://gist.github.com/naveensrinivasan/5eb6406d6d38f2143acb]
This would launch visual studio and collect etw traces. I have also enabled CodeMarkers , which is ETW traces for Visual Studio in case if you want to trace any extensions performance.
After it completes I choose the CPU Stacks and filtered with devenv.</description>
            <content type="html"><![CDATA[<p>In this post I would use Perfview /ETW to diagnose the delayed start-up of visual studio.</p>

<p>To analyze the problem start-up VS within Perfview as a run command</p>

<p>[gist <a href="https://gist.github.com/naveensrinivasan/5eb6406d6d38f2143acb">https://gist.github.com/naveensrinivasan/5eb6406d6d38f2143acb</a>]</p>

<p>This would launch visual studio and collect etw traces. I have also enabled CodeMarkers , which is ETW traces for Visual Studio in case if you want to trace any extensions performance.</p>

<p><a href="https://naveensrinivasan.files.wordpress.com/2015/05/perfview-main.jpg"><img class="alignleft size-full wp-image-1474" src="https://naveensrinivasan.files.wordpress.com/2015/05/perfview-main.jpg" alt="perfview-main" width="660" height="353" srcset="https://www.naveensrinivasan.com/wp-content/uploads/2015/05/perfview-main.jpg 1000w, https://www.naveensrinivasan.com/wp-content/uploads/2015/05/perfview-main-300x161.jpg 300w, https://www.naveensrinivasan.com/wp-content/uploads/2015/05/perfview-main-768x411.jpg 768w" sizes="(max-width: 660px) 100vw, 660px" /></a>After it completes I choose the CPU Stacks and filtered with devenv.exe process.</p>

<p>On the CPU window I choose call-tree tab which displays the threads.<a href="https://naveensrinivasan.files.wordpress.com/2015/05/perfviewcpuview.jpg"><img class="alignleft size-full wp-image-1475" src="https://naveensrinivasan.files.wordpress.com/2015/05/perfviewcpuview.jpg" alt="perfviewcpuview" width="660" height="501" srcset="https://www.naveensrinivasan.com/wp-content/uploads/2015/05/perfviewcpuview.jpg 961w, https://www.naveensrinivasan.com/wp-content/uploads/2015/05/perfviewcpuview-300x228.jpg 300w, https://www.naveensrinivasan.com/wp-content/uploads/2015/05/perfviewcpuview-768x583.jpg 768w" sizes="(max-width: 660px) 100vw, 660px" /></a>The most amount of time is spent on the start-up thread and that is what we want to zoom into.</p>

<p><a href="https://naveensrinivasan.files.wordpress.com/2015/05/groupedcall-stacks.png"><img class="alignleft size-full wp-image-1477" src="https://naveensrinivasan.files.wordpress.com/2015/05/groupedcall-stacks.png" alt="groupedcall-stacks" width="660" height="426" srcset="https://www.naveensrinivasan.com/wp-content/uploads/2015/05/groupedcall-stacks.png 835w, https://www.naveensrinivasan.com/wp-content/uploads/2015/05/groupedcall-stacks-300x194.png 300w, https://www.naveensrinivasan.com/wp-content/uploads/2015/05/groupedcall-stacks-768x496.png 768w" sizes="(max-width: 660px) 100vw, 660px" /></a>When I expanded it does not show the information and everything is grouped into OTHER which does not help me.</p>

<p>The reason for that is perfview groups call-stacks for better viewing. I cleared the &#8220;groupparts&#8221; textbox and then expanded the start-up thread.</p>

<p><a href="https://naveensrinivasan.files.wordpress.com/2015/05/actualcallstacks.jpg"><img class="alignleft wp-image-1478 size-full" src="https://naveensrinivasan.files.wordpress.com/2015/05/actualcallstacks.jpg" alt="actualcallstacks" width="660" height="352" srcset="https://www.naveensrinivasan.com/wp-content/uploads/2015/05/actualcallstacks.jpg 1366w, https://www.naveensrinivasan.com/wp-content/uploads/2015/05/actualcallstacks-300x160.jpg 300w, https://www.naveensrinivasan.com/wp-content/uploads/2015/05/actualcallstacks-768x409.jpg 768w, https://www.naveensrinivasan.com/wp-content/uploads/2015/05/actualcallstacks-1024x546.jpg 1024w" sizes="(max-width: 660px) 100vw, 660px" /></a>From the call-stacks I could make almost 42% of time is spent on Xamarin and DevExpress extensions within VS. Now I could turn them off and have a better performance.</p>

<p>Perfview is great tool for identifying where the time is being spent!</p>
]]></content>
        </item>
        
        <item>
            <title>Managed Stack Explorer using ClrMD</title>
            <link>/p1457/</link>
            <pubDate>Thu, 14 May 2015 23:14:45 +0000</pubDate>
            
            <guid>/p1457/</guid>
            <description>How often we run into an issue in the field where we just want to see the managed call-stack where the exception is or where the thread is hung. One of the options is debugger or something like ETW.
So I built a managed stack explorer
http://naveensrinivasan.github.io/ManagedStackExplorer/

Managed Stack Explorer provides call stack for .NET applications using managed code with thread local variables. The API as of now does not provide values for the local variables.</description>
            <content type="html"><![CDATA[<p>How often we run into an issue in the field where we just want to see the managed call-stack where the exception is or where the thread is hung. One of the options is debugger or something like ETW.</p>

<p>So I built a managed stack explorer</p>

<p><a title="http://naveensrinivasan.github.io/ManagedStackExplorer/" href="http://naveensrinivasan.github.io/ManagedStackExplorer/" target="_blank"><a href="http://naveensrinivasan.github.io/ManagedStackExplorer/">http://naveensrinivasan.github.io/ManagedStackExplorer/</a></a></p>

<p><a href="https://raw.githubusercontent.com/naveensrinivasan/ManagedStackExplorer/master/screenshot.jpg"><img class="alignleft" src="https://raw.githubusercontent.com/naveensrinivasan/ManagedStackExplorer/master/screenshot.jpg" alt="" width="1204" height="1560" /></a></p>

<p>Managed Stack Explorer provides call stack for .NET applications using managed code with thread local variables. The API as of now does not provide values for the local variables. When it is available we can update it.</p>

<p>It is a single executable without any other dll&#8217;s. It uses <a href="https://github.com/Fody/Costura">Costura</a> to embed dll.</p>

<p>The debug shim works specific to processor and would not be able to get call-stacks if it is not. So x86 exe cannot get call-stacks of x64. That&#8217;s reason for x86 and x64 specific exe&#8217;s. There is no difference in code other than how it is compiled.</p>

<p>It is work in progress and I would love some feedback and code contributions.</p>

<p>The github site also has link to download the pre-complied executables.</p>
]]></content>
        </item>
        
        <item>
            <title>Measure GC Allocations and Collections using TraceEvent</title>
            <link>/p1437/</link>
            <pubDate>Tue, 12 May 2015 01:14:34 +0000</pubDate>
            
            <guid>/p1437/</guid>
            <description>In this post I will explore how we could use TraceEvent to measure our code (even at function level) for GC Allocations and Collections.
  Save this with &amp;#8220;.linq&amp;#8221; extension and then open in linqpad.
[gist https://gist.github.com/naveensrinivasan/b72fd80876eb67557ae8]
Here is the TL;DR
Why would I want to know GC events on a function level? Doesn&amp;#8217;t the PerfMon counter provide that information on an application level? Isn&amp;#8217;t Premature optimization root of all evil?</description>
            <content type="html"><![CDATA[<p>In this post I will explore  how we could use <a href="https://www.nuget.org/packages/Microsoft.Diagnostics.Tracing.TraceEvent/" target="_blank">TraceEvent</a> to measure our code (even at function level) for GC Allocations and Collections.</p>

<div id='gallery-1' class='gallery galleryid-1437 gallery-columns-1 gallery-size-full'>
  <figure class='gallery-item'> 
  
  <div class='gallery-icon landscape'>
    <img width="400" height="400" src="https://www.naveensrinivasan.com/wp-content/uploads/2015/05/showmethecode.jpg" class="attachment-full size-full" alt="" srcset="https://www.naveensrinivasan.com/wp-content/uploads/2015/05/showmethecode.jpg 400w, https://www.naveensrinivasan.com/wp-content/uploads/2015/05/showmethecode-150x150.jpg 150w, https://www.naveensrinivasan.com/wp-content/uploads/2015/05/showmethecode-300x300.jpg 300w, https://www.naveensrinivasan.com/wp-content/uploads/2015/05/showmethecode-100x100.jpg 100w" sizes="(max-width: 400px) 100vw, 400px" />
  </div></figure>
</div>

<p>Save this with &#8220;.linq&#8221; extension and then open in  linqpad.</p>

<p>[gist <a href="https://gist.github.com/naveensrinivasan/b72fd80876eb67557ae8">https://gist.github.com/naveensrinivasan/b72fd80876eb67557ae8</a>]</p>

<p>Here is the TL;DR</p>

<p>Why would I want to know GC events on a function level? Doesn&#8217;t the PerfMon counter  provide that information on an application level? Isn&#8217;t Premature optimization root of all evil?</p>

<p>Yes, for most of the part Premature optimization is not necessary. And PerfMon GC counter&#8217;s would give answers for the whole application. But it is usually after we build the application and when we start running into performance issues we start looking at them.</p>

<p>The motivation behind this are two things <a href="https://msdn.microsoft.com/en-us/magazine/cc500596.aspx" target="_blank">Measure Early and Often for Performance</a> and <a href="http://channel9.msdn.com/Events/TechEd/NorthAmerica/2013/DEV-B333" target="_blank">Essential Truths Everyone Should Know about Performance in a Large Managed Codebase</a></p>

<p>If you haven&#8217;t read or watched the above video please do it. It let&#8217;s us know why and how to do it.</p>

<p>In the above video Dustin talks about Roslyn code base and how they used <a href="http://blogs.msdn.com/b/vancem/archive/tags/perfview/" target="_blank">Perfview </a>to measure Roslyn code base and identify potential bottlenecks early to avoid Perf issues.</p>

<p>One of the key differences between managed code and native code with respect to performance is GC. If GC is working hard then your application might not be able to get the performance that you are expecting. GC is good but if we don&#8217;t know which calls allocate what amount of data then it is an issue. Especially if you have a section code that is hit very often and which requires a lot of Perf, it is good know where the allocations are coming from. It is not explicit always.</p>

<p>In the above video Dustin shows few examples of Roslyn code where they were able to identify subtle issues that could allocate a lot when you are trying to get the most out of the code.There is also <a href="https://github.com/mjsabby/RoslynClrHeapAllocationAnalyzer" target="_blank">Roslyn Heap Allocation Analyzer</a> which looks at the code help us identify allocations which isn&#8217;t necessary. It is a cool project.</p>

<p>I took one of the examples from the video as a motivation to check if  I could measure and make it a utility in my toolbox to help me when I need one.</p>

<p>[gist <a href="https://gist.github.com/naveensrinivasan/9153a580b7f4bda55a38">https://gist.github.com/naveensrinivasan/9153a580b7f4bda55a38</a>]</p>

<p>In the above example I am trying look for a word &#8220;pede&#8221; in the lorem ipsum text. The code could get it using &#8220;foreach&#8221; or using the &#8220;Any&#8221; operator. I would like to run this few times to check what are the allocations and how long does it take. I used LINQPad as a scratch pad.</p>

<p>Here is the result of GC Allocations of using &#8220;Any&#8221; for 500 iterations and NOT the foreach</p>

<p><a href="https://naveensrinivasan.files.wordpress.com/2015/05/gcallocations.jpg"><img class="alignleft wp-image-1440 size-large" src="https://naveensrinivasan.files.wordpress.com/2015/05/gcallocations.jpg?w=660" alt="GCAllocations" width="660" height="272" srcset="https://www.naveensrinivasan.com/wp-content/uploads/2015/05/gcallocations.jpg 675w, https://www.naveensrinivasan.com/wp-content/uploads/2015/05/gcallocations-300x124.jpg 300w" sizes="(max-width: 660px) 100vw, 660px" /></a></p>

<p>The were 118 allocations of Enumerator and 146 allocations Func. GC usually allocates 100K each time it allocates that&#8217;s what is shown in the allocation amount column.</p>

<p>And here is GC Allocations when using &#8220;foreach&#8221;</p>

<p><a href="https://naveensrinivasan.files.wordpress.com/2015/05/gcallocationwithforeach.jpg"><img class="alignleft size-full wp-image-1445" src="https://naveensrinivasan.files.wordpress.com/2015/05/gcallocationwithforeach.jpg" alt="GCAllocationWithForEach" width="472" height="237" srcset="https://www.naveensrinivasan.com/wp-content/uploads/2015/05/gcallocationwithforeach.jpg 472w, https://www.naveensrinivasan.com/wp-content/uploads/2015/05/gcallocationwithforeach-300x151.jpg 300w" sizes="(max-width: 472px) 100vw, 472px" /></a></p>

<p>There are hardly any new allocations compared to the previous one.</p>

<p>Here is the GC Collections when using  &#8220;Any&#8221;</p>

<p><a href="https://naveensrinivasan.files.wordpress.com/2015/05/gccollection.jpg"><img class="alignleft size-full wp-image-1447" src="https://naveensrinivasan.files.wordpress.com/2015/05/gccollection.jpg" alt="GCCollection" width="660" height="395" srcset="https://www.naveensrinivasan.com/wp-content/uploads/2015/05/gccollection.jpg 704w, https://www.naveensrinivasan.com/wp-content/uploads/2015/05/gccollection-300x179.jpg 300w" sizes="(max-width: 660px) 100vw, 660px" /></a></p>

<p>There were 18 GC Collections using Any.</p>

<p>Here it is using foreach  and there were 0 collections.</p>

<p><a href="https://naveensrinivasan.files.wordpress.com/2015/05/zeorcollections.jpg"><img class="alignleft size-full wp-image-1448" src="https://naveensrinivasan.files.wordpress.com/2015/05/zeorcollections.jpg" alt="ZeorCollections" width="229" height="65" /></a></p>

<p>Here is measure it time duration results using Any</p>

<p><a href="https://naveensrinivasan.files.wordpress.com/2015/05/measurewithany.jpg"><img class="alignleft size-full wp-image-1449" src="https://naveensrinivasan.files.wordpress.com/2015/05/measurewithany.jpg" alt="MeasureWithAny" width="660" height="223" srcset="https://www.naveensrinivasan.com/wp-content/uploads/2015/05/measurewithany.jpg 759w, https://www.naveensrinivasan.com/wp-content/uploads/2015/05/measurewithany-300x102.jpg 300w" sizes="(max-width: 660px) 100vw, 660px" /></a></p>

<p>And here it is using Foreach</p>

<p><a href="https://naveensrinivasan.files.wordpress.com/2015/05/measurewithforeach.jpg"><img class="alignleft size-full wp-image-1450" src="https://naveensrinivasan.files.wordpress.com/2015/05/measurewithforeach.jpg" alt="MeasureWithForEach" width="660" height="253" srcset="https://www.naveensrinivasan.com/wp-content/uploads/2015/05/measurewithforeach.jpg 744w, https://www.naveensrinivasan.com/wp-content/uploads/2015/05/measurewithforeach-300x115.jpg 300w" sizes="(max-width: 660px) 100vw, 660px" /></a></p>
]]></content>
        </item>
        
        <item>
            <title>Look ma I figured out why my ETW  EventSource isn’t tracing</title>
            <link>/p1414/</link>
            <pubDate>Tue, 05 May 2015 13:47:39 +0000</pubDate>
            
            <guid>/p1414/</guid>
            <description>The EventSource class in the framework 4.5 helps in writing custom ETW tracing.
When using EventSource class built within the framework, if the order of the methods don&amp;#8217;t match ordinal number position in the class it would fail generating ETW traces. The EventSource has dependency on the order of the methods in the class.
This code would produce a valid ETW traces
[gist https://gist.github.com/naveensrinivasan/a1fcd0ec78d2473499d5]
This one would fail producing any ETW Traces.</description>
            <content type="html"><![CDATA[<p>The <a title="EventSource" href="https://msdn.microsoft.com/en-us/library/system.diagnostics.tracing.eventsource%28v=vs.110%29.aspx" target="_blank">EventSource </a>class in the framework 4.5 helps in writing custom ETW tracing.</p>

<p>When using EventSource class built within the framework, if the order of the methods don&#8217;t match ordinal number position in the class it would fail generating ETW traces. The EventSource has dependency on the order of the methods in the class.</p>

<p>This code would produce a valid ETW traces</p>

<p>[gist <a href="https://gist.github.com/naveensrinivasan/a1fcd0ec78d2473499d5">https://gist.github.com/naveensrinivasan/a1fcd0ec78d2473499d5</a>]</p>

<p>This one would fail producing any ETW Traces.</p>

<p>[gist <a href="https://gist.github.com/naveensrinivasan/0247d4e644a3da2bff04">https://gist.github.com/naveensrinivasan/0247d4e644a3da2bff04</a>]</p>

<p>The difference between them are the order of the methods. If you notice in the failing ETW tracing class the <strong>FailedTraceEvent </strong>is Second and the <strong>FailedDetailedEvent </strong>is first which is causing the trace not to be generated. The actual exception text would</p>

<blockquote>
<p>Event FailedDetailedEvent is givien event ID 1 but 2 was passed to WriteEvent.</p>
</blockquote>

<p>It&#8217;s one of those quirks that I ran into when building ETW tracing.</p>

<p><strong>How to troubleshoot these kind of failures?</strong></p>

<p>By default these kind of failed ETW exceptions would not be raised to be handled by the client code. The reason being,in production if you enable ETW tracing and all of a sudden the application crashes would not be something that we would want.</p>

<p>To troubleshoot this, use ETW tracing for exceptions. Use ETW to trace custom ETW failures. How cool is this?  My choice of tool is <a title="Perfview" href="http://blogs.msdn.com/b/vancem/archive/tags/perfview/" target="_blank">Perfview.</a></p>

<p><a href="https://naveensrinivasan.files.wordpress.com/2015/05/may-3-2015-etw-exception.jpg"><img class="alignleft wp-image-1424 size-large" src="https://naveensrinivasan.files.wordpress.com/2015/05/may-3-2015-etw-exception.jpg?w=660" alt="may-3-2015-etw-exception" width="660" height="107" srcset="https://www.naveensrinivasan.com/wp-content/uploads/2015/05/may-3-2015-etw-exception.jpg 1348w, https://www.naveensrinivasan.com/wp-content/uploads/2015/05/may-3-2015-etw-exception-300x49.jpg 300w, https://www.naveensrinivasan.com/wp-content/uploads/2015/05/may-3-2015-etw-exception-768x124.jpg 768w, https://www.naveensrinivasan.com/wp-content/uploads/2015/05/may-3-2015-etw-exception-1024x166.jpg 1024w" sizes="(max-width: 660px) 100vw, 660px" /></a></p>

<p>Within Perfview in the Events Window I enter <strong>Test|Ex</strong> in the filter text box which is shown in the above picture. FYI filter text box supports Regular expression. So by entering Test|Ex, I am filtering events with Test or Ex which for exceptions. With that information I could filter all the TestEvent&#8217;s and any exceptions that have been raised which shows ArgumentException.</p>

<p>The call-stack of the ArgumentException shows on the static contructor <strong>.cctor</strong> of  FailedEvent.</p>

<p><a href="https://naveensrinivasan.files.wordpress.com/2015/05/may-3-2015-exception-callstack.jpg"><img class="alignleft wp-image-1434 size-large" src="https://naveensrinivasan.files.wordpress.com/2015/05/may-3-2015-exception-callstack.jpg?w=660" alt="may-3-2015-exception-callstack" width="660" height="366" srcset="https://www.naveensrinivasan.com/wp-content/uploads/2015/05/may-3-2015-exception-callstack.jpg 681w, https://www.naveensrinivasan.com/wp-content/uploads/2015/05/may-3-2015-exception-callstack-300x167.jpg 300w" sizes="(max-width: 660px) 100vw, 660px" /></a></p>
]]></content>
        </item>
        
        <item>
            <title>Making an Image Easier to Debug</title>
            <link>/p1368/</link>
            <pubDate>Mon, 20 Jun 2011 17:45:24 +0000</pubDate>
            
            <guid>/p1368/</guid>
            <description>I am doing security review for a managed application which is obfuscated. So I am doing a lot of disassembling code at runtime using Windbg. One of the issues is that code gets JIT optimized because of the retail build. This makes it harder for me debug when mapping it back. Realized that I could turnoff JIT Optimization&amp;#8217;s using the ini file.
[sourcecode]
[.NET Framework Debugging Control]
GenerateTrackingInfo=1
AllowOptimize=0
[/sourcecode]</description>
            <content type="html"><![CDATA[<p>I am doing security review for a managed application which is obfuscated. So I am doing a lot of   disassembling code at runtime using Windbg. One of the issues is that code gets JIT optimized because of the retail build. This makes it harder for me debug when mapping it back. Realized  that I could turnoff  JIT Optimization&#8217;s using the ini file.</p>

<p>[sourcecode]</p>

<p>[.NET Framework Debugging Control]</p>

<p>GenerateTrackingInfo=1</p>

<p>AllowOptimize=0</p>

<p>[/sourcecode]</p>

<p>Another use of <a href="http://msdn.microsoft.com/en-us/library/9dd8z24x.aspx" target="_blank">feature </a>which I guess wasn&#8217;t really intended for.</p>

<pre></pre>
]]></content>
        </item>
        
        <item>
            <title>Updating .NET String in memory with Windbg</title>
            <link>/p1353/</link>
            <pubDate>Tue, 14 Jun 2011 16:42:24 +0000</pubDate>
            
            <guid>/p1353/</guid>
            <description>In this post I would show a simple trick to update .NET strings in memory with Windbg. The caveat is make sure the string that you&amp;#8217;re updating is long enough to fit into the string buffer. If not there would be a memory corruption.
Here is a simple windows form application with title &amp;#8220;Good&amp;#8221;

The goal is to update the title from &amp;#8220;Good&amp;#8221; to &amp;#8220;Bad&amp;#8221;.
[sourcecode language=&amp;#8221;csharp&amp;#8221;]
button1.Click += (s,b) =&amp;gt; Text = _caption;</description>
            <content type="html"><![CDATA[<p>In this post I would show a simple trick to update .NET strings in memory with Windbg. The caveat is make sure the string that you&#8217;re updating is long enough to fit into the string buffer. If not there would be a memory corruption.</p>

<p>Here is a simple windows form application with title &#8220;Good&#8221;</p>

<p><a href="http://104.197.135.42/wp-content/uploads/2011/06/updatestring13.jpg"><img class="alignnone size-full wp-image-1356" title="updatestring" src="http://104.197.135.42/wp-content/uploads/2011/06/updatestring13.jpg" alt="" width="301" height="300" /></a></p>

<p>The goal is to update the title from &#8220;Good&#8221; to &#8220;Bad&#8221;.</p>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>button1.Click += (s,b) =&gt; Text = _caption;</p>

<p>[/sourcecode]</p>

<p><span class="Apple-style-span" style="font-family:Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif;font-size:13px;line-height:19px;white-space:normal;">I am updating the title in the button click.</span></p>

<p>Here is the actual string object within the debugger</p>

<pre>0:006&gt; !do 0294d0a0
Name:        System.String
MethodTable: 59b9fb64
EEClass:     598d8bb0
Size:        22(0x16) bytes
File:        C:WindowsMicrosoft.NetassemblyGAC_32mscorlib
v4.0_4.0.0.0__b77a5c561934e089mscorlib.dll
String:      Good
Fields:
      MT    Field   Offset                 Type VT     Attr    Value Name
59ba2b30  40000ed        4         System.Int32  1 instance        4 m_stringLength
59ba1f80  40000ee        8          System.Char  1 instance       47 m_firstChar
59b9fb64  40000ef        8        System.String  0   shared   static Empty
    &gt;&gt; Domain:Value  004b0308:02941228 &lt;&lt;</pre>

<p>I would be using the <a title="e" href="http://msdn.microsoft.com/en-us/library/ff545308(VS.85).aspx" target="_blank">e</a>  command to update the memory. The <strong>ezu </strong>command is used for updating  Null-terminated Unicode string .</p>

<p>Notice the first character starts in the 8th offset from the above. So we would have start updating the string only from the 8th offset. The first 8 bytes of object are for syncblock index and method table pointer.</p>

<p>Here is the command to update the string memory.</p>

<blockquote>
<p>ezu 0294d0a0+8 &#8220;Bad&#8221;</p>
</blockquote>

<p>And the updated form title.</p>

<p><a href="http://104.197.135.42/wp-content/uploads/2011/06/bad2.jpg"><img class="alignnone size-full wp-image-1358" title="bad" src="http://104.197.135.42/wp-content/uploads/2011/06/bad2.jpg" alt="" width="301" height="300" /></a></p>
]]></content>
        </item>
        
        <item>
            <title>Who is is blocking my UI Thread? Diagnosing the cause using Windbg</title>
            <link>/p1344/</link>
            <pubDate>Fri, 01 Apr 2011 18:59:06 +0000</pubDate>
            
            <guid>/p1344/</guid>
            <description>It so happens most of the applications block the UI thread and do sync I/O, which is most common reason for “Not Responding” window. Here is a post http://blogs.msdn.com/b/nathannesbit/archive/2010/12/28/detecting-ui-thread-misuse.aspx that tries helping in detecting this. I like to handle this from bottom of the stack because we have a cool tool called debugger.
The approach is simple as having a break-point on a function like “KERNEL32!WaitFor*” and checking if the current thread is a UI thread.</description>
            <content type="html"><![CDATA[<p>It so happens most of the applications block the UI thread and do sync I/O, which is most common reason for “Not Responding” window. Here is a post <a href="http://blogs.msdn.com/b/nathannesbit/archive/2010/12/28/detecting-ui-thread-misuse.aspx">http://blogs.msdn.com/b/nathannesbit/archive/2010/12/28/detecting-ui-thread-misuse.aspx</a> that tries helping in detecting this. I like to handle this from bottom of the stack because we have a cool tool called debugger.</p>

<p>The approach is simple as having a break-point on a function like “KERNEL32!WaitFor*” and checking if the current thread is a UI thread. This could also be done for other functions like Sleep on UI thread by having a break-point on “KERNELBASE!SleepEx”.</p>

<p>Here are steps to determine if a thread is a STA thread / UI Thread. This is information is stored in TEB structure (thread environment block). Here is the output of the teb on the UI Thread</p>

<blockquote>
<p>0:000&gt; dt ntdll!_TEB @$teb</p>

<p>+0x000 NtTib            : _NT_TIB</p>

<p>+0x01c EnvironmentPointer : (null)</p>

<p>+0x020 ClientId         : _CLIENT_ID</p>

<p>+0x028 ActiveRpcHandle  : (null)</p>

<p>+0x02c ThreadLocalStoragePointer : 0x7efdd02c</p>

<p>+0x030 ProcessEnvironmentBlock : 0x7efde000 _PEB</p>

<p>+0x034 LastErrorValue   : 0</p>

<p>+0x038 CountOfOwnedCriticalSections : 0</p>

<p>+0x03c CsrClientThread  : (null)</p>

<p>+0x040 Win32ThreadInfo  : (null)</p>

<p>+0x044 User32Reserved   : [26] 0</p>

<p>+0x0ac UserReserved     : [5] 0</p>

<p>+0x0c0 WOW32Reserved    : 0x751b2320</p>

<p>+0x0c4 CurrentLocale    : 0x409</p>

<p>+0x0c8 FpSoftwareStatusRegister : 0</p>

<p>+0x0cc SystemReserved1  : [54] (null)</p>

<p>+0x1a4 ExceptionCode    : 0</p>

<p>+0x1a8 ActivationContextStackPointer : 0x001a07d0 _ACTIVATION_CONTEXT_STACK</p>

<p>+0x1ac SpareBytes       : [36]  &#8220;&#8221;</p>

<p>+0x1d0 TxFsContext      : 0xfffe</p>

<p>+0x1d4 GdiTebBatch      : _GDI_TEB_BATCH</p>

<p>+0x6b4 RealClientId     : _CLIENT_ID</p>

<p>+0x6bc GdiCachedProcessHandle : (null)</p>

<p>+0x6c0 GdiClientPID     : 0</p>

<p>+0x6c4 GdiClientTID     : 0</p>

<p>+0x6c8 GdiThreadLocalInfo : (null)</p>

<p>+0x6cc Win32ClientInfo  : [62] 0</p>

<p>+0x7c4 glDispatchTable  : [233] (null)</p>

<p>+0xb68 glReserved1      : [29] 0</p>

<p>+0xbdc glReserved2      : (null)</p>

<p>+0xbe0 glSectionInfo    : (null)</p>

<p>+0xbe4 glSection        : (null)</p>

<p>+0xbe8 glTable          : (null)</p>

<p>+0xbec glCurrentRC      : (null)</p>

<p>+0xbf0 glContext        : (null)</p>

<p>+0xbf4 LastStatusValue  : 0xc0000139</p>

<p>+0xbf8 StaticUnicodeString : _UNICODE_STRING &#8220;&#8221;</p>

<p>+0xc00 StaticUnicodeBuffer : [261]  &#8220;&#8221;</p>

<p>+0xe0c DeallocationStack : 0x00320000</p>

<p>+0xe10 TlsSlots         : [64] (null)</p>

<p>+0xf10 TlsLinks         : _LIST_ENTRY [ 0x0 &#8211; 0x0 ]</p>

<p>+0xf18 Vdm              : (null)</p>

<p>+0xf1c ReservedForNtRpc : 0x001d8c70</p>

<p>+0xf20 DbgSsReserved    : [2] (null)</p>

<p>+0xf28 HardErrorMode    : 0</p>

<p>+0xf2c Instrumentation  : [9] (null)</p>

<p>+0xf50 ActivityId       : _GUID {00000000-0000-0000-0000-000000000000}</p>

<p>+0xf60 SubProcessTag    : (null)</p>

<p>+0xf64 EtwLocalData     : (null)</p>

<p>+0xf68 EtwTraceData     : (null)</p>

<p>+0xf6c WinSockData      : (null)</p>

<p>+0xf70 GdiBatchCount    : 0x7efdb000</p>

<p>+0xf74 CurrentIdealProcessor : _PROCESSOR_NUMBER</p>

<p>+0xf74 IdealProcessorValue : 0x1010000</p>

<p>+0xf74 ReservedPad0     : 0 &#8221;</p>

<p>+0xf75 ReservedPad1     : 0 &#8221;</p>

<p>+0xf76 ReservedPad2     : 0x1 &#8221;</p>

<p>+0xf77 IdealProcessor   : 0x1 &#8221;</p>

<p>+0xf78 GuaranteedStackBytes : 0x1000</p>

<p>+0xf7c ReservedForPerf  : (null)</p>

<p>+0xf80 ReservedForOle   : 0x001ffd50</p>
</blockquote>

<p>I have shown only the partial output because we are interested only in &#8220;<strong>ReservedForOle</strong>&#8221; member which is in the <strong>oxf80</strong> offset. Within this structure in &#8220;<strong>0xc</strong>&#8221; offset contains the information on whether it is STA / MTA / Unkown and here is a write up on this from John Robbins <a href="http://www.microsoft.com/msj/1099/bugslayer/bugslayer1099.aspx">http://www.microsoft.com/msj/1099/bugslayer/bugslayer1099.aspx</a>.  Though the posts mentions STA as <strong>0x80</strong> and MTA as <strong>0x140</strong> with current version of windows value of STA is <strong>81</strong> <span style="font-size:x-small;"><span style="font-size:x-small;"><strong><span style="font-size:x-small;"> </span></strong></span></span>and MTA is <strong>141</strong>.</p>

<p>With this information it was pretty easy to create a script which will give us a call-stack if a UI Thread is blocking.</p>

<p>[sourcecode]</p>

<p>bm KERNEL32!WaitFor* &ldquo;.if (poi(@$teb+0xf80) != 0) { .if (poi(poi(@$teb+0xf80)+0xc) = 81) {!clrstack;g} .else {g}} .else {gh}&rdquo;</p>

<p>bp KERNELBASE!SleepEx &ldquo;.if (poi(@$teb+0xf80) != 0) { .if (poi(poi(@$teb+0xf80)+0xc) = 81) {!clrstack;g} .else {g}} .else {gh}&rdquo;</p>

<p>[/sourcecode]</p>

<p>Here is a example call-stack from the above break-point which indicates that we are blocking on the UI Thread</p>

<blockquote>
<p>OS Thread Id: 0x76c (0)</p>

<p>Child SP IP       Call Site</p>

<p>0029e74c 775c118e [InlinedCallFrame: 0029e74c]</p>

<p>0029e748 5affbc00 DomainBoundILStubClass.IL_STUB_PInvoke(System.Net.Sockets.AddressFamily, System.Net.Sockets.SocketType, System.Net.Sockets.ProtocolType, IntPtr, UInt32, System.Net.SocketConstructorFlags)</p>

<p>0029e74c 5afa72e4 [InlinedCallFrame: 0029e74c] System.Net.UnsafeNclNativeMethods+OSSOCK.WSASocket(System.Net.Sockets.AddressFamily, System.Net.Sockets.SocketType, System.Net.Sockets.ProtocolType, IntPtr, UInt32, System.Net.SocketConstructorFlags)</p>

<p>0029e7a4 5afa72e4 System.Net.Sockets.Socket.InitializeSockets()</p>

<p>0029e7f4 5afcc3ca System.Net.NetworkAddressChangePolled..ctor()</p>

<p>0029e808 5afcc326 System.Net.AutoWebProxyScriptEngine+AutoDetector.Initialize()</p>

<p>0029e838 5af7534d System.Net.AutoWebProxyScriptEngine+AutoDetector.get_CurrentAutoDetector()</p>

<p>0029e83c 5af75263 System.Net.AutoWebProxyScriptEngine..ctor(System.Net.WebProxy, Boolean)</p>

<p>0029e858 5af75202 System.Net.WebProxy.UnsafeUpdateFromRegistry()</p>

<p>0029e868 5af751c8 System.Net.WebProxy..ctor(Boolean)</p>

<p>0029e86c 5af74c79 System.Net.Configuration.DefaultProxySectionInternal..ctor(System.Net.Configuration.DefaultProxySection)</p>

<p>0029e8b0 5af748d2 System.Net.Configuration.DefaultProxySectionInternal.GetSection()</p>

<p>0029e8e4 5afcbf76 System.Net.WebRequest.get_InternalDefaultWebProxy()</p>

<p>0029e914 5afcbc86 System.Net.HttpWebRequest..ctor(System.Uri, System.Net.ServicePoint)</p>

<p>0029e92c 5afcbbcb System.Net.HttpRequestCreator.Create(System.Uri)</p>

<p>0029e938 5afcb772 System.Net.WebRequest.Create(System.Uri, Boolean)</p>

<p>0029e95c 5af94cad System.Net.WebRequest.Create(System.String)</p>

<p>0029e96c 0087056e WindowsFormsApplication1.Form1.&lt;.ctor&gt;b__0(System.Object, System.EventArgs) [C:UsersnaveenDocumentsVisual Studio 2010ProjectsWindowsFormsApplication1WindowsFormsApplication1Form1.cs @ 15]</p>

<p>0029e9ac 592b4ae8 System.Windows.Forms.Control.OnClick(System.EventArgs)</p>

<p>0029e9c4 592b70a2 System.Windows.Forms.Button.OnClick(System.EventArgs)</p>

<p>0029e9dc 59846174 System.Windows.Forms.Button.OnMouseUp(System.Windows.Forms.MouseEventArgs)</p>

<p>0029e9f8 598195b5 System.Windows.Forms.Control.WmMouseUp(System.Windows.Forms.Message ByRef, System.Windows.Forms.MouseButtons, Int32)</p>

<p>0029ea8c 59bda1bf System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message ByRef)</p>

<p>0029ea90 59be18dd [InlinedCallFrame: 0029ea90]</p>

<p>0029eae4 59be18dd System.Windows.Forms.ButtonBase.WndProc(System.Windows.Forms.Message ByRef)</p>

<p>0029eb28 5931de00 System.Windows.Forms.Button.WndProc(System.Windows.Forms.Message ByRef)</p>

<p>0029eb34 593070f3 System.Windows.Forms.Control+ControlNativeWindow.OnMessage(System.Windows.Forms.Message ByRef)</p>

<p>0029eb3c 59307071 System.Windows.Forms.Control+ControlNativeWindow.WndProc(System.Windows.Forms.Message ByRef)</p>

<p>0029eb50 59306fb6 System.Windows.Forms.NativeWindow.Callback(IntPtr, Int32, IntPtr, IntPtr)</p>

<p>0029ecf4 01010a35 [InlinedCallFrame: 0029ecf4]</p>
</blockquote>
]]></content>
        </item>
        
        <item>
            <title>Correlating between .NET and native thread in Windbg</title>
            <link>/p1324/</link>
            <pubDate>Sun, 09 Jan 2011 01:46:06 +0000</pubDate>
            
            <guid>/p1324/</guid>
            <description>&lt;p&gt;I recently saw a stackoverflow question where  someone wanted to know how they could correlate between  managed and native threads within Windbg.&lt;/p&gt;

&lt;p&gt;Here is the managed thread object within the debugger&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;0:004&amp;gt; !do 02a1d6c4&lt;/p&gt;

&lt;p&gt;Name:        System.Threading.Thread&lt;/p&gt;

&lt;p&gt;MethodTable: 672e001c&lt;/p&gt;

&lt;p&gt;EEClass:     67018ed8&lt;/p&gt;

&lt;p&gt;Size:        48(0x30) bytes&lt;/p&gt;

&lt;p&gt;File:        C:WindowsMicrosoft.NetassemblyGAC_32mscorlibv4.0_4.0.0.0__b77a5c561934e089mscorlib.dll&lt;/p&gt;

&lt;p&gt;Fields:&lt;/p&gt;

&lt;p&gt;MT    Field   Offset                 Type VT     Attr    Value Name&lt;/p&gt;

&lt;p&gt;672c8a78  4000720        4 &amp;#8230;.Contexts.Context  0 instance 00000000 m_Context&lt;/p&gt;

&lt;p&gt;672db4b8  4000721        8 &amp;#8230;.ExecutionContext  0 instance 00000000 m_ExecutionContext&lt;/p&gt;

&lt;p&gt;672df9fc  4000722        c        System.String  0 instance 02a1a220 m_Name&lt;/p&gt;

&lt;p&gt;672dfed0  4000723       10      System.Delegate  0 instance 00000000 m_Delegate&lt;/p&gt;

&lt;p&gt;672e63f4  4000724       14 &amp;#8230;ation.CultureInfo  0 instance 00000000 m_CurrentCulture&lt;/p&gt;

&lt;p&gt;672e63f4  4000725       18 &amp;#8230;ation.CultureInfo  0 instance 00000000 m_CurrentUICulture&lt;/p&gt;

&lt;p&gt;672df638  4000726       1c        System.Object  0 instance 00000000 m_ThreadStartArg&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color:#ff0000;&#34;&gt;&lt;strong&gt;672daa7c  4000727       20        System.IntPtr  1 instance   542560 DONT_USE_InternalThread&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;672e29c8  4000728       24         System.Int32  1 instance        2 m_Priority&lt;/p&gt;

&lt;p&gt;672e29c8  4000729       28         System.Int32  1 instance        3 m_ManagedThreadId&lt;/p&gt;

&lt;p&gt;672cb76c  400072a      18c &amp;#8230;LocalDataStoreMgr  0   shared   static s_LocalDataStoreMgr&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Domain:Value  0049f148:NotInit  &amp;lt;&amp;lt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;672ce328  400072b        c &amp;#8230;alDataStoreHolder  0   shared TLstatic s_LocalDataStore&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Thread:Value &amp;lt;&amp;lt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;The present thread’s @$teb (Thread Environment Block) is &lt;span style=&#34;color:#ff0000;&#34;&gt;&lt;strong&gt;7efac000&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;0:004&amp;gt; ? @$teb Evaluate expression: 2130374656 = 7efac000&lt;/p&gt;

&lt;p&gt;The DONT_USE_InternalThread is pointer to the native thread. Dumping the raw memory of the pointer should give us more information we are looking for.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;0:004&amp;gt; dd poi(02a1d6c4+20)&lt;/p&gt;

&lt;p&gt;00542560  67e9ee88 0000b220 00000000 056ef42c&lt;/p&gt;

&lt;p&gt;00542570  00000000 00000000 00000000 00000003&lt;/p&gt;

&lt;p&gt;00542580  00000000 00542588 00542588 00542588&lt;/p&gt;

&lt;p&gt;00542590  00000000 00000000 baad0000 004a4f30&lt;/p&gt;

&lt;p&gt;005425a0  &lt;span style=&#34;color:#ff0000;&#34;&gt;&lt;strong&gt;7efac000&lt;/strong&gt;&lt;/span&gt; baadf00d 00000000 00000000&lt;/p&gt;

&lt;p&gt;005425b0  00024dac 00000000 00000000 00000000&lt;/p&gt;

&lt;p&gt;005425c0  00000000 baadf00d 00541ba0 00544290&lt;/p&gt;

&lt;p&gt;005425d0  00544298 00000200 00544290 00544580&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The pointer to teb is in the 40th offset of the  DONT_USE_InternalThread and here is the script that would get teb for each managed thread.&lt;/p&gt;

&lt;p&gt;[sourcecode]&lt;/p&gt;

&lt;p&gt;.foreach ($thread {!dumpheap -mt 672e001c -short}) { .if ( poi(${$thread}+20) != 0) {.printf &amp;ldquo;%p n&amp;rdquo;,dwo(poi(${$thread}+20)+40)}}&lt;/p&gt;

&lt;p&gt;[/sourcecode]&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;0:004&amp;gt; .foreach ($thread {!dumpheap -mt 672e001c -short}) { .if ( poi(${$thread}+20) != 0) {.printf &amp;#8220;%p n&amp;#8221;,dwo(poi(${$thread}+20)+40) }}&lt;/p&gt;

&lt;p&gt;7efdd000&lt;/p&gt;

&lt;p&gt;7efac000&lt;/p&gt;

&lt;p&gt;7ef9a000&lt;/p&gt;

&lt;p&gt;7ef97000&lt;/p&gt;

&lt;p&gt;7ef2f000&lt;/p&gt;

&lt;p&gt;7ef26000&lt;/p&gt;

&lt;p&gt;7efd7000&lt;/p&gt;

&lt;p&gt;7ef20000&lt;/p&gt;

&lt;p&gt;7ef1d000&lt;/p&gt;

&lt;p&gt;7ef1d000&lt;/p&gt;

&lt;p&gt;7ef0e000&lt;/p&gt;

&lt;p&gt;7efa3000&lt;/p&gt;

&lt;p&gt;7ef2c000&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So with the above we could dump the teb structure using dt ntdll!_TEB command. In the next post I will demonstrate how this can be used to debug some cool stuff 🙂&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>I recently saw a stackoverflow question where  someone wanted to know how they could correlate between  managed and native threads within Windbg.</p>

<p>Here is the managed thread object within the debugger</p>

<blockquote>
<p>0:004&gt; !do 02a1d6c4</p>

<p>Name:        System.Threading.Thread</p>

<p>MethodTable: 672e001c</p>

<p>EEClass:     67018ed8</p>

<p>Size:        48(0x30) bytes</p>

<p>File:        C:WindowsMicrosoft.NetassemblyGAC_32mscorlibv4.0_4.0.0.0__b77a5c561934e089mscorlib.dll</p>

<p>Fields:</p>

<p>MT    Field   Offset                 Type VT     Attr    Value Name</p>

<p>672c8a78  4000720        4 &#8230;.Contexts.Context  0 instance 00000000 m_Context</p>

<p>672db4b8  4000721        8 &#8230;.ExecutionContext  0 instance 00000000 m_ExecutionContext</p>

<p>672df9fc  4000722        c        System.String  0 instance 02a1a220 m_Name</p>

<p>672dfed0  4000723       10      System.Delegate  0 instance 00000000 m_Delegate</p>

<p>672e63f4  4000724       14 &#8230;ation.CultureInfo  0 instance 00000000 m_CurrentCulture</p>

<p>672e63f4  4000725       18 &#8230;ation.CultureInfo  0 instance 00000000 m_CurrentUICulture</p>

<p>672df638  4000726       1c        System.Object  0 instance 00000000 m_ThreadStartArg</p>

<p><span style="color:#ff0000;"><strong>672daa7c  4000727       20        System.IntPtr  1 instance   542560 DONT_USE_InternalThread</strong></span></p>

<p>672e29c8  4000728       24         System.Int32  1 instance        2 m_Priority</p>

<p>672e29c8  4000729       28         System.Int32  1 instance        3 m_ManagedThreadId</p>

<p>672cb76c  400072a      18c &#8230;LocalDataStoreMgr  0   shared   static s_LocalDataStoreMgr</p>

<blockquote>
<blockquote>
<p>Domain:Value  0049f148:NotInit  &lt;&lt;</p>
</blockquote>
</blockquote>

<p>672ce328  400072b        c &#8230;alDataStoreHolder  0   shared TLstatic s_LocalDataStore</p>

<blockquote>
<blockquote>
<p>Thread:Value &lt;&lt;</p>
</blockquote>
</blockquote>
</blockquote>

<p>The present thread’s @$teb (Thread Environment Block) is <span style="color:#ff0000;"><strong>7efac000</strong></span></p>

<p>0:004&gt; ? @$teb Evaluate expression: 2130374656 = 7efac000</p>

<p>The DONT_USE_InternalThread is pointer to the native thread. Dumping the raw memory of the pointer should give us more information we are looking for.</p>

<blockquote>
<p>0:004&gt; dd poi(02a1d6c4+20)</p>

<p>00542560  67e9ee88 0000b220 00000000 056ef42c</p>

<p>00542570  00000000 00000000 00000000 00000003</p>

<p>00542580  00000000 00542588 00542588 00542588</p>

<p>00542590  00000000 00000000 baad0000 004a4f30</p>

<p>005425a0  <span style="color:#ff0000;"><strong>7efac000</strong></span> baadf00d 00000000 00000000</p>

<p>005425b0  00024dac 00000000 00000000 00000000</p>

<p>005425c0  00000000 baadf00d 00541ba0 00544290</p>

<p>005425d0  00544298 00000200 00544290 00544580</p>
</blockquote>

<p>The pointer to teb is in the 40th offset of the  DONT_USE_InternalThread and here is the script that would get teb for each managed thread.</p>

<p>[sourcecode]</p>

<p>.foreach ($thread {!dumpheap -mt 672e001c -short}) { .if ( poi(${$thread}+20) != 0) {.printf &ldquo;%p n&rdquo;,dwo(poi(${$thread}+20)+40)}}</p>

<p>[/sourcecode]</p>

<blockquote>
<p>0:004&gt; .foreach ($thread {!dumpheap -mt 672e001c -short}) { .if ( poi(${$thread}+20) != 0) {.printf &#8220;%p n&#8221;,dwo(poi(${$thread}+20)+40) }}</p>

<p>7efdd000</p>

<p>7efac000</p>

<p>7ef9a000</p>

<p>7ef97000</p>

<p>7ef2f000</p>

<p>7ef26000</p>

<p>7efd7000</p>

<p>7ef20000</p>

<p>7ef1d000</p>

<p>7ef1d000</p>

<p>7ef0e000</p>

<p>7efa3000</p>

<p>7ef2c000</p>
</blockquote>

<p>So with the above we could dump the teb structure using dt ntdll!_TEB command. In the next post I will demonstrate how this can be used to debug some cool stuff 🙂</p>]]></content>
        </item>
        
        <item>
            <title>Conditional BreakPoint based on callstack within Windbg – .NET</title>
            <link>/p1314/</link>
            <pubDate>Wed, 29 Dec 2010 02:00:12 +0000</pubDate>
            
            <guid>/p1314/</guid>
            <description>Someone recently asked me &amp;#8220;How to have a break-point on a method based on certain function in the call-stack?&amp;#8221;
Here is the sample code to demonstrate this
[sourcecode language=&amp;#8221;csharp&amp;#8221;]
using System;
using System.Threading.Tasks;
using System.Data.SqlClient;
namespace Test
{
class Program
{
string connectionString = @&amp;ldquo;Data Source=.sqlexpress;Initial Catalog=Tfs_Configuration;Integrated Security=True&amp;rdquo;;
public void Bar()
{
using (var c = new SqlConnection(connectionString))
{
c.Open();
var command = new SqlCommand(@&amp;ldquo;update [tbl_AccessMapping] set [DisplayName] = @param&amp;rdquo;, c);</description>
            <content type="html"><![CDATA[<p>Someone recently asked me &#8220;How to have a break-point on a method based on certain function in the call-stack?&#8221;</p>

<p>Here is the sample code to demonstrate this</p>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>using System;</p>

<p>using System.Threading.Tasks;</p>

<p>using System.Data.SqlClient;</p>

<p>namespace Test</p>

<p>{</p>

<p>class Program</p>

<p>{</p>

<p>string connectionString = @&ldquo;Data Source=.sqlexpress;Initial Catalog=Tfs_Configuration;Integrated Security=True&rdquo;;</p>

<p>public void Bar()</p>

<p>{</p>

<p>using (var c = new SqlConnection(connectionString))</p>

<p>{</p>

<p>c.Open();</p>

<p>var command = new SqlCommand(@&ldquo;update [tbl_AccessMapping] set [DisplayName] = @param&rdquo;, c);</p>

<p>command.Parameters.Add(new SqlParameter(&ldquo;param&rdquo;, &ldquo;Bar&rdquo;));</p>

<p>command.ExecuteNonQuery();</p>

<p>}</p>

<p>}</p>

<p>public void Foo()</p>

<p>{</p>

<p>using (var c = new SqlConnection(connectionString))</p>

<p>{</p>

<p>c.Open();</p>

<p>var command = new SqlCommand(@&ldquo;update [tbl_AccessMapping] set [DisplayName] = @param&rdquo;, c);</p>

<p>command.Parameters.Add(new SqlParameter(&ldquo;param&rdquo;, &ldquo;Foo&rdquo;));</p>

<p>command.ExecuteNonQuery();</p>

<p>}</p>

<p>}</p>

<p>static void Main(string[] args1)</p>

<p>{</p>

<p>var s = new Program();</p>

<p>Parallel.For(0, 2, (i) =&gt; s.Bar());</p>

<p>Parallel.For(0, 2, (i) =&gt; s.Foo());</p>

<p>Console.Read();</p>

<p>}</p>

<p>}</p>

<p>}</p>

<p>[/sourcecode]</p>

<p>The requirement is to have a break-point on &#8220;ExecuteNonQuery&#8221; but it should break only if it is invoked from &#8220;Foo&#8221; and not from &#8220;Bar&#8221;.</p>

<p>Launched the exe within windbg and loaded sos,sosex and set a bp on System.Data.SqlClient.SqlCommand.ExecuteNonQuery suing !mbm</p>

<p>And when the break-point hits the first time updated the bp using</p>

<blockquote>
<p>bs 0  $$&gt;a&lt;&#8220;d:Debuggersx86ConditionalBP.txt&#8221; Foo</p>
</blockquote>

<p>Here are the contents of ConditionalBP.txt</p>

<p>[sourcecode]</p>

<p>ad /q Contains</p>

<p>aS /c Contains .shell -ci &ldquo;!CLRStack&rdquo; FINDSTR $arg1</p>

<p>.block {</p>

<p>.if ($spat(&ldquo;${Contains}&rdquo;,&rdquo;*${$arg1}*&rdquo;))</p>

<p>{</p>

<p>!CLRStack</p>

<p>}</p>

<p>.else</p>

<p>{</p>

<p>g</p>

<p>}</p>

<p>}</p>

<p>ad /q Contains</p>

<p>[/sourcecode]</p>
]]></content>
        </item>
        
        <item>
            <title>Saving Dynamic Assembly in .NET 4.0 using Windbg</title>
            <link>/p1298/</link>
            <pubDate>Thu, 23 Dec 2010 23:37:45 +0000</pubDate>
            
            <guid>/p1298/</guid>
            <description>I recently had to debug a .NET 4.0 process which was loading the dependent assemblies using the AppDomain.AssemblyResolve event. The dependent assemblies were stored within the executable. I couldn’t disassemble the code to look for the dependent assembly because the exe was obfuscated. FYI the dynamic assembly cannot be saved using !SaveModule and here is the reason for I recently had to debug a .NET 4.0 process which was loading the dependent assemblies using the AppDomain.</description>
            <content type="html"><![CDATA[<p>I recently had to debug a .NET 4.0 process which was loading the dependent assemblies using the <a href="http://msdn.microsoft.com/en-us/library/system.appdomain.assemblyresolve.aspx" target="_blank">AppDomain.AssemblyResolve</a> event. The dependent assemblies were stored within the executable. I couldn’t disassemble the code to look for the dependent assembly because the exe was obfuscated. FYI the dynamic assembly cannot be saved using !SaveModule and here is the reason for <a href="http://stackoverflow.com/questions/1872502/how-to-save-a-dynamically-generated-assembly-that-is-stored-in-memory/1872588#1872588">I recently had to debug a .NET 4.0 process which was loading the dependent assemblies using the <a href="http://msdn.microsoft.com/en-us/library/system.appdomain.assemblyresolve.aspx" target="_blank">AppDomain.AssemblyResolve</a> event. The dependent assemblies were stored within the executable. I couldn’t disassemble the code to look for the dependent assembly because the exe was obfuscated. FYI the dynamic assembly cannot be saved using !SaveModule and here is the reason for</a> read the comments especially from Evian. Unlike psscor2.dll the sos for .NET 4.0 does not have a !dumpdynamicassembly with a save option.</p>

<p>Here is the sample code to demonstrate this.</p>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>using System;</p>

<p>using System.Reflection;</p>

<p>using TestLib;</p>

<p>namespace Test</p>

<p>{</p>

<p>class Foo1</p>

<p>{</p>

<p>int[] s = new int[2];</p>

<p>int v = 100;</p>

<p>public Foo1()</p>

<p>{</p>

<p>Console.WriteLine(new Class1().Foo());</p>

<p>}</p>

<p>static void Main(string[] args1)</p>

<p>{</p>

<p>AppDomain.CurrentDomain.AssemblyResolve += (sender, args) =&gt;</p>

<p>{</p>

<p>String resourceName = &ldquo;ConsoleApplication13.&rdquo; +new AssemblyName(args.Name).Name + &ldquo;.dll&rdquo;;</p>

<p>using (var stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(resourceName))</p>

<p>{</p>

<p>Byte[] assemblyData = new Byte[stream.Length];</p>

<p>stream.Read(assemblyData, 0, assemblyData.Length);</p>

<p>return Assembly.Load(assemblyData);</p>

<p>}</p>

<p>};</p>

<p>System.IO.File.Delete(@&ldquo;C:UsersnaveenDocumentsVisual Studio 2010ProjectsConsoleApplication13binDebugTestLib.dll&rdquo;);</p>

<p>var s = new Foo1();</p>

<p>Console.Read();</p>

<p>}</p>

<p>}</p>

<p>}</p>

<p>[/sourcecode]</p>

<p>I knew the Assembly had to be loaded using  System.Reflection.Assembly.Load(Byte[]) ,so ended setting a break-point on the method using command !mbm *Assembly.Load* on the launch of the executable.</p>

<p>Here are the output of args and local variables for the above break-point</p>

<blockquote>
<p>0:000&gt; !mdv</p>

<p>Frame 0x0: (System.Reflection.Assembly.Load(Byte[])):</p>

<p>[A0]:rawAssembly:0x025fc374 (System.Byte[])</p>

<p>[L0]:&lt;?&gt;</p>
</blockquote>

<p>Notice the &#8220;rawAssembly&#8221; argument which has the assembly contents.  Here are the raw memory contents of the address using dd 0x025fc374</p>

<blockquote>
<p>0:000&gt; dd 0x025fc374</p>

<p>025fc374  <span style="color:#ff0000;">6a764994 00001000</span> 00905a4d 00000003</p>

<p>025fc384  00000004 0000ffff 000000b8 00000000</p>

<p>025fc394  00000040 00000000 00000000 00000000</p>

<p>025fc3a4  00000000 00000000 00000000 00000000</p>

<p>025fc3b4  00000000 00000080 0eba1f0e cd09b400</p>

<p>025fc3c4  4c01b821 685421cd 70207369 72676f72</p>

<p>025fc3d4  63206d61 6f6e6e61 65622074 6e757220</p>

<p>025fc3e4  206e6920 20534f44 65646f6d 0a0d0d2e</p>
</blockquote>

<ol>
<li><span style="color:#ff0000;">6a764994 <span style="color:#000000;">:- Is the Array&#8217;s  Method Table</span></span></li>
<li><span style="color:#ff0000;"><span style="color:#000000;"><span style="color:#ff0000;">00001000</span> : &#8211; Is the Array size</span></span></li>
<li><span style="color:#ff0000;"><span style="color:#000000;">The rest are the array contents.<br /> </span></span></li>
</ol>

<p>Unlike the reference type arrays, the value type arrays  don&#8217;t have a DWORD for Method table of its contents. With this information I could dump the contents from memory in to disk using .writemem command.</p>

<p>[sourcecode]</p>

<p>.writemem c:tempassembly.bin @ecx+8 L?(poi(@ecx+@$ptrsize)*@$ptrsize)</p>

<p>[/sourcecode]</p>

<p>In x86 @ecx register contains argument for rawAssembly. The  @ecx+8 is the start  position of the first byte and that is the reason for using this as the start position for .writemem. The poi(@ecx+@$ptrsize) contains the array size which in our case is 0001000 and multiply it by @$ptrsize which is 4 in x86. The expression (poi(@ecx+@$ptrsize)*@$ptrsize) would in our case result to 4000 bytes.</p>

<p>The assembly.bin would contain data in hex format which has to be converted in to binary format. Here is the code to convert from Hex to Binary format.</p>

<p>[sourcecode]</p>

<p>Assembly.Load( File.ReadAllBytes(@&ldquo;c:tempassembly.bin&rdquo;)</p>

<p>.Select(x =&gt;</p>

<p>Convert.ToByte(</p>

<p>int.Parse((x.ToString(&ldquo;X&rdquo;)),NumberStyles.HexNumber)</p>

<p>)).ToArray())</p>

<p>.FullName.Dump();</p>

<p>[/sourcecode]</p>
]]></content>
        </item>
        
        <item>
            <title>Dumping Generic List  in .NET within Windbg</title>
            <link>/p1281/</link>
            <pubDate>Fri, 10 Dec 2010 03:15:43 +0000</pubDate>
            
            <guid>/p1281/</guid>
            <description>Most of the code uses List for storing items. The present solutions don&amp;#8217; t have a way to dump List within windbg. Even though sosex has an option to dump the List using !mdt it still doesn&amp;#8217;t meet the scripting requirements. For example here is an output using sosex &amp;#8220;!mdt -e 029a91c0&amp;#8221;
 0:000&amp;gt; !mdt -e 029a91c0
029a91c0 (System.Collections.Generic.List`1[[Test.Foo, Test]])
Count = 2
[0] 029a9200 (Test.Foo)
[1] 029a9210 (Test.Foo)
 I would have preferred to get the contents of the &amp;#8220;Foo&amp;#8221; object instead of just the address of Foo.</description>
            <content type="html"><![CDATA[<p>Most of the code uses List<T> for storing items.  The present solutions don&#8217; t have a way to dump List<T> within windbg. Even though sosex has an option to dump the List<T> using !mdt it still doesn&#8217;t meet the scripting requirements. For example here is an output using sosex &#8220;!mdt -e 029a91c0&#8221;</p>

<blockquote>
<p>0:000&gt; !mdt -e 029a91c0</p>

<p>029a91c0 (System.Collections.Generic.List`1[[Test.Foo, Test]])</p>

<p>Count = 2</p>

<p>[0] 029a9200 (Test.Foo)</p>

<p>[1] 029a9210 (Test.Foo)</p>
</blockquote>

<p>I would have preferred to get the contents of the &#8220;Foo&#8221; object instead of just the address of Foo. So wrote a script to do that.</p>

<p>[sourcecode]</p>

<p>$$ pointer to the array within the List</p>

<p>r @$t5 = poi(${$arg1}+@$ptrsize)</p>

<p>.if (@$ptrsize = 8 )</p>

<p>{</p>

<p>r @t7 = 20</p>

<p>}</p>

<p>.else</p>

<p>{</p>

<p>r @$t7 = 10</p>

<p>}</p>

<p>.for (r $t0=0; @$t0 &lt; poi(@$t5+@$ptrsize); r$t0=@$t0+1 )</p>

<p>{</p>

<p>.if(@$t0 = 0)</p>

<p>{</p>

<p>$$ First occurence of the element in the array would be in the 20 offset for x64 and 10 offset for x86</p>

<p>r$t1=@$t7</p>

<p>}</p>

<p>.else</p>

<p>{</p>

<p>$$ the rest of the elements would be in the 8th offset for x64 and 4th offset for x86</p>

<p>r$t1= @$t7+(@$t0*@$ptrsize)</p>

<p>}</p>

<p>$$ Check for null before trying to dump</p>

<p>.if (poi((@$t5-@$ptrsize)+@$t1) = 0 )</p>

<p>{</p>

<p>.continue</p>

<p>}</p>

<p>.else</p>

<p>{</p>

<p>.printf &quot;%N n&quot; ,poi((@$t5-@$ptrsize)+@$t1)</p>

<p>}</p>

<p>}</p>

<p>[/sourcecode]</p>

<p>This script should work in x86 and x64. To use the above script copy to a file and invoke it like this passing the address of List<T></p>

<blockquote>
<p>$$&gt;a&lt;&ldquo;d:Debuggersx86dumplist.txt&rdquo; 029a91c0</p>
</blockquote>

<p>Here is the output from the above command.</p>

<blockquote>
<p>0:000&gt; $$&gt;a&lt;&ldquo;d:Debuggersx86dumplist.txt&rdquo; 029a91c0</p>

<p>029A9200</p>

<p>029A9210</p>
</blockquote>

<p>Now with this script I can use !mdt to get the contents of the &#8220;Foo&#8221; object.</p>

<p>[sourcecode]</p>

<p>.foreach ($obj {$$&gt;a&lt;&ldquo;d:Debuggersx86dumplist.txt&rdquo; 029a91c0}) {!mdt $obj}</p>

<p>[/sourcecode]</p>

<blockquote>
<p>0:000&gt; .foreach ($obj {$$&gt;a&lt;&ldquo;d:Debuggersx86dumplist.txt&rdquo; 029a91c0}) {!mdt $obj}</p>

<p>029a9200 (Test.Foo)</p>

<p>counter:0x1 (System.Int32)</p>

<p>Name:029a917c (System.String: &ldquo;test&rdquo;)</p>

<p>029a9210 (Test.Foo)</p>

<p>counter:0x2 (System.Int32)</p>

<p>Name:029a9198 (System.String: &ldquo;test2&rdquo;)</p>
</blockquote>

<p>This is one of the scripts that I would use often. Hope it is useful to others also.</p>
]]></content>
        </item>
        
        <item>
            <title>Why isn’t the !bpmd in sos / windbg not working?</title>
            <link>/p1271/</link>
            <pubDate>Mon, 06 Dec 2010 00:16:53 +0000</pubDate>
            
            <guid>/p1271/</guid>
            <description>I recently noticed another blog post refer to one of my post. The issue was, sos wasn&amp;#8217;t enabling the break-points on non-jitted functions. The classic example being &amp;#8220;Main&amp;#8221;. Thanks to Steve  I have been using sosex and not sos for setting break-points.
From my previous post  you can understand how CLR is using clrn/CLRNotificationException to notify sos/sosex on JIT. With this information when I looked at the rotor code, I noticed an interesting member variable &amp;#8220;g_dacNotificationFlags&amp;#8221;.</description>
            <content type="html"><![CDATA[<p>I recently noticed another blog <a title="http://bugslasher.net/2010/11/01/how-to-break-on-the-main-function-with-the-net-clr-4-0-and-windbg/" href="http://bugslasher.net/2010/11/01/how-to-break-on-the-main-function-with-the-net-clr-4-0-and-windbg/" target="_blank">post </a>refer to one of my <a title="Exploring undocumented SOS function in Windbg - .NET 4.0" href="http://naveensrinivasan.com/2010/02/25/exploring-undocumented-sos-function-in-windbg-net-4-0-2/" target="_blank">post</a>. The issue was, sos wasn&#8217;t enabling the break-points on non-jitted functions. The classic example being &#8220;Main&#8221;.  Thanks to <a title="http://www.stevestechspot.com/" href="http://www.stevestechspot.com/" target="_blank">Steve </a> I have been using sosex and not sos for setting break-points.</p>

<p>From my previous <a title="Exploring undocumented SOS function in Windbg - .NET 4.0" href="http://naveensrinivasan.com/2010/02/25/exploring-undocumented-sos-function-in-windbg-net-4-0-2/" target="_blank">post </a> you can understand how CLR is using clrn/CLRNotificationException to notify sos/sosex on JIT. With this information when I looked at the rotor <a title="dacnotify" href="http://www.koders.com/cpp/fidE4A1216FEC6BAA94CFA451D983819AE0CC78C073.aspx" target="_blank">code</a>, I noticed an interesting member variable &#8220;g_dacNotificationFlags&#8221;. So I decided to check the value of this variable when using !bpmd from sos and !mbm from sosex.</p>

<p>[sourcecode]</p>

<p>.if (dwo(mscorwks!g_dacNotificationFlags) = 0) {.echo bp not set } .else {.echo bp set}</p>

<p>[/sourcecode]</p>

<p>It was &#8220;0&#8221; when using sos and &#8220;1&#8221; when using sosex. Now I had to change the value to &#8220;1&#8221; and check if the break-point becomes active when using sos&#8217;s !bpmd.  FYI I don&#8217;t have private symbols and haven&#8217;t seen CLR Code. Here is the code to set the value to &#8220;1&#8221;.</p>

<p>[sourcecode]</p>

<p>ed mscorwks!g_dacNotificationFlags 00000001</p>

<p>[/sourcecode]</p>

<p>And not to my surprise the !bpmd seems to work for non-jitted function with the above hack. FYI we don&#8217;t have to resort to this to get !bpmd to work. If the !bpmd is set after load of mscorjit/clrjit it would work as expected.</p>
]]></content>
        </item>
        
        <item>
            <title>Using sosex within windbg to understand IL and Assembly code</title>
            <link>/p1261/</link>
            <pubDate>Tue, 30 Nov 2010 01:33:25 +0000</pubDate>
            
            <guid>/p1261/</guid>
            <description>Sometimes when debugging managed code within the debugger I would like to see the C# code ,the IL translation for the managed code and the Assembly code for the IL. For example I recently learned that callvirt MSIL instruction must do the null-check before invoking method.
 C:UsersnaveenDocumentsVisual Studio 2010ProjectsConsoleApplication13Program.cs @ 18:
00bc26d8 8b4dec mov ecx,dword ptr [ebp-14h]
00bc26db 3909 cmp dword ptr [ecx],ecx //NULL Check
00bc26dd ff1508a82900 call dword ptr ds:[29A808h] (System.</description>
            <content type="html"><![CDATA[<p>Sometimes when debugging managed code within the debugger I would like to see the C# code ,the IL translation for the managed code and the Assembly code for the IL. For example I recently learned that callvirt MSIL instruction must do the null-check before invoking method.</p>

<blockquote>
<p>C:UsersnaveenDocumentsVisual Studio 2010ProjectsConsoleApplication13Program.cs @ 18:</p>

<p>00bc26d8 8b4dec          mov     ecx,dword ptr [ebp-14h]</p>

<p>00bc26db 3909            cmp     dword ptr [ecx],ecx //NULL Check</p>

<p>00bc26dd ff1508a82900    call    dword ptr ds:[29A808h] (System.String.ToLower(), mdToken: 0600031d)</p>

<p>00bc26e3 8945e8          mov     dword ptr [ebp-18h],eax</p>

<p>00bc26e6 8b45e8          mov     eax,dword ptr [ebp-18h]</p>

<p>00bc26e9 8945ec          mov     dword ptr [ebp-14h],eax</p>
</blockquote>

<p>I am not an assembly code expert. The above output is from &#8220;!u&#8221; sos command. It doesn&#8217;t show the c# code except the line number and it is missing IL translation.</p>

<p>The &#8220;!mu&#8221; from sosex does what I want. It is not yet documented because it is not yet stable as per the output of the command. Here is the output for the same call-stack using sosex&#8217;s !mu.</p>

<blockquote>
<p>0:000&gt; !mu</p>

<p>THIS COMMAND IS UNDOCUMENTED AND NOT YET STABLE.</p>

<p>test = test.ToLower();</p>

<p>IL_001a: ldloc.0  (test)</p>

<p>IL_001b: callvirt System.String::ToLower</p>

<p>00bc26d8 8b4dec          mov     ecx,dword ptr [ebp-14h]</p>

<p>00bc26db 3909            cmp     dword ptr [ecx],ecx</p>

<p>00bc26dd ff1508a82900    call    dword ptr ds:[29A808h]</p>

<p>00bc26e3 8945e8          mov     dword ptr [ebp-18h],eax</p>

<p>IL_0020: stloc.0  (test)</p>

<p>00bc26e6 8b45e8          mov     eax,dword ptr [ebp-18h]</p>

<p>00bc26e9 8945ec          mov     dword ptr [ebp-14h],eax</p>
</blockquote>

<p>The above output has c#,IL and assembly.</p>
]]></content>
        </item>
        
        <item>
            <title>Windbg trick – Having custom name for user-defined pseudo-registers</title>
            <link>/p1246/</link>
            <pubDate>Tue, 23 Nov 2010 01:07:53 +0000</pubDate>
            
            <guid>/p1246/</guid>
            <description>There are 20 user-defined pseudo-registers ($t0, $t1, &amp;#8230;, $t19) in windbg/cdb . To have scripts with variable names as @$t0 and @$t1 isn&amp;#8217;t helpful for readability. The trick to avoid this is by using the &amp;#8220;aS&amp;#8221; command.
Here is an example, for a loop variable I would like to use a variable name like &amp;#8220;i&amp;#8221; instead of &amp;#8220;@$t0&amp;#8221; and to use &amp;#8220;i&amp;#8221; as a variable here is the command
 aS i &amp;#8220;@$t0&amp;#8221;</description>
            <content type="html"><![CDATA[<p>There are 20 <a href="http://msdn.microsoft.com/en-us/library/ff553485(VS.85).aspx">user-defined pseudo-registers</a> (<strong>$t0</strong>, <strong>$t1</strong>, &#8230;, <strong>$t19</strong>) in windbg/cdb . To have scripts with variable names as @$t0 and @$t1 isn&#8217;t helpful for readability. The trick to avoid this is by using the &#8220;aS&#8221; command.</p>

<p>Here is an example, for a loop variable I would like to use a variable name like &#8220;i&#8221; instead of &#8220;@$t0&#8221; and to use &#8220;i&#8221;  as a variable  here is the command</p>

<blockquote>
<p>aS i &#8220;@$t0&#8221;</p>
</blockquote>

<p>Now&#8221;i&#8221; is just an alias for &#8220;@$t0&#8221;.  Here is another example of using &#8220;i&#8221; in the comparison statement</p>

<blockquote>
<p>j (${i} =0) &#8216;.echo is zero&#8217; ; &#8216;.echo is not zero&#8217;</p>
</blockquote>

<p>This is the command to remove the alias without evaluating it.</p>

<blockquote>
<p>ad ${/v:i}</p>
</blockquote>
]]></content>
        </item>
        
        <item>
            <title>Decoding clr20r3 .NET exception – using mono cecil</title>
            <link>/p1208/</link>
            <pubDate>Wed, 17 Nov 2010 02:01:13 +0000</pubDate>
            
            <guid>/p1208/</guid>
            <description>I have often seen Devs trying to figure out the cause of the app crash without a memory dump. The only information that is available to analyze is the Windows Error Reporting message in the event viewer which would have &amp;#8220;Event Name: CLR20r3&amp;#8221; along with Watson bucket information like this.
 Fault bucket , type 0
Event Name: CLR20r3
Response: Not available
Cab Id: 0
Problem signature:
P1: unhandledexception.exe
P2: 1.</description>
            <content type="html"><![CDATA[<p>I have often seen Devs trying to figure out the cause of the app crash without a memory dump. The only information that is available to analyze is the Windows Error Reporting message in the event viewer which would have &#8220;Event Name: CLR20r3&#8221; along with <a href="http://naveensrinivasan.com/2010/04/24/exploring-unhandledexception-in-net-and-watson-buckets/">Watson bucket</a> information like this.</p>

<blockquote>
<p>Fault bucket , type 0</p>

<p>Event Name: CLR20r3</p>

<p>Response: Not available</p>

<p>Cab Id: 0</p>

<p>Problem signature:</p>

<p>P1: unhandledexception.exe</p>

<p>P2: 1.0.0.0</p>

<p>P3: 4ce1e0f1</p>

<p>P4: LibraryCode</p>

<p>P5: 1.0.0.0</p>

<p>P6: 4ce1e0f1</p>

<p>P7: 7</p>

<p>P8: 1f</p>

<p>P9: System.NullReferenceException</p>

<p>P10:</p>
</blockquote>

<p>I will demonstrate the steps in identifying the code that caused the app to crash with the above information.Here is the explanation on the Watson Bucket items</p>

<blockquote>
<ol>
<li>P1: unhandledexception.exe &#8211; is the Exe File Name</li>
<li>P2:1.0.0.0 &#8211; is the Exe File assembly version number</li>
<li>P3:4ce1e0f1- is the Exe File Stamp</li>
<li>P4:LibraryCode- is the Faulting full assembly name</li>
<li>P5:1.0.0.0- is the Faulting assembly version</li>
<li>P6:4ce1e0f1- is the Faulting assembly timestamp</li>
<li>P7:7- is the Faulting assembly method def</li>
<li>P8:1f-  is Faulting method IL Offset within the faulting method</li>
<li>P9:System.NullReferenceException- is Exception type that was thrown</li>
</ol>

<p>&nbsp;</p>
</blockquote>

<p>Here is the LibraryCode that is mentioned in P4 of the watson bucket</p>

<p>[sourcecode language=&#8221;csharp&#8221; highlight=&#8221;42,43&#8243;]</p>

<p>using System;</p>

<p>namespace LibraryCode</p>

<p>{</p>

<p>public class Foo</p>

<p>{</p>

<p>public Foo()</p>

<p>{</p>

<p>Console.WriteLine(&ldquo;Constructor&rdquo;);</p>

<p>}</p>

<p>public void Test()</p>

<p>{</p>

<p>Console.WriteLine(&ldquo;Test&rdquo;);</p>

<p>}</p>

<p>public string Bar(string test)</p>

<p>{</p>

<p>var x = test;</p>

<p>return x.ToUpper();</p>

<p>}</p>

<p>public string Bar1(string test)</p>

<p>{</p>

<p>var x = test;</p>

<p>return x.ToUpper();</p>

<p>}</p>

<p>public string Bar2(string test)</p>

<p>{</p>

<p>var x = test;</p>

<p>return x.ToUpper();</p>

<p>}</p>

<p>public string Bar3(string test)</p>

<p>{</p>

<p>var x = test;</p>

<p>return x.ToUpper();</p>

<p>}</p>

<p>public string Bar4(string test)</p>

<p>{</p>

<p>int j = 10;</p>

<p>for (int i = 0; i &lt; 10; i++)</p>

<p>{</p>

<p>j += i;</p>

<p>}</p>

<p>var x = test;</p>

<p>return x.ToUpper();</p>

<p>}</p>

<p>}</p>

<p>}</p>

<p>[/sourcecode]</p>

<p>And here is the code for the Main method calling the LibraryCode</p>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>static void Main(string[] args)</p>

<p>{</p>

<p>var f = new Foo();</p>

<p>var x = Console.ReadKey();</p>

<p>f.Bar4(null);</p>

<p>}</p>

<p>[/sourcecode]</p>

<p>The most important items in the above watson bucket are 4,7 ,8 and 9. The item 4 is the assembly that was responsible for the crash which is &#8220;LibraryCode&#8221;. The item 7 is methoddef that threw the exception which is &#8220;7&#8221;. To identify the method we would have to dump the IL and here is the command to do that.</p>

<p>[sourcecode]</p>

<p>ildasm /tokens &ldquo;C:tempLibraryCode.dll&rdquo; /out=libcode.il</p>

<p>[/sourcecode]</p>

<p>Open the libcode.il in a text editor and look for 06000007. The methoddef starts with 06 and 7 is the hex value and when converted to decimal it is still 7 and that&#8217;s how we ended with 06000007. The IL content for the corresponding method def</p>

<blockquote>
<p>.method /*06000007*/ public hidebysig instance string</p>

<p>Bar4(string test) cil managed</p>

<p>{</p>

<p>// Code size       42 (0x2a)</p>
</blockquote>

<p>With this we know the method that caused the app to crash.</p>

<p>The next step is to identify the faulting IL code within the method. The IL offset that caused the exception to be thrown is 1f (decimal value is 31), and here is the IL Code</p>

<blockquote>
<p>IL_001d:  ldarg.1</p>

<p>IL_001e:  stloc.2</p>

<p>IL_001f:  ldloc.2</p>

<p>IL_0020:  callvirt   instance string [mscorlib/*23000001*/]System.String/*01000013*/::ToUpper() /* 0A000012 */</p>

<p>IL_0025:  stloc.3</p>

<p>IL_0026:  br.s       IL_0028</p>
</blockquote>

<p>Now mapping the IL code back to C# shouldn&#8217;t be hard.</p>

<p>And If you are like me then you would probably want to automate things , so here is doing the same using <a href="http://www.mono-project.com/Cecil">Mono Cecil</a></p>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>AssemblyFactory.GetAssembly(@&ldquo;C:TempLibraryCode.dll&rdquo;)</p>

<p>.MainModule.Types.Cast<TypeDefinition>()</p>

<p>.ElementAt(1)</p>

<p>.Methods.Cast<MethodDefinition>().First(md =&gt; md.MetadataToken.RID == 7)</p>

<p>.Body.Instructions.Cast<Instruction>()</p>

<p>.Select (i =&gt;</p>

<p>new {Offset = i.Offset,</p>

<p>OpCode = i.OpCode.ToString() ,</p>

<p>Operand = i.Operand != null ? i.Operand.ToString() : string.Empty} )</p>

<p>.Dump();</p>

<p>[/sourcecode]</p>

<p>Notice the above code looks for methoddef &#8220;7&#8221; which is the P7 item in the Watson bucket.The code could have just dumped 31st IL offset which is &#8220;ldloc.2&#8221; but that would not help , I like to see the entire method to figure out the cause of the exception.</p>

<p>And here is the output from above code.</p>

<p><a href="http://104.197.135.42/wp-content/uploads/2010/11/monocecil2.png"><img class="alignnone size-full wp-image-1211" title="monocecil" src="http://104.197.135.42/wp-content/uploads/2010/11/monocecil2.png" alt="" width="509" height="648" /></a></p>

<p>We cannot get the call-stack for the crash with just watson buckets.</p>
]]></content>
        </item>
        
        <item>
            <title>Script to !SaveAllModules in .NET 4.0 SOS within Windbg</title>
            <link>/p1202/</link>
            <pubDate>Fri, 12 Nov 2010 19:29:06 +0000</pubDate>
            
            <guid>/p1202/</guid>
            <description>The .NET 4.0 sos doesn’t have save all modules (!SaveAllModules) command. It only has !SaveModule. Recently I was debugging a .NET 4.0 process for which I had to save all the modules. Here is a script that does !SaveAllModules.
[sourcecode]
!for_each_module .if ($spat (&amp;ldquo;${@#ImageName}&amp;rdquo;,&amp;rdquo;*.exe&amp;rdquo;)) { !SaveModule ${@#Base} c:temp${@#ModuleName}.exe } .else { !SaveModule ${@#Base} c:temp${@#ModuleName}.dll }
[/sourcecode]</description>
            <content type="html"><![CDATA[<p>The .NET 4.0 sos doesn’t have save all modules (!SaveAllModules) command. It only has !SaveModule. Recently I was debugging a .NET 4.0 process for which I had to save all the modules. Here is a script that does !SaveAllModules.</p>

<p>[sourcecode]</p>

<p>!for_each_module .if ($spat (&ldquo;${@#ImageName}&rdquo;,&rdquo;*.exe&rdquo;)) { !SaveModule ${@#Base} c:temp${@#ModuleName}.exe } .else { !SaveModule ${@#Base} c:temp${@#ModuleName}.dll }</p>

<p>[/sourcecode]</p>
]]></content>
        </item>
        
        <item>
            <title>Using Managed Code to debug Memory Dumps</title>
            <link>/p1168/</link>
            <pubDate>Thu, 11 Nov 2010 22:21:02 +0000</pubDate>
            
            <guid>/p1168/</guid>
            <description>I happened to notice the new I happened to notice the new and it had COM based API for dbgeng. The sample code were in VB Script. I much comfortable writing managed code compared to VB script. So I decided to use COM based API in managed code.
Here are couple of ways to solve certain problems using this
 Parallel GC Roots :- Getting GC Roots from memory dump is the most time consuming because SOS is single threaded.</description>
            <content type="html"><![CDATA[

<p>I happened to notice the new <a href="http://translate.google.com/translate?hl=en&amp;sl=pt&amp;u=http://blogs.technet.com/b/carnevale/archive/2010/10/04/debugdiag-1-2-beta1.aspx&amp;ei=dwbcTOe4DIGglAfc6uWuCQ&amp;sa=X&amp;oi=translate&amp;ct=result&amp;resnum=5&amp;ved=0CDkQ7gEwBA&amp;prev=/search%3Fq%3Ddebugdiag%2B1.2%26hl%3Den%26client%3Dfirefox-a%26hs%3DNUZ%26rls%3Dorg.mozilla:en-US:official%26prmd%3Div">I happened to notice the new</a> and it had COM based API for dbgeng. The sample code were in VB Script. I much comfortable writing managed code compared to VB script. So I  decided to use COM based API in managed code.</p>

<p>Here are couple of ways to solve certain problems using this</p>

<ol>
<li><strong>Parallel GC Roots</strong> :- Getting GC Roots from memory dump is the most time consuming because SOS is single threaded. I use PFX to do them in parallel.</li>
<li><strong>Reconstructing manged objects</strong> :- Creating an instance of an object by reading data from the memory dump.</li>
</ol>

<p>Need to add reference to the COM Library</p>

<p><a href="http://104.197.135.42/wp-content/uploads/2010/11/dbghost2.png"><img class="alignnone size-full wp-image-1171" title="dbghost" src="http://104.197.135.42/wp-content/uploads/2010/11/dbghost2.png" alt="" width="700" height="403" /></a></p>

<p>And in VS2010 (.NET 4.0) by default  COM Interop types have  Embed Interop Types turned on. I couldn&#8217;t compile the code with this option. I had to turn off Embed Interop types.</p>

<p>Few extension methods for the DbgObj</p>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>static class DbgExtensions {</p>

<p>public static DbgObj OpenDump(this DbgControlClass dbg, string dumpPath) {</p>

<p>var path = Environment.GetEnvironmentVariable(&rdquo;_NT_SYMBOL_PATH&rdquo;);</p>

<p>return dbg.OpenDump(dumpPath, path, path, null);</p>

<p>}</p>

<p>public static void LoadSOS(this DbgObj dbg){</p>

<p>// By default it only loads psscor2.dll and It will not work for .NET 4.0</p>

<p>dbg.UnloadExtensions();</p>

<p>// Will load sos based on the framework version</p>

<p>var sos = dbg.GetModuleByModuleName(&ldquo;clr&rdquo;) == null ? &ldquo;.loadby sos mscorwks&rdquo; : &ldquo;.loadby sos clr&rdquo;;</p>

<p>dbg.Execute(sos);</p>

<p>}</p>

<p>public static IEnumerable<string> DumpHeap(this DbgObj dbg, string typeorMT, bool isMT = false) {</p>

<p>var parameter = isMT ? &ldquo;-MT &rdquo; : &ldquo;-type &ldquo;;</p>

<p>return dbg.Execute(&ldquo;!dumpheap -short &rdquo; + parameter + typeorMT).Split(new[] { &ldquo;n&rdquo; },</p>

<p>StringSplitOptions.RemoveEmptyEntries);</p>

<p>}</p>

<p>public static string GCRoot(this DbgObj dbg, string address) {</p>

<p>return dbg.Execute(&ldquo;!GcRoot&rdquo; + address);</p>

<p>}</p>

<p>public static double ReadDouble(this DbgObj dbg, string address, string offset) {</p>

<p>return (double)Int32.Parse(</p>

<p>dbg.Execute(string.Format(&ldquo;dd {0}+{1} L1&rdquo;, address, offset)).Replace(&ldquo;n&rdquo;, &ldquo;&rdquo;)</p>

<p>.Split(new[] { &ldquo; &rdquo; }, StringSplitOptions.RemoveEmptyEntries)</p>

<p>.ElementAt(1),</p>

<p>NumberStyles.AllowHexSpecifier);</p>

<p>}</p>

<p>public static string ReadString(this DbgObj dbg, string address, string offset) {</p>

<p>// The managed string in x86 starts at 8th offset</p>

<p>return dbg.ReadUnicodeString(ReadDouble(dbg, address, offset) + 8);</p>

<p>}</p>

<p>}</p>

<p>[/sourcecode]</p>

<h3 id="parallel-gc-roots">Parallel GC Roots</h3>

<p>Anybody who is debugged memory dumps for leaks understands the pain of running gcroots within a loop. AFAIK sos is single threaded.  I have had customers who had 24 way CPU&#8217;s who wanted to use all the CPU&#8217;s to debug memory leaks, but it wasn&#8217;t possible.</p>

<p>Here is a code that would make parallel gc roots possible</p>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>using System;</p>

<p>using System.Collections.Generic;</p>

<p>using System.Linq;</p>

<p>using System.Globalization;</p>

<p>using DbgHostLib;</p>

<p>namespace ConsoleApplication1 {</p>

<p>class Program {</p>

<p>static void Main(string[] args) {</p>

<p>var dump = new DbgControlClass().OpenDump(@&ldquo;C:TestClass.dmp&rdquo;).LoadSOS();</p>

<p>var testInstances = dump.DumpHeap(&ldquo;Test.TestClass&rdquo;);</p>

<p>var roots = testInstances.AsParallel().Select(testclass =&gt;</p>

<p>new DbgControlClass().OpenDump(@&ldquo;C:TestClass.dmp&rdquo;).LoadSOS().GCRoot(testclass)).ToList();</p>

<p>Console.Read();</p>

<p>}</p>

<p>}</p>

<p>static class DbgExtensions {</p>

<p>public static DbgObj OpenDump(this DbgControlClass dbg, string dumpPath) {</p>

<p>var path = Environment.GetEnvironmentVariable(&rdquo;_NT_SYMBOL_PATH&rdquo;);</p>

<p>return dbg.OpenDump(dumpPath, path, path, null);</p>

<p>}</p>

<p>public static DbgObj LoadSOS(this DbgObj dbg){</p>

<p>// By default it loads psscor2</p>

<p>dbg.UnloadExtensions();</p>

<p>// Will load sos based on the framework version</p>

<p>var sos = dbg.GetModuleByModuleName(&ldquo;clr&rdquo;) == null ? &rdquo;.loadby sos mscorwks&rdquo; : &rdquo;.loadby sos clr&rdquo;;</p>

<p>dbg.Execute(sos);</p>

<p>return dbg;</p>

<p>}</p>

<p>public static IEnumerable<string> DumpHeap(this DbgObj dbg, string typeorMT, bool isMT = false) {</p>

<p>var parameter = isMT ? &rdquo;-MT &rdquo; : &rdquo;-type &rdquo;;</p>

<p>return dbg.Execute(&ldquo;!dumpheap -short &rdquo; + parameter + typeorMT).Split(new[] { &rdquo;n&rdquo; },</p>

<p>StringSplitOptions.RemoveEmptyEntries);</p>

<p>}</p>

<p>public static string GCRoot(this DbgObj dbg, string address) {</p>

<p>var s = dbg.IsClrExtensionMissing;</p>

<p>return dbg.Execute(&ldquo;!gcroot &rdquo; + address);</p>

<p>}</p>

<p>public static double ReadDouble(this DbgObj dbg, string address, string offset) {</p>

<p>return (double)Int32.Parse(</p>

<p>dbg.Execute(string.Format(&ldquo;dd {0}+{1} L1&rdquo;, address, offset)).Replace(&ldquo;n&rdquo;, &rdquo;&ldquo;)</p>

<p>.Split(new[] { &rdquo; &rdquo; }, StringSplitOptions.RemoveEmptyEntries)</p>

<p>.ElementAt(1),</p>

<p>NumberStyles.AllowHexSpecifier);</p>

<p>}</p>

<p>public static string ReadString(this DbgObj dbg, string address, string offset) {</p>

<p>// The managed string in x86 starts at 8th offset</p>

<p>return dbg.ReadUnicodeString(ReadDouble(dbg, address, offset) + 8);</p>

<p>}</p>

<p>}</p>

<p>}</p>

<p>[/sourcecode]</p>

<p>The above code loads a memory dump and looks for object type &#8220;Test.TestClass&#8221; and gets its addresses. Then gets GCRoots in parallel using the AsParallel option.</p>

<p><a href="http://104.197.135.42/wp-content/uploads/2010/11/parallelgcroots2.png"><img class="alignnone size-medium wp-image-1175" title="ParallelGCRoots" src="http://104.197.135.42/wp-content/uploads/2010/11/parallelgcroots2.png?w=300" alt="" width="300" height="96" /></a></p>

<h3 id="reconstructing-manged-objects">Reconstructing manged objects</h3>

<p>Using the same API it is pretty easy to create an actual instance of a class from a memory dump.  Here is the code for which I dumped the memory.</p>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>using System;</p>

<p>namespace Test {</p>

<p>class Program {</p>

<p>static Foo[] foo= new Foo[5];</p>

<p>static void Main(string[] args) {</p>

<p>for (int i = 0; i &lt; 5; i++)</p>

<p>foo[i] = new Foo() { counter = i, Name = &rdquo;Name &rdquo; + i.ToString() };</p>

<p>Console.WriteLine(foo);</p>

<p>Console.Read();</p>

<p>}</p>

<p>}</p>

<p>class Foo {</p>

<p>public int counter;</p>

<p>public string Name;</p>

<p>public override string ToString() {</p>

<p>return string.Format(&ldquo;Counter :- {0} , Name :-  {1} &rdquo;, counter, Name);</p>

<p>}</p>

<p>}</p>

<p>}</p>

<p>[/sourcecode]</p>

<p>Here is the memory structure of Foo</p>

<blockquote>
<p>0:005&gt; !do 00f1c660</p>

<p>Name:        Test.Foo</p>

<p>MethodTable: 009b38bc</p>

<p>EEClass:     009b14a4</p>

<p>Size:        16(0x10) bytes</p>

<p>File:        C:FoobinDebugFoo.exe</p>

<p>Fields:</p>

<p>MT                  Field          Offset                    Type  VT     Attr    Value Name</p>

<p>79ba2978  4000002        8         System.Int32  1 instance        2 counter</p>

<p>79b9f9ac  4000003        4        System.String  0 instance 00f1c680 Name</p>
</blockquote>

<p>Notice the variable &#8220;Name&#8221; is in the 4th offset and counter is in the 8th offset. I use these offsets to read its contents from the dump.Here is the code that recreates instances of Foo from the memory dump.</p>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>class Program {</p>

<p>static void Main(string[] args) {</p>

<p>var dump = new DbgControlClass().OpenDump(@&ldquo;C:tempFoo.dmp&rdquo;).LoadSOS();</p>

<p>var foos = dump.DumpHeap(@&ldquo;Test.Foo&rdquo;);</p>

<p>foos.Select(s =&gt; new Foo() { counter = (int)dump.ReadDouble(s, &rdquo;0x8&rdquo;), Name = dump.ReadString(s, &rdquo;0x4&rdquo;) }).</p>

<p>ToList().ForEach(Console.WriteLine);</p>

<p>Console.Read();</p>

<p>}</p>

<p>}</p>

<p>[/sourcecode]</p>

<p>And here is the output from the above code.</p>

<blockquote>
<p>Counter :- 0 , Name :-  Name 0</p>

<p>Counter :- 1 , Name :-  Name 1</p>

<p>Counter :- 2 , Name :-  Name 2</p>

<p>Counter :- 3 , Name :-  Name 3</p>

<p>Counter :- 4 , Name :-  Name 4</p>
</blockquote>

<p>There is lot more to explore than what I have shown above. Happy debugging  🙂</p>
]]></content>
        </item>
        
        <item>
            <title>Downloading PDC10 videos using the new async feature</title>
            <link>/p1156/</link>
            <pubDate>Wed, 03 Nov 2010 01:56:34 +0000</pubDate>
            
            <guid>/p1156/</guid>
            <description>I knew PDC10 has an OData endpoint which is http://odata.microsoftpdc.com/ODataSchedule.svc/ . The best part about OData is querying for specific data that we are looking for. And here is my OData url for filtering twitter hashtag #languages
[sourcecode]
http://odata.microsoftpdc.com/ODataSchedule.svc/Sessions()?$filter=startswith(TwitterHashtag,&amp;amp;#8217;%23languages&amp;amp;#8217;)&amp;amp;$expand=DownloadableContent&amp;amp;$select=DownloadableContent
[/sourcecode]
With the above OData feed I could get urls for low bandwidth mp4&amp;#8217;s that I can download. And here is the sample code for filtering
[sourcecode language=&amp;#8221;csharp&amp;#8221;]
var x =XDocument.Load(@&amp;ldquo;c:tempsession.xml&amp;rdquo;).Descendants().AsParallel().Where(xd =&amp;gt; xd.</description>
            <content type="html"><![CDATA[<p>I knew PDC10 has an OData endpoint which is <a href="http://odata.microsoftpdc.com/ODataSchedule.svc/">http://odata.microsoftpdc.com/ODataSchedule.svc/</a> . The best part about  OData is querying for specific data that we are looking for. And here is my OData url for filtering twitter hashtag #languages</p>

<p>[sourcecode]</p>

<p><a href="http://odata.microsoftpdc.com/ODataSchedule.svc/Sessions()?$filter=startswith(TwitterHashtag,&amp;#8217;%23languages&amp;#8217;)&amp;$expand=DownloadableContent&amp;$select=DownloadableContent">http://odata.microsoftpdc.com/ODataSchedule.svc/Sessions()?$filter=startswith(TwitterHashtag,&amp;#8217;%23languages&amp;#8217;)&amp;$expand=DownloadableContent&amp;$select=DownloadableContent</a></p>

<p>[/sourcecode]</p>

<p>With the above OData feed I could get urls for low bandwidth mp4&#8217;s that I can download. And here is the sample code for filtering</p>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>var x =XDocument.Load(@&ldquo;c:tempsession.xml&rdquo;).Descendants().AsParallel().Where(xd =&gt; xd.Name.LocalName==&ldquo;Url&rdquo;</p>

<p>&amp;&amp; xd.Value.Contains(&rdquo;_Low.mp4&rdquo;)).Select (xd =&gt; xd.Value);</p>

<p>[/sourcecode]</p>

<p>Now that I have the url&#8217;s ,here is the code to download the videos using the new async feature</p>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>using System;</p>

<p>using System.IO;</p>

<p>using System.Linq;</p>

<p>using System.Net;</p>

<p>using System.Threading.Tasks;</p>

<p>using System.Xml.Linq;</p>

<p>namespace Test</p>

<p>{</p>

<p>class Foo</p>

<p>{</p>

<p>static void Main(string[] args)</p>

<p>{</p>

<p>DownloadAsync();</p>

<p>Console.Read();</p>

<p>}</p>

<p>static async void DownloadAsync()</p>

<p>{</p>

<p>var result = new WebClient().DownloadStringTaskAsync(&ldquo;<a href="http://odata.microsoftpdc.com/ODataSchedule.svc/Sessions()?$filter=startswith(TwitterHashtag,&amp;#8217;%23languages&amp;#8217;)&amp;$expand=DownloadableContent&amp;$select=DownloadableContent&quot;">http://odata.microsoftpdc.com/ODataSchedule.svc/Sessions()?$filter=startswith(TwitterHashtag,&amp;#8217;%23languages&amp;#8217;)&amp;$expand=DownloadableContent&amp;$select=DownloadableContent&quot;</a>);</p>

<p>var downloads = XDocument.Parse(await result).Descendants().AsParallel().</p>

<p>Where(xd =&gt; xd.Name.LocalName == &ldquo;Url&rdquo; &amp;&amp; xd.Value.Contains(&rdquo;_Low.mp4&rdquo;)).</p>

<p>Select(xd =&gt; new WebClient().DownloadFileTaskAsync(xd.Value, Path.GetFileName(xd.Value)));</p>

<p>await TaskEx.WhenAll(downloads).ContinueWith(_ =&gt; Console.WriteLine(&ldquo;Downloading Complete&rdquo;));</p>

<p>}</p>

<p>}</p>

<p>}</p>

<p>[/sourcecode]</p>
]]></content>
        </item>
        
        <item>
            <title>Dumping .NET strings to files using Windbg</title>
            <link>/p1128/</link>
            <pubDate>Mon, 01 Nov 2010 21:37:16 +0000</pubDate>
            
            <guid>/p1128/</guid>
            <description>In this post I would demonstrate how to dump strings from a memory dump /live process to a file. Recently I had to debug a process which had few big strings where I had to analyze its contents. The !dumpobj from sos would only dump partial strings. I had to dump few hundred XML strings that I had to analyze using some automation. And hence comes the script.
[sourcecode]
$$ Dumps the managed strings to a file</description>
            <content type="html"><![CDATA[<p>In this post I would demonstrate how to dump strings from a memory dump /live process to a file. Recently I had to debug a process which had few big strings where I had to analyze its contents. The !dumpobj from sos would only dump partial strings.  I had to dump few hundred XML strings that I had to analyze using some automation. And hence comes the script.</p>

<p>[sourcecode]</p>

<p>$$ Dumps the managed strings to a file</p>

<p>$$ Platform x86</p>

<p>$$ Naveen Srinivasan <a href="http://naveensrinivasan.com">http://naveensrinivasan.com</a></p>

<p>$$ Usage $$&gt;a&lt;&ldquo;c:tempdumpstringtofolder.txt&rdquo; 6544f9ac 5000 c:tempstringtest</p>

<p>$$ First argument is the string method table pointer</p>

<p>$$ Second argument is the Min size of the string that needs to be used filter</p>

<p>$$ the strings</p>

<p>$$ Third is the path of the file</p>

<p>.foreach ($string {!dumpheap -short -mt ${$arg1} -min ${$arg2}})</p>

<p>{</p>

<p>$$ MT Field Offset Type VT Attr Value Name</p>

<p>$$ 65452978 40000ed 4 System.Int32 1 instance 71117 m_stringLength</p>

<p>$$ 65451dc8 40000ee 8 System.Char 1 instance 3c m_firstChar</p>

<p>$$ 6544f9ac 40000ef 8 System.String 0 shared static Empty</p>

<p>$$ start of string is stored in the 8th offset, which can be inferred from above</p>

<p>$$ Size of the string which is stored in the 4th offset</p>

<p>r@$t0= poi(${$string}+4)*2</p>

<p>.writemem ${$arg3}${$string}.txt ${$string}+8 ${$string}+8+@$t0</p>

<p>}</p>

<p>[/sourcecode]</p>

<p>And to use the above script ,copy it to a file and invoke it within Windbg/cdb</p>

<blockquote>
<p>$$&gt;a&lt;&#8220;c:tempdumpstringtofolder.txt&#8221; 6544f9ac 5000 c:tempstringtest</p>
</blockquote>

<p>Parameters to the script</p>

<ol>
<li>6544f9ac :- Is the MT to string.</li>
<li>5000 :- Is the min size of the string that I want to dump</li>
<li>c:tempstringtest :- Is the path along with partial filename for each string item</li>
</ol>

<p>The dumped contents would be in Unicode format and to view its contents use something like this</p>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>Console.WriteLine(ASCIIEncoding.Unicode.GetString(File.ReadAllBytes(@&ldquo;c:tempstringtest03575270.txt&rdquo;)));</p>

<p>[/sourcecode]</p>

<p>And here is a sample code that downloads big xml strings ,that can be used by the above script to dump its contents to a folder</p>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>using System;</p>

<p>using System.Net;</p>

<p>namespace Test</p>

<p>{</p>

<p>class Program</p>

<p>{</p>

<p>static void Main(string[] args)</p>

<p>{</p>

<p>var speakers = new WebClient().DownloadString(&ldquo;<a href="http://www.codemash.org/rest/speakers&quot;">http://www.codemash.org/rest/speakers&quot;</a>);</p>

<p>var sessions = new WebClient().DownloadString(&ldquo;<a href="http://www.codemash.org/rest/sessions&quot;">http://www.codemash.org/rest/sessions&quot;</a>);</p>

<p>Console.Read();</p>

<p>}</p>

<p>}</p>

<p>}</p>

<p>[/sourcecode]</p>

<p>[twitter-follow screen_name=&#8217;snaveen&#8217; show_count=&#8217;yes&#8217; text_color=&#8217;00ccff&#8217;]</pre></p>
]]></content>
        </item>
        
        <item>
            <title>Dumping ASP.NET Session (x86 /x64) within Windbg</title>
            <link>/p1071/</link>
            <pubDate>Wed, 27 Oct 2010 01:18:21 +0000</pubDate>
            
            <guid>/p1071/</guid>
            <description>This post is going to be about dumping ASP.NET session objects using Windbg. I had recently answered a stackoverflow question in which someone wanted to dump ASP.NET session objects for 64-bit IIS (x64). I thought why not blog about the same which might be useful to others. The challenge is to write one script that should work in both x86/x64. FYI there is a script from Tess that does dump out the session contents, AFAIK it will not work on x64 and my script iterates through the array using the array length instead of using “.</description>
            <content type="html"><![CDATA[<p>This post is going to be about dumping ASP.NET session objects using Windbg. I had recently answered a stackoverflow question in which someone wanted to dump ASP.NET session objects for 64-bit IIS (x64). I thought why not blog about the same which might be useful to others.  The challenge is to write one script that should work in both x86/x64.  FYI there is a script from <a href="http://blogs.msdn.com/b/tess/archive/2007/09/18/debugging-script-dumping-out-asp-net-session-contents.aspx">Tess</a> that does dump out the session contents, AFAIK it will not work on x64 and my script iterates through the array using the array length instead of using “.foreach /pS 2 /ps 99” which is somewhat cleaner.</p>

<p>Here is the script for dumping ASP.NET session objects within Windbg / CDB</p>

<p>[sourcecode wraplines=&#8221;true&#8221;]</p>

<p>$$$ Dump the ASP.NET Session objects within windbg/cdb</p>

<p>$$$ Platform : x86 / x64</p>

<p>$$$ Naveen Srinivasan <a href="http://naveensrinivasan.com">http://naveensrinivasan.com</a></p>

<p>$$$ Usage: $$&gt;a&lt;&ldquo;c:Debuggersx86dumpsession.txt&rdquo; 000007fef4115c20</p>

<p>$$$ where 000007fef4115c20 is the MethodTable pointer System.Web.SessionState.HttpSessionState</p>

<p>r @$t9 = @$ptrsize</p>

<p>$$ $t9 register contains pointer size</p>

<p>$$ $t8 register contains the next offset of the variable</p>

<p>$$ $t7 register contains array start address</p>

<p>.if (@$ptrsize = 8 )</p>

<p>{</p>

<p>$$$ x64</p>

<p>r @$t8 = 10</p>

<p>r @$t7 = 20</p>

<p>r @$t6 = 10</p>

<p>}</p>

<p>.else</p>

<p>{</p>

<p>$$$ x86</p>

<p>r @$t8 = 6</p>

<p>r @$t6 = 8</p>

<p>r @$t7 = 10</p>

<p>}</p>

<p>.foreach ($obj {!dumpheap -mt ${$arg1} -short})</p>

<p>{</p>

<p>$$ The !dumpheap -short option has last result as &#8212;&#8212;&#8212;&#8212;&#8212; and</p>

<p>$$ this .if is to avoid this</p>

<p>.if ($spat (&ldquo;${$obj}&rdquo;,&rdquo;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&rdquo;))</p>

<p>{}</p>

<p>.else</p>

<p>{</p>

<p>$$ $t5 contains refernce to the array which has key and value for the</p>

<p>$$ session contents</p>

<p>r$t5 = poi(poi(poi(poi(${$obj}+@$t9)+@$t6)+@$t9)+@$t9)</p>

<p>$$$ Iterating through the array elements</p>

<p>.for (r $t0=0; @$t0 &lt; poi(@$t5+@$t9); r$t0=@$t0+1 )</p>

<p>{</p>

<p>.if(@$t0 = 0)</p>

<p>{</p>

<p>$$ First occurence of the element in the array would be in the 20 offset for x64 and 10 offset for x86</p>

<p>r$t1=@$t7</p>

<p>}</p>

<p>.else</p>

<p>{</p>

<p>$$ the rest of the elements would be in the 8th offset for x64 and 4th offset for x86</p>

<p>r$t1= @$t7+(@$t0*@$t9)</p>

<p>}</p>

<p>$$ Check for null before trying to dump</p>

<p>.if (poi((@$t5-@$t9)+@$t1) = 0 )</p>

<p>{</p>

<p>.continue</p>

<p>}</p>

<p>.else</p>

<p>{</p>

<p>.echo *<strong>*</strong>*<strong>*</strong></p>

<p>$$ Session Key</p>

<p>.printf /ow &ldquo;Session Key is :- &ldquo;; !ds poi(poi((@$t5-@$t9)+@$t1)+@$t9)</p>

<p>$$ Session value</p>

<p>.printf /ow &ldquo;Session value is :- &ldquo;;!ds poi(poi((@$t5-@$t9)+@$t1)+@$t6)</p>

<p>}</p>

<p>}</p>

<p>}</p>

<p>}</p>

<p>[/sourcecode]</p>

<p>Copy the above script in to a file and invoke the script like this within Windbg</p>

<blockquote>
<p>$$&gt;a&lt;&#8220;c:Debuggersx86dumpsession.txt&#8221; 000007fef4115c20</p>
</blockquote>

<p>Passing the MT of <code>System.Web.SessionState.HttpSessionState</code> as the script argument.</p>

<p>Within the script I am using the alias <code>!ds</code> for dumping strings instead of using <code>!dumpobj</code>.</p>

<p>To create the alias use this command in x64</p>

<p>[sourcecode]</p>

<p>as !ds .printf &ldquo;%mu n&rdquo;, 10+</p>

<p>[/sourcecode]</p>

<p>and in x86</p>

<p>[sourcecode]</p>

<p>as !ds .printf &ldquo;%mu n&rdquo;, C+</p>

<p>[/sourcecode]</p>

<p>Replace !ds with !do for dumping regular objects instead of strings.</p>

<p>Here is the output from the above script</p>

<blockquote>
<p>0:022&gt; $$&gt;a&lt;&#8220;c:Debuggersx86dumpsession.txt&#8221; 000007fef4115c20</p>

<p>*<strong>*</strong>*<strong>*</strong></p>

<p>Session Key is :- Name</p>

<p>Session value is :- Test</p>

<p>*<strong>*</strong>*<strong>*</strong></p>

<p>Session Key is :- Name1</p>

<p>Session value is :- Test1</p>
</blockquote>

<p>If you are only interested in getting the session contents the above script should get you the answer you are looking for. The rest of the post is an explanation of how the script works.</p>

<p>I am going to start by explaining one of the important statement in the script “r$t5 = poi(poi(poi(poi(${$obj}+@$t9)+@$t6)+@$t9)+@$t9)” which gets the contents of the array that contains the session key and value.</p>

<p>The $obj is the loop variable that contains the object address for each Http Session object  “.foreach ($obj {!dumpheap -mt ${$arg1} -short})”</p>

<p>If I dump the Http session object using !do</p>

<blockquote>
<p>0:022&gt; !do 000000013fe20c30</p>

<p>Name: System.Web.SessionState.HttpSessionState</p>

<p>MethodTable: 000007fef4115c20</p>

<p>EEClass: 000007fef3d73e00</p>

<p>Size: 24(0x18) bytes</p>

<p>(C:WindowsassemblyGAC_64System.Web2.0.0.0__b03f5f7f11d50a3aSystem.Web.dll)</p>

<p>Fields:</p>

<p>MT    Field   Offset                 Type VT     Attr            Value Name</p>

<p>000007fef40b59e8  4001f59        <span style="color:#ff0000;"><strong>8</strong></span> &#8230;IHttpSessionState  0 instance 000000013fe20bc0 _container</p>
</blockquote>

<p>We can see the 8th offset contains the pointer to the &#8220;_container&#8221; object in x64 and in x86 it will be the 4th offset and that&#8217;s the reason we use poi(${$obj}+@$t9) which should work for both x86 and x64 because the value of @$t9 is the pointer size which will be 4 in x86 and 8 in x64.</p>

<p>The next step is to dump the &#8220;_container&#8221; which is equal to poi(${$obj}+@$t9)</p>

<blockquote>
<p>0:022&gt; !do poi(000000013fe20c30+8)</p>

<p>Name: System.Web.SessionState.HttpSessionStateContainer</p>

<p>MethodTable: 000007fef411e868</p>

<p>EEClass: 000007fef3d77348</p>

<p>Size: 64(0x40) bytes</p>

<p>(C:WindowsassemblyGAC_64System.Web2.0.0.0__b03f5f7f11d50a3aSystem.Web.dll)</p>

<p>Fields:</p>

<p>MT    Field   Offset                 Type VT     Attr            Value Name</p>

<p>000007fef7b77a80  4001f5a        8        System.String  0 instance 0000000000000000 _id</p>

<p>000007fef4086508  4001f5b       <span style="color:#ff0000;"><strong>10 &#8230;ateItemCollection  0 instance 000000013fe20458 _sessionItems</strong></span></p>

<p>000007fef4115390  4001f5c       18 &#8230;ObjectsCollection  0 instance 000000013fe209d0 _staticObjects</p>

<p>000007fef7b7ecf0  4001f5d       28         System.Int32  1 instance               20 _timeout</p>

<p>000007fef7b76c50  4001f5e       34       System.Boolean  1 instance                1 _newSession</p>

<p>000007fef411f8c8  4001f5f       2c         System.Int32  1 instance                1 _cookieMode</p>

<p>000007fef411f798  4001f60       30         System.Int32  1 instance                1 _mode</p>

<p>000007fef7b76c50  4001f61       35       System.Boolean  1 instance                0 _abandon</p>

<p>000007fef7b76c50  4001f62       36       System.Boolean  1 instance                0 _isReadonly</p>

<p>000007fef411e7b0  4001f63       20 &#8230;essionStateModule  0 instance 000000013fce1bd8 _stateModule</p>
</blockquote>

<p>Now that we have the SessionContainer, we would have to get the contents of &#8220;_sessionItems&#8221; which is in the 10th offset in x64.</p>

<p>Next step is to dump &#8220;_sessionitems&#8221; using !do poi(poi(000000013fe20c30+8)+10) and this is equal to poi(poi(${$obj}+@$t9)+@$t6).In the starting of the script @$t6 is set to 10 or 8 based on platform.</p>

<blockquote>
<p>0:022&gt; !do poi(poi(000000013fe20c30+8)+10)</p>

<p>Name: System.Web.SessionState.SessionStateItemCollection</p>

<p>MethodTable: 000007fef4086650</p>

<p>EEClass: 000007fef3d2fcf0</p>

<p>Size: 112(0x70) bytes</p>

<p>(C:WindowsassemblyGAC_64System.Web2.0.0.0__b03f5f7f11d50a3aSystem.Web.dll)</p>

<p>Fields:</p>

<p>MT    Field   Offset                 Type VT     Attr            Value Name</p>

<p>000007fef7b76c50  400117b       44       System.Boolean  1 instance                0 _readOnly</p>

<p>000007fef7b7e968  400117c        <span style="color:#ff0000;"><strong>8 &#8230;ections.ArrayList  0 instance 000000013fe20830 _entriesArray</strong></span></p>

<p>000007fef7b7fd88  400117d       10 &#8230;IEqualityComparer  0 instance 000000013fc6b270 _keyComparer</p>

<p>000007fef7b7f3d8  400117e       18 &#8230;ections.Hashtable  0 instance 000000013fe20858 _entriesTable</p>

<p>000007fef6f6f938  400117f       20 &#8230;e+NameObjectEntry  0 instance 0000000000000000 _nullKeyEntry</p>

<p>000007fef6f479b8  4001180       28 &#8230;se+KeysCollection  0 instance 0000000000000000 _keys</p>

<p>000007fef7b66840  4001181       30 &#8230;SerializationInfo  0 instance 0000000000000000 _serializationInfo</p>

<p>000007fef7b7ecf0  4001182       40         System.Int32  1 instance                3 _version</p>

<p>000007fef7b77370  4001183       38        System.Object  0 instance 0000000000000000 _syncRoot</p>

<p>000007fef7bbd028  4001184      a70 &#8230;em.StringComparer  0   shared           static defaultComparer</p>

<blockquote>
<blockquote>
<p>Domain:Value  00000000010e2690:NotInit  0000000002e0a0a0:00000000ffae8cb8 &lt;&lt;</p>
</blockquote>
</blockquote>

<p>000007fef7b76c50  4001f67       45       System.Boolean  1 instance                1 _dirty</p>

<p>000007fef4108b20  4001f68       48 &#8230;n+KeyedCollection  0 instance 0000000000000000 _serializedItems</p>

<p>000007fef7b7aa30  4001f69       50     System.IO.Stream  0 instance 0000000000000000 _stream</p>

<p>000007fef7b7ecf0  4001f6a       60         System.Int32  1 instance                0 _iLastOffset</p>

<p>000007fef7b77370  4001f6b       58        System.Object  0 instance 000000013fe20818 _serializedItemsLock</p>

<p>000007fef7b7f3d8  4001f66     18e0 &#8230;ections.Hashtable  0   shared           static s_immutableTypes</p>

<blockquote>
<blockquote>
<p>Domain:Value  00000000010e2690:NotInit  0000000002e0a0a0:000000013fe204c8 &lt;&lt;</p>
</blockquote>
</blockquote>
</blockquote>

<p>Next field that we are interested in is &#8220;_entriesArray&#8221; which is in the 8th offset in x64. To dump its contents here is the command !do</p>

<p>poi(poi(poi(000000013fe20c30+8)+10)+8) which is equal to poi(poi(poi(${$obj}+@$t9)+@$t6)+@$t9</p>

<blockquote>
<p>0:022&gt; !do poi(poi(poi(000000013fe20c30+8)+10)+8)</p>

<p>Name: System.Collections.ArrayList</p>

<p>MethodTable: 000007fef7b7e968</p>

<p>EEClass: 000007fef7781ee0</p>

<p>Size: 40(0x28) bytes</p>

<p>(C:WindowsassemblyGAC_64mscorlib2.0.0.0__b77a5c561934e089mscorlib.dll)</p>

<p>Fields:</p>

<p>MT    Field   Offset                 Type VT     Attr            Value Name</p>

<p>000007fef7b65870  400094c       <span style="color:#ff0000;"><strong> 8      System.Object[]  0 instance 000000013fe3ddb8 _items</strong></span></p>

<p>000007fef7b7ecf0  400094d       18         System.Int32  1 instance                2 _size</p>

<p>000007fef7b7ecf0  400094e       1c         System.Int32  1 instance                2 _version</p>

<p>000007fef7b77370  400094f       10        System.Object  0 instance 0000000000000000 _syncRoot</p>

<p>000007fef7b65870  4000950      388      System.Object[]  0   shared           static emptyArray</p>

<blockquote>
<blockquote>
<p>Domain:Value  00000000010e2690:00000000ffac6110 0000000002e0a0a0:00000000ffad19e0 &lt;&lt;</p>
</blockquote>
</blockquote>
</blockquote>

<p>The next field we are interested  is &#8220;_items&#8221; which is in the 8th offset in x64. Notice &#8220;_items&#8221; is an array and cannot be dumped using !dumpobj or !do. So this command “r$t5 = poi(poi(poi(poi(${$obj}+@$t9)+@$t6)+@$t9)+@$t9)&#8221; will set the array pointer to$t5.</p>

<p>Now that we have array containing the session items, we could have used !da to</p>

<p>dump the array contents with details using !da -details poi(poi(poi(poi(000000013fe20c30+8)+10)+8)+8)</p>

<blockquote>
<p>0:022&gt; !da -details poi(poi(poi(poi(000000013fe20c30+8)+10)+8)+8)</p>

<p>Name: System.Object[]</p>

<p>MethodTable: 000007fef7b65870</p>

<p>EEClass: 000007fef777eb58</p>

<p>Size: 64(0x40) bytes</p>

<p>Array: Rank 1, Number of elements 4, Type CLASS</p>

<p>Element Methodtable: 000007fef7b77370</p>

<p>[0] 000000013fe3dd98</p>

<p>Name: System.Collections.Specialized.NameObjectCollectionBase+NameObjectEntry</p>

<p>MethodTable: 000007fef6f6f938</p>

<p>EEClass: 000007fef6ce90b0</p>

<p>Size: 32(0x20) bytes</p>

<p>(C:WindowsassemblyGAC_MSILSystem2.0.0.0__b77a5c561934e089System.dll)</p>

<p>Fields:</p>

<p>MT    Field   Offset                 Type VT     Attr            Value Name</p>

<p>000007fef7b77a80  4001185        <span style="color:#ff0000;"><strong>8        System.String  0 instance 000000013fe3dcf8 Key</strong></span></p>

<p>000007fef7b77370  4001186       <span style="color:#ff0000;"><strong>10        System.Object  0 instance 000000013fe3dd20 Value</strong></span></p>

<p><a href="http://blogs.msdn.com/b/tess/archive/2007/09/18/debugging-script-dumping-out-asp-net-session-contents.aspx">1</a> 000000013fe3ddf8</p>

<p>Name: System.Collections.Specialized.NameObjectCollectionBase+NameObjectEntry</p>

<p>MethodTable: 000007fef6f6f938</p>

<p>EEClass: 000007fef6ce90b0</p>

<p>Size: 32(0x20) bytes</p>

<p>(C:WindowsassemblyGAC_MSILSystem2.0.0.0__b77a5c561934e089System.dll)</p>

<p>Fields:</p>

<p>MT    Field   Offset                 Type VT     Attr            Value Name</p>

<p>000007fef7b77a80  4001185        8        System.String  0 instance 000000013fe3dd48 Key</p>

<p>000007fef7b77370  4001186       10        System.Object  0 instance 000000013fe3dd70 Value</p>

<p><a href="http://naveensrinivasan.com/2010/06/24/custom-dumparray-windbg/">2</a> null</p>

<p>[3] null</p>
</blockquote>

<p>But notice it does not help much because we still cannot see the actual key and value. That is the reason for using a nested &#8220;.for&#8221; loop in the script which will iterate through the array contents. FYI @$t5 contains reference to the array.</p>

<p>The statement  &#8220;.for (r $t0=0; @$t0 &lt; poi(@$t5+@$t9); r$t0=@$t0+1 )&#8221;  is standard for loop with one thing that is special which is poi(@$t5+@$t9).  The poi(@$t5+@$t9) contains the reference to the size of the array. How do I know that? The answer is dd poi(poi(poi(poi(000000013fe20c30+8)+10)+8)+8)</p>

<blockquote>
<p>0:022&gt; dd poi(poi(poi(poi(000000013fe20c30+8)+10)+8)+8)</p>

<p>00000001`3fe3ddb8  f7b65870 000007fe <span style="color:#ff0000;"><strong>00000004</strong></span> 00000000</p>

<p>00000001`3fe3ddc8  f7b77370 000007fe 3fe3dd98 00000001</p>

<p>00000001`3fe3ddd8  3fe3ddf8 00000001 00000000 00000000</p>

<p>00000001`3fe3dde8  00000000 00000000 00000000 00000000</p>

<p>00000001`3fe3ddf8  f6f6f938 000007fe 3fe3dd48 00000001</p>

<p>00000001`3fe3de08  3fe3dd70 00000001 00000000 00000000</p>

<p>00000001`3fe3de18  f7b77370 000007fe 00000000 00000000</p>

<p>00000001`3fe3de28  00000000 80000000 f7b77a80 000007fe</p>
</blockquote>

<p>Notice the 8th offset value is 00000004 which is the size of the array and for</p>

<p>more information look at the post on custom dump array [This post is going to be about dumping ASP.NET session objects using Windbg. I had recently answered a stackoverflow question in which someone wanted to dump ASP.NET session objects for 64-bit IIS (x64). I thought why not blog about the same which might be useful to others.  The challenge is to write one script that should work in both x86/x64.  FYI there is a script from <a href="http://blogs.msdn.com/b/tess/archive/2007/09/18/debugging-script-dumping-out-asp-net-session-contents.aspx">Tess</a> that does dump out the session contents, AFAIK it will not work on x64 and my script iterates through the array using the array length instead of using “.foreach /pS 2 /ps 99” which is somewhat cleaner.</p>

<p>Here is the script for dumping ASP.NET session objects within Windbg / CDB</p>

<p>[sourcecode wraplines=&#8221;true&#8221;]</p>

<p>$$$ Dump the ASP.NET Session objects within windbg/cdb</p>

<p>$$$ Platform : x86 / x64</p>

<p>$$$ Naveen Srinivasan <a href="http://naveensrinivasan.com">http://naveensrinivasan.com</a></p>

<p>$$$ Usage: $$&gt;a&lt;&ldquo;c:Debuggersx86dumpsession.txt&rdquo; 000007fef4115c20</p>

<p>$$$ where 000007fef4115c20 is the MethodTable pointer System.Web.SessionState.HttpSessionState</p>

<p>r @$t9 = @$ptrsize</p>

<p>$$ $t9 register contains pointer size</p>

<p>$$ $t8 register contains the next offset of the variable</p>

<p>$$ $t7 register contains array start address</p>

<p>.if (@$ptrsize = 8 )</p>

<p>{</p>

<p>$$$ x64</p>

<p>r @$t8 = 10</p>

<p>r @$t7 = 20</p>

<p>r @$t6 = 10</p>

<p>}</p>

<p>.else</p>

<p>{</p>

<p>$$$ x86</p>

<p>r @$t8 = 6</p>

<p>r @$t6 = 8</p>

<p>r @$t7 = 10</p>

<p>}</p>

<p>.foreach ($obj {!dumpheap -mt ${$arg1} -short})</p>

<p>{</p>

<p>$$ The !dumpheap -short option has last result as &#8212;&#8212;&#8212;&#8212;&#8212; and</p>

<p>$$ this .if is to avoid this</p>

<p>.if ($spat (&ldquo;${$obj}&rdquo;,&rdquo;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&rdquo;))</p>

<p>{}</p>

<p>.else</p>

<p>{</p>

<p>$$ $t5 contains refernce to the array which has key and value for the</p>

<p>$$ session contents</p>

<p>r$t5 = poi(poi(poi(poi(${$obj}+@$t9)+@$t6)+@$t9)+@$t9)</p>

<p>$$$ Iterating through the array elements</p>

<p>.for (r $t0=0; @$t0 &lt; poi(@$t5+@$t9); r$t0=@$t0+1 )</p>

<p>{</p>

<p>.if(@$t0 = 0)</p>

<p>{</p>

<p>$$ First occurence of the element in the array would be in the 20 offset for x64 and 10 offset for x86</p>

<p>r$t1=@$t7</p>

<p>}</p>

<p>.else</p>

<p>{</p>

<p>$$ the rest of the elements would be in the 8th offset for x64 and 4th offset for x86</p>

<p>r$t1= @$t7+(@$t0*@$t9)</p>

<p>}</p>

<p>$$ Check for null before trying to dump</p>

<p>.if (poi((@$t5-@$t9)+@$t1) = 0 )</p>

<p>{</p>

<p>.continue</p>

<p>}</p>

<p>.else</p>

<p>{</p>

<p>.echo *<strong>*</strong>*<strong>*</strong></p>

<p>$$ Session Key</p>

<p>.printf /ow &ldquo;Session Key is :- &ldquo;; !ds poi(poi((@$t5-@$t9)+@$t1)+@$t9)</p>

<p>$$ Session value</p>

<p>.printf /ow &ldquo;Session value is :- &ldquo;;!ds poi(poi((@$t5-@$t9)+@$t1)+@$t6)</p>

<p>}</p>

<p>}</p>

<p>}</p>

<p>}</p>

<p>[/sourcecode]</p>

<p>Copy the above script in to a file and invoke the script like this within Windbg</p>

<blockquote>
<p>$$&gt;a&lt;&#8220;c:Debuggersx86dumpsession.txt&#8221; 000007fef4115c20</p>
</blockquote>

<p>Passing the MT of <code>System.Web.SessionState.HttpSessionState</code> as the script argument.</p>

<p>Within the script I am using the alias <code>!ds</code> for dumping strings instead of using <code>!dumpobj</code>.</p>

<p>To create the alias use this command in x64</p>

<p>[sourcecode]</p>

<p>as !ds .printf &ldquo;%mu n&rdquo;, 10+</p>

<p>[/sourcecode]</p>

<p>and in x86</p>

<p>[sourcecode]</p>

<p>as !ds .printf &ldquo;%mu n&rdquo;, C+</p>

<p>[/sourcecode]</p>

<p>Replace !ds with !do for dumping regular objects instead of strings.</p>

<p>Here is the output from the above script</p>

<blockquote>
<p>0:022&gt; $$&gt;a&lt;&#8220;c:Debuggersx86dumpsession.txt&#8221; 000007fef4115c20</p>

<p>*<strong>*</strong>*<strong>*</strong></p>

<p>Session Key is :- Name</p>

<p>Session value is :- Test</p>

<p>*<strong>*</strong>*<strong>*</strong></p>

<p>Session Key is :- Name1</p>

<p>Session value is :- Test1</p>
</blockquote>

<p>If you are only interested in getting the session contents the above script should get you the answer you are looking for. The rest of the post is an explanation of how the script works.</p>

<p>I am going to start by explaining one of the important statement in the script “r$t5 = poi(poi(poi(poi(${$obj}+@$t9)+@$t6)+@$t9)+@$t9)” which gets the contents of the array that contains the session key and value.</p>

<p>The $obj is the loop variable that contains the object address for each Http Session object  “.foreach ($obj {!dumpheap -mt ${$arg1} -short})”</p>

<p>If I dump the Http session object using !do</p>

<blockquote>
<p>0:022&gt; !do 000000013fe20c30</p>

<p>Name: System.Web.SessionState.HttpSessionState</p>

<p>MethodTable: 000007fef4115c20</p>

<p>EEClass: 000007fef3d73e00</p>

<p>Size: 24(0x18) bytes</p>

<p>(C:WindowsassemblyGAC_64System.Web2.0.0.0__b03f5f7f11d50a3aSystem.Web.dll)</p>

<p>Fields:</p>

<p>MT    Field   Offset                 Type VT     Attr            Value Name</p>

<p>000007fef40b59e8  4001f59        <span style="color:#ff0000;"><strong>8</strong></span> &#8230;IHttpSessionState  0 instance 000000013fe20bc0 _container</p>
</blockquote>

<p>We can see the 8th offset contains the pointer to the &#8220;_container&#8221; object in x64 and in x86 it will be the 4th offset and that&#8217;s the reason we use poi(${$obj}+@$t9) which should work for both x86 and x64 because the value of @$t9 is the pointer size which will be 4 in x86 and 8 in x64.</p>

<p>The next step is to dump the &#8220;_container&#8221; which is equal to poi(${$obj}+@$t9)</p>

<blockquote>
<p>0:022&gt; !do poi(000000013fe20c30+8)</p>

<p>Name: System.Web.SessionState.HttpSessionStateContainer</p>

<p>MethodTable: 000007fef411e868</p>

<p>EEClass: 000007fef3d77348</p>

<p>Size: 64(0x40) bytes</p>

<p>(C:WindowsassemblyGAC_64System.Web2.0.0.0__b03f5f7f11d50a3aSystem.Web.dll)</p>

<p>Fields:</p>

<p>MT    Field   Offset                 Type VT     Attr            Value Name</p>

<p>000007fef7b77a80  4001f5a        8        System.String  0 instance 0000000000000000 _id</p>

<p>000007fef4086508  4001f5b       <span style="color:#ff0000;"><strong>10 &#8230;ateItemCollection  0 instance 000000013fe20458 _sessionItems</strong></span></p>

<p>000007fef4115390  4001f5c       18 &#8230;ObjectsCollection  0 instance 000000013fe209d0 _staticObjects</p>

<p>000007fef7b7ecf0  4001f5d       28         System.Int32  1 instance               20 _timeout</p>

<p>000007fef7b76c50  4001f5e       34       System.Boolean  1 instance                1 _newSession</p>

<p>000007fef411f8c8  4001f5f       2c         System.Int32  1 instance                1 _cookieMode</p>

<p>000007fef411f798  4001f60       30         System.Int32  1 instance                1 _mode</p>

<p>000007fef7b76c50  4001f61       35       System.Boolean  1 instance                0 _abandon</p>

<p>000007fef7b76c50  4001f62       36       System.Boolean  1 instance                0 _isReadonly</p>

<p>000007fef411e7b0  4001f63       20 &#8230;essionStateModule  0 instance 000000013fce1bd8 _stateModule</p>
</blockquote>

<p>Now that we have the SessionContainer, we would have to get the contents of &#8220;_sessionItems&#8221; which is in the 10th offset in x64.</p>

<p>Next step is to dump &#8220;_sessionitems&#8221; using !do poi(poi(000000013fe20c30+8)+10) and this is equal to poi(poi(${$obj}+@$t9)+@$t6).In the starting of the script @$t6 is set to 10 or 8 based on platform.</p>

<blockquote>
<p>0:022&gt; !do poi(poi(000000013fe20c30+8)+10)</p>

<p>Name: System.Web.SessionState.SessionStateItemCollection</p>

<p>MethodTable: 000007fef4086650</p>

<p>EEClass: 000007fef3d2fcf0</p>

<p>Size: 112(0x70) bytes</p>

<p>(C:WindowsassemblyGAC_64System.Web2.0.0.0__b03f5f7f11d50a3aSystem.Web.dll)</p>

<p>Fields:</p>

<p>MT    Field   Offset                 Type VT     Attr            Value Name</p>

<p>000007fef7b76c50  400117b       44       System.Boolean  1 instance                0 _readOnly</p>

<p>000007fef7b7e968  400117c        <span style="color:#ff0000;"><strong>8 &#8230;ections.ArrayList  0 instance 000000013fe20830 _entriesArray</strong></span></p>

<p>000007fef7b7fd88  400117d       10 &#8230;IEqualityComparer  0 instance 000000013fc6b270 _keyComparer</p>

<p>000007fef7b7f3d8  400117e       18 &#8230;ections.Hashtable  0 instance 000000013fe20858 _entriesTable</p>

<p>000007fef6f6f938  400117f       20 &#8230;e+NameObjectEntry  0 instance 0000000000000000 _nullKeyEntry</p>

<p>000007fef6f479b8  4001180       28 &#8230;se+KeysCollection  0 instance 0000000000000000 _keys</p>

<p>000007fef7b66840  4001181       30 &#8230;SerializationInfo  0 instance 0000000000000000 _serializationInfo</p>

<p>000007fef7b7ecf0  4001182       40         System.Int32  1 instance                3 _version</p>

<p>000007fef7b77370  4001183       38        System.Object  0 instance 0000000000000000 _syncRoot</p>

<p>000007fef7bbd028  4001184      a70 &#8230;em.StringComparer  0   shared           static defaultComparer</p>

<blockquote>
<blockquote>
<p>Domain:Value  00000000010e2690:NotInit  0000000002e0a0a0:00000000ffae8cb8 &lt;&lt;</p>
</blockquote>
</blockquote>

<p>000007fef7b76c50  4001f67       45       System.Boolean  1 instance                1 _dirty</p>

<p>000007fef4108b20  4001f68       48 &#8230;n+KeyedCollection  0 instance 0000000000000000 _serializedItems</p>

<p>000007fef7b7aa30  4001f69       50     System.IO.Stream  0 instance 0000000000000000 _stream</p>

<p>000007fef7b7ecf0  4001f6a       60         System.Int32  1 instance                0 _iLastOffset</p>

<p>000007fef7b77370  4001f6b       58        System.Object  0 instance 000000013fe20818 _serializedItemsLock</p>

<p>000007fef7b7f3d8  4001f66     18e0 &#8230;ections.Hashtable  0   shared           static s_immutableTypes</p>

<blockquote>
<blockquote>
<p>Domain:Value  00000000010e2690:NotInit  0000000002e0a0a0:000000013fe204c8 &lt;&lt;</p>
</blockquote>
</blockquote>
</blockquote>

<p>Next field that we are interested in is &#8220;_entriesArray&#8221; which is in the 8th offset in x64. To dump its contents here is the command !do</p>

<p>poi(poi(poi(000000013fe20c30+8)+10)+8) which is equal to poi(poi(poi(${$obj}+@$t9)+@$t6)+@$t9</p>

<blockquote>
<p>0:022&gt; !do poi(poi(poi(000000013fe20c30+8)+10)+8)</p>

<p>Name: System.Collections.ArrayList</p>

<p>MethodTable: 000007fef7b7e968</p>

<p>EEClass: 000007fef7781ee0</p>

<p>Size: 40(0x28) bytes</p>

<p>(C:WindowsassemblyGAC_64mscorlib2.0.0.0__b77a5c561934e089mscorlib.dll)</p>

<p>Fields:</p>

<p>MT    Field   Offset                 Type VT     Attr            Value Name</p>

<p>000007fef7b65870  400094c       <span style="color:#ff0000;"><strong> 8      System.Object[]  0 instance 000000013fe3ddb8 _items</strong></span></p>

<p>000007fef7b7ecf0  400094d       18         System.Int32  1 instance                2 _size</p>

<p>000007fef7b7ecf0  400094e       1c         System.Int32  1 instance                2 _version</p>

<p>000007fef7b77370  400094f       10        System.Object  0 instance 0000000000000000 _syncRoot</p>

<p>000007fef7b65870  4000950      388      System.Object[]  0   shared           static emptyArray</p>

<blockquote>
<blockquote>
<p>Domain:Value  00000000010e2690:00000000ffac6110 0000000002e0a0a0:00000000ffad19e0 &lt;&lt;</p>
</blockquote>
</blockquote>
</blockquote>

<p>The next field we are interested  is &#8220;_items&#8221; which is in the 8th offset in x64. Notice &#8220;_items&#8221; is an array and cannot be dumped using !dumpobj or !do. So this command “r$t5 = poi(poi(poi(poi(${$obj}+@$t9)+@$t6)+@$t9)+@$t9)&#8221; will set the array pointer to$t5.</p>

<p>Now that we have array containing the session items, we could have used !da to</p>

<p>dump the array contents with details using !da -details poi(poi(poi(poi(000000013fe20c30+8)+10)+8)+8)</p>

<blockquote>
<p>0:022&gt; !da -details poi(poi(poi(poi(000000013fe20c30+8)+10)+8)+8)</p>

<p>Name: System.Object[]</p>

<p>MethodTable: 000007fef7b65870</p>

<p>EEClass: 000007fef777eb58</p>

<p>Size: 64(0x40) bytes</p>

<p>Array: Rank 1, Number of elements 4, Type CLASS</p>

<p>Element Methodtable: 000007fef7b77370</p>

<p>[0] 000000013fe3dd98</p>

<p>Name: System.Collections.Specialized.NameObjectCollectionBase+NameObjectEntry</p>

<p>MethodTable: 000007fef6f6f938</p>

<p>EEClass: 000007fef6ce90b0</p>

<p>Size: 32(0x20) bytes</p>

<p>(C:WindowsassemblyGAC_MSILSystem2.0.0.0__b77a5c561934e089System.dll)</p>

<p>Fields:</p>

<p>MT    Field   Offset                 Type VT     Attr            Value Name</p>

<p>000007fef7b77a80  4001185        <span style="color:#ff0000;"><strong>8        System.String  0 instance 000000013fe3dcf8 Key</strong></span></p>

<p>000007fef7b77370  4001186       <span style="color:#ff0000;"><strong>10        System.Object  0 instance 000000013fe3dd20 Value</strong></span></p>

<p><a href="http://blogs.msdn.com/b/tess/archive/2007/09/18/debugging-script-dumping-out-asp-net-session-contents.aspx">1</a> 000000013fe3ddf8</p>

<p>Name: System.Collections.Specialized.NameObjectCollectionBase+NameObjectEntry</p>

<p>MethodTable: 000007fef6f6f938</p>

<p>EEClass: 000007fef6ce90b0</p>

<p>Size: 32(0x20) bytes</p>

<p>(C:WindowsassemblyGAC_MSILSystem2.0.0.0__b77a5c561934e089System.dll)</p>

<p>Fields:</p>

<p>MT    Field   Offset                 Type VT     Attr            Value Name</p>

<p>000007fef7b77a80  4001185        8        System.String  0 instance 000000013fe3dd48 Key</p>

<p>000007fef7b77370  4001186       10        System.Object  0 instance 000000013fe3dd70 Value</p>

<p><a href="http://naveensrinivasan.com/2010/06/24/custom-dumparray-windbg/">2</a> null</p>

<p>[3] null</p>
</blockquote>

<p>But notice it does not help much because we still cannot see the actual key and value. That is the reason for using a nested &#8220;.for&#8221; loop in the script which will iterate through the array contents. FYI @$t5 contains reference to the array.</p>

<p>The statement  &#8220;.for (r $t0=0; @$t0 &lt; poi(@$t5+@$t9); r$t0=@$t0+1 )&#8221;  is standard for loop with one thing that is special which is poi(@$t5+@$t9).  The poi(@$t5+@$t9) contains the reference to the size of the array. How do I know that? The answer is dd poi(poi(poi(poi(000000013fe20c30+8)+10)+8)+8)</p>

<blockquote>
<p>0:022&gt; dd poi(poi(poi(poi(000000013fe20c30+8)+10)+8)+8)</p>

<p>00000001`3fe3ddb8  f7b65870 000007fe <span style="color:#ff0000;"><strong>00000004</strong></span> 00000000</p>

<p>00000001`3fe3ddc8  f7b77370 000007fe 3fe3dd98 00000001</p>

<p>00000001`3fe3ddd8  3fe3ddf8 00000001 00000000 00000000</p>

<p>00000001`3fe3dde8  00000000 00000000 00000000 00000000</p>

<p>00000001`3fe3ddf8  f6f6f938 000007fe 3fe3dd48 00000001</p>

<p>00000001`3fe3de08  3fe3dd70 00000001 00000000 00000000</p>

<p>00000001`3fe3de18  f7b77370 000007fe 00000000 00000000</p>

<p>00000001`3fe3de28  00000000 80000000 f7b77a80 000007fe</p>
</blockquote>

<p>Notice the 8th offset value is 00000004 which is the size of the array and for</p>

<p>more information look at the post on custom dump array]<a href="http://naveensrinivasan.com/2010/06/24/custom-dumparray-windbg/">2</a></p>

<p>The first element in the array  would be in the 20th offset in x64 and 10th</p>

<p>offset in x86 and that is the reason for the &#8220;.if(@$t0=0)&#8221;</p>

<blockquote>
<p>.if(@$t0 = 0)</p>

<p>{</p>

<p>$$ First occurence of the element in the array would be in the 20 offset for x64 and 10 offset for x86</p>

<p>r$t1=@$t7</p>

<p>}</p>
</blockquote>

<p>So the first time the value @$t1 would be 20. And the rest of the elements would be in the 8th offset in x64 and 4th offset inx86</p>

<blockquote>
<p>.else</p>

<p>{</p>

<p>$$ the rest of the elements would be in the 8th offset for x64 and 4th offset for x86</p>

<p>r$t1= @$t7+(@$t0*@$t9)</p>

<p>}</p>
</blockquote>

<p>So the second time it would be 20+(1*8) = @$t7+(@$t0*@$t9) which will be 28th offset.</p>

<p>The next statement &#8220;.if (poi((@$t5-@$t9)+@$t1) = 0 )&#8221; is null check , this would avoid dumping an object which has not be initialized. This is because not all elements in the array could have been initialized.</p>

<p>The !ds poi(poi((@$t5-@$t9)+@$t1)+@$t9) gets the session key which is in the 8th offset (look at the previous output from dumparray) and the !ds poi(poi((@$t5-@$t9)+@$t1)+@$t6) gets the session value which is in the 10th offset.</p>

<p>Here is my initial x64 specific script that I wrote.</p>

<p>[sourcecode]</p>

<p>foreach ($obj {!dumpheap -mt ${$arg1} -short})</p>

<p>{</p>

<p>$$ The !dumpheap -short option has last result as &#8212;&#8212;&#8212;&#8212;&#8212; and</p>

<p>$$ this .if is to avoid this</p>

<p>.if ($spat (&ldquo;${$obj}&rdquo;,&rdquo;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&rdquo;))</p>

<p>{}</p>

<p>.else</p>

<p>{</p>

<p>$$ $t5 contains reference to the array which has key and value for the</p>

<p>$$ session contents</p>

<p>r$t5 = poi(poi(poi(poi(${$obj}+0x8)+0x10)+0x8)+0x8);</p>

<p>r$t1 = 0</p>

<p>.for (r $t0=0; @$t0 &lt; poi(@$t5+0x8); r$t0=@$t0+1 )</p>

<p>{</p>

<p>.if(@$t0 = 0)</p>

<p>{</p>

<p>$$ First occurrence of the element in the array would be in the 20 offset</p>

<p>r$t1=20</p>

<p>}</p>

<p>.else</p>

<p>{</p>

<p>$$ the rest of the elements would be in the 8th offset</p>

<p>r$t1= 20+(@$t0*8)</p>

<p>};</p>

<p>$$ Check for null before trying to dump</p>

<p>.if (poi((@$t5-0x8)+@$t1) = 0 )</p>

<p>{</p>

<p>.continue</p>

<p>}</p>

<p>.else</p>

<p>{</p>

<p>.echo *<strong>*</strong>*<strong>*</strong>;</p>

<p>? @$t0</p>

<p>$$ Session Key</p>

<p>.printf &ldquo;Session Key is :- &ldquo;; !ds poi(poi((@$t5-0x8)+@$t1)+0x8);</p>

<p>$$ Session value</p>

<p>.printf &ldquo;Session value is :- &ldquo;;!ds poi(poi((@$t5-0x8)+@$t1)+0x10)</p>

<p>}</p>

<p>}</p>

<p>}</p>

<p>}</p>

<p>[/sourcecode]</p>

<p>I had fun writing this script. Let me know if there is a better way to write this.</p>
]]></content>
        </item>
        
        <item>
            <title>GC Start and Stop events in .NET using Windbg</title>
            <link>/p1064/</link>
            <pubDate>Wed, 08 Sep 2010 01:55:27 +0000</pubDate>
            
            <guid>/p1064/</guid>
            <description>I was recently showing someone the new ETW features in .NET especially the GC Event notification and I was asked if we can get this using Windbg.
So here is the sample code for the GC Collection
[sourcecode language=&amp;#8221;csharp&amp;#8221;]
namespace GCStartStop
{
public partial class Form1 : Form
{
public Form1()
{
InitializeComponent();
button1.Click += (s, b) =&amp;gt; GC.Collect(2);
button1.Click += (s, b) =&amp;gt; GC.Collect(1);
}
}
}
[/sourcecode]
The goal is set to a break-point only when the collection count is 2.</description>
            <content type="html"><![CDATA[<p>I was recently showing someone the new ETW features in .NET especially the <a href="http://msdn.microsoft.com/en-us/library/ff356162.aspx">GC Event notification</a> and I was asked if we can get this using Windbg.</p>

<p>So here is the sample code for the GC Collection</p>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>namespace GCStartStop</p>

<p>{</p>

<p>public partial class Form1 : Form</p>

<p>{</p>

<p>public Form1()</p>

<p>{</p>

<p>InitializeComponent();</p>

<p>button1.Click += (s, b) =&gt; GC.Collect(2);</p>

<p>button1.Click += (s, b) =&gt; GC.Collect(1);</p>

<p>}</p>

<p>}</p>

<p>}</p>

<p>[/sourcecode]</p>

<p>The goal is set to a break-point only when the collection count is 2. Here is a bp script for doing this.</p>

<p>[sourcecode]</p>

<p>bp clr!WKS::GCHeap::SuspendEE &ldquo;.if (dwo(clr!WKS::GCHeap::GcCondemnedGeneration)==2) {.echo start of gen 2;g} .else {gc}&rdquo;</p>

<p>[/sourcecode]</p>

<p>The same thing can be done for clr!WKS::GCHeap::RestartEE.</p>

<p>When showing this to someone I was asked what does &#8220;EE&#8221; acronym in &#8220;SuspendedEE&#8221; ?  &#8220;EE&#8221; is  Execution Engine.</p>
]]></content>
        </item>
        
        <item>
            <title>Get GC Information in Silverlight</title>
            <link>/p1050/</link>
            <pubDate>Wed, 11 Aug 2010 02:32:52 +0000</pubDate>
            
            <guid>/p1050/</guid>
            <description>I had earlier written a post on getting GC information on Silverlight using ETW. With that we would have to write code to parse the ETW csv file. In this post I am going to be using Perfmonitor to do this. This tools uses the same ETW under covers, but it does all the plumbing and gives a nice report , which is much easier to read. Here are the reports</description>
            <content type="html"><![CDATA[<p>I had earlier written a <a href="http://naveensrinivasan.com/2010/03/21/get-gc-information-in-silverlight-using-etw/">post</a> on getting GC information on Silverlight using ETW. With that we would have to write code to parse the ETW csv file.  In this post I am going to be using <a href="http://bcl.codeplex.com/wikipage?title=PerfMonitor&amp;referringTitle=Home">Perfmonitor</a> to do this. This tools uses the same ETW under covers, but it does all the plumbing and gives a nice report , which is much easier to read.  Here are the reports</p>

<p><a href="http://104.197.135.42/wp-content/uploads/2010/08/gc1.jpg"><img class="alignnone size-full wp-image-1051" title="GC" src="http://104.197.135.42/wp-content/uploads/2010/08/gc1.jpg" alt="" width="700" height="222" /></a></p>

<p><a href="http://104.197.135.42/wp-content/uploads/2010/08/gc-12.jpg"><img class="alignnone size-full wp-image-1052" title="GC-1" src="http://104.197.135.42/wp-content/uploads/2010/08/gc-12.jpg" alt="" width="700" height="308" /></a></p>

<p>To demonstrate this I used the bing’s world leader search page and here is the url</p>

<p><a href="http://www.bing.com/visualsearch?q=World+leaders&amp;g=world_leaders&amp;FORM=Z9GE74#">http://www.bing.com/visualsearch?q=World+leaders&amp;g=world_leaders&amp;FORM=Z9GE74#</a></p>

<p>Steps to get the GC information are</p>

<ol>
<li>Start a cmd or powershell  as admin , this required to collect ETW tracing</li>
<li>Browse the above mentioned webpage using IE</li>
<li>Issue the command “PerfMonitor.exe /process:4180 start” where 4180 is the internet explorer’s process id</li>
<li>Do the necessary actions</li>
<li>Then issue “PerfMonitor.exe stop”</li>
<li>The command to get the report “PerfMonitor.exe GCTime”. This will generate a report and open it in the browser</li>
</ol>

<p>Perfmonitor is like xperf for managed code. This is non-intrusive and can collect some valuable information in production. This is an xcopy tool and does not need an install.</p>
]]></content>
        </item>
        
        <item>
            <title>Script to load sos within Windbg based on .NET Framework version</title>
            <link>/p1032/</link>
            <pubDate>Mon, 26 Jul 2010 04:33:21 +0000</pubDate>
            
            <guid>/p1032/</guid>
            <description>I often debug .NET Framework v 2.0 / v 4.0 code within windbg. In v 2.0 the main clr dll was called &amp;#8220;mscorwks.dll&amp;#8221; and in v 4.0 it is called &amp;#8220;clr.dll&amp;#8221;. As many of you are aware , to load sos in v 2.0 we would have to enter &amp;#8220;.loadby sos mscorwks&amp;#8221; and in v 4.0 it would be &amp;#8220;.loadby sos clr&amp;#8221; . This was a pain for me. Came up with a script to automate loading sos based on clr version</description>
            <content type="html"><![CDATA[<p>I often debug  .NET Framework v 2.0 / v 4.0 code within windbg. In v 2.0 the main clr dll was called &#8220;mscorwks.dll&#8221; and in v 4.0 it is called &#8220;clr.dll&#8221;.  As many of you are aware , to load sos in v 2.0 we would have to enter &#8220;.loadby sos mscorwks&#8221; and in v 4.0 it would be &#8220;.loadby sos clr&#8221; . This was a pain for me. Came up with a script to automate loading sos based on clr version</p>

<p>[sourcecode]</p>

<p>!for_each_module .if(($sicmp( &ldquo;@#ModuleName&rdquo; , &ldquo;mscorwks&rdquo;) = 0) ) {.loadby sos mscorwks} .elsif ($sicmp( &ldquo;@#ModuleName&rdquo; , &ldquo;clr&rdquo;) = 0) {.loadby sos clr}</p>

<p>[/sourcecode]</p>

<p>You can take it up a notch by setting a break-point within clr based on the .NET Framework version</p>

<p>[sourcecode]</p>

<p>!for_each_module .if(($sicmp( &ldquo;@#ModuleName&rdquo; , &ldquo;mscorwks&rdquo;) = 0) ) {bp mscorwks!WKS::GCHeap::SuspendEE &ldquo;.if (dwo(mscorwks!WKS::GCHeap::GcCondemnedGeneration)==2) {.echo start of gen 2}&ldquo;} .elsif ($sicmp( &ldquo;@#ModuleName&rdquo; , &ldquo;clr&rdquo;) = 0) {bp clr!WKS::GCHeap::SuspendEE &ldquo;.if (dwo(clr!WKS::GCHeap::GcCondemnedGeneration)==2) {.echo start of gen 2}&ldquo;}</p>

<p>[/sourcecode]</p>
]]></content>
        </item>
        
        <item>
            <title>Debugging .NET – mystery between DEBUG versus RELEASE within windbg</title>
            <link>/p1015/</link>
            <pubDate>Thu, 22 Jul 2010 02:48:17 +0000</pubDate>
            
            <guid>/p1015/</guid>
            <description>I am sure most of us have debugged applications that are build with debug turned on, which is obviously much easier compared to debugging release build (optimized code). In this post I am going to share one of my experiences of debugging release build code. I will demonstrate this with a simple Console Application.
Here is the code
[sourcecode language=&amp;#8221;csharp&amp;#8221;]
using System;
namespace ConsoleApplication
{
class Program
{
static void Main(string[] args)</description>
            <content type="html"><![CDATA[<p>I am sure most of us have debugged applications that are build with debug turned on, which is obviously much easier compared to debugging release build (optimized code). In this post I am going to share one of my experiences of debugging release build code. I will demonstrate this with a simple Console Application.</p>

<p>Here is the code</p>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>using System;</p>

<p>namespace ConsoleApplication</p>

<p>{</p>

<p>class Program</p>

<p>{</p>

<p>static void Main(string[] args)</p>

<p>{</p>

<p>var x = 10;</p>

<p>var name = &ldquo;naveen&rdquo;;</p>

<p>Console.WriteLine(name);</p>

<p>Console.Read();</p>

<p>}</p>

<p>}</p>

<p>}</p>

<p>[/sourcecode]</p>

<p>I compiled it under release mode and launched it within the debugger. The goal is to have a break-point on Console.WriteLine(name). First thing was to set up a sx notification on load for mscorlib.</p>

<p>[sourcecode]</p>

<p>sxe ld:mscorlib</p>

<p>[/sourcecode]</p>

<p>And when the break-point hits for the above event, then issued the following command to load sosex , sos and set an bp on Console.WriteLine which is nothing fancy</p>

<p>[sourcecode]</p>

<p>.load sosex;.loadby sos clr;!mbm *System.Console.WriteLine* &ldquo;!mk&rdquo;;g</p>

<p>[/sourcecode]</p>

<p>I would imagine that the break-point would hit and I would get a call-stack, but to my surprise this was the output</p>

<blockquote>
<p>0:000&gt; .load sosex;.loadby sos clr;!mbm *System.Console.WriteLine* &#8220;!mk&#8221;;g</p>

<p>The breakpoint could not be resolved immediately.</p>

<p>Further attempts will be made as modules are loaded.</p>

<p>(1090.11fc): CLR notification exception &#8211; code e0444143 (first chance)</p>

<p>Breakpoint set at System.Console.WriteLine().</p>

<p>Breakpoint set at System.Console.WriteLine(Boolean).</p>

<p>Breakpoint set at System.Console.WriteLine(Char).</p>

<p>Breakpoint set at System.Console.WriteLine(Char[]).</p>

<p>Breakpoint set at System.Console.WriteLine(Char[], Int32, Int32).</p>

<p>Breakpoint set at System.Console.WriteLine(System.Decimal).</p>

<p>Breakpoint set at System.Console.WriteLine(Double).</p>

<p>Breakpoint set at System.Console.WriteLine(Single).</p>

<p>Breakpoint set at System.Console.WriteLine(Int32).</p>

<p>Breakpoint set at System.Console.WriteLine(UInt32).</p>

<p>Breakpoint set at System.Console.WriteLine(Int64).</p>

<p>Breakpoint set at System.Console.WriteLine(UInt64).</p>

<p>Breakpoint set at System.Console.WriteLine(System.Object).</p>

<p>Breakpoint set at System.Console.WriteLine(System.String).</p>

<p>Breakpoint set at System.Console.WriteLine(System.String, System.Object).</p>

<p>Breakpoint set at System.Console.WriteLine(System.String, System.Object, System.Object).</p>

<p>Breakpoint set at System.Console.WriteLine(System.String, System.Object, System.Object, System.Object).</p>

<p>Breakpoint set at System.Console.WriteLine(System.String, System.Object, System.Object, System.Object, System.Object, &#8230;).</p>

<p>Breakpoint set at System.Console.WriteLine(System.String, System.Object[]).</p>

<p>(1090.11fc): CLR notification exception &#8211; code e0444143 (first chance)</p>
</blockquote>

<p>That&#8217;s it. And I never got an hit for the break-point. I checked to make sure there was an actual breakpoint set by issuing a &#8220;bl&#8221; command. I could see there were break-points for Console.WriteLine. The next step was to  disassemble the code. So got the instruction pointer from the !mk call-stack. Here is the output of !mk. FYI this is when the code is blocked on Console.Read</p>

<blockquote>
<p>00:U 003def90 75d273ea KERNEL32!ReadConsoleInternal+0x15</p>

<p>01:U 003def98 75d27041 KERNEL32!ReadConsoleA+0x40</p>

<p>02:U 003df020 75caf489 KERNEL32!ReadFileImplementation+0x75</p>

<p>03:M 003df068 65651c8b DomainNeutralILStubClass.IL_STUB_PInvoke(Microsoft.Win32.SafeHandles.SafeFileHandle, Byte*, Int32, Int32 ByRef, IntPtr)(+0x0 IL)(+0x0 Native)</p>

<p>04:M 003df0e8 65cbf7e8 System.IO.__ConsoleStream.ReadFileNative(Microsoft.Win32.SafeHandles.SafeFileHandle, Byte[], Int32, Int32, Int32, Int32 ByRef)(+0x53 IL)(+0x8c Native) [f:ddndpclrsrcBCLSystemIO__ConsoleStream.cs, @ 16707566,0]</p>

<p>05:M 003df110 65cbf6d0 System.IO.__ConsoleStream.Read(Byte[], Int32, Int32)(+0x5d IL)(+0x9c Native) [f:ddndpclrsrcBCLSystemIO__ConsoleStream.cs, @ 131,13]</p>

<p>06:M 003df138 65608bfb System.IO.StreamReader.ReadBuffer()(+0xa0 IL)(+0x3b Native) [f:ddndpclrsrcBCLSystemIOStreamReader.cs, @ 488,21]</p>

<p>07:M 003df154 65bcacc3 System.IO.StreamReader.Read()(+0x1b IL)(+0x23 Native) [f:ddndpclrsrcBCLSystemIOStreamReader.cs, @ 302,17]</p>

<p>08:M 003df160 65cc5e9d System.IO.TextReader+SyncTextReader.Read()(+0x0 IL)(+0x19 Native) [f:ddndpclrsrcBCLSystemIOTextReader.cs, @ 244,17]</p>

<p>09:M 003df170 <span style="background-color:#ffff00;">0066009a</span> *** WARNING: Unable to verify checksum for ConsoleApplication.exe</p>

<p>ConsoleApplication.Program.Main(System.String[])(+0x0 IL)(+0x2a Native) [c:UsersnaveenDocumentsVisual Studio 2010ProjectsConsoleApplication11Program.cs, @ 10,13]</p>

<p>0a:U 003df17c 661621db clr!CallDescrWorker+0x33</p>
</blockquote>

<p>Next disassemble Main Method using the ip which is 0066009a</p>

<p>[sourcecode]</p>

<p>!u 0066009a</p>

<p>[/sourcecode]</p>

<p>Here is the output</p>

<blockquote>
<p>0:000&gt; !u 0066009a</p>

<p>Normal JIT generated code</p>

<p>ConsoleApplication.Program.Main(System.String[])</p>

<p>Begin 00660070, size 2d</p>

<p>c:UsersnaveenDocumentsVisual Studio 2010ProjectsConsoleApplication11Program.cs @ 10:</p>

<p>00660070 55 push ebp</p>

<p>00660071 8bec mov ebp,esp</p>

<p>00660073 56 push esi</p>

<p>00660074 8b3530206b03 mov esi,dword ptr ds:[36B2030h] (&#8220;naveen&#8221;)</p>

<p>c:UsersnaveenDocumentsVisual Studio 2010ProjectsConsoleApplication11Program.cs @ 11:</p>

<p>0066007a e85170f864 call mscorlib_ni+0x2570d0 (655e70d0) (<span style="background-color:#ffff00;">System.Console.get_Out()</span>, mdToken: 060008cd)</p>

<p>0066007f 8bc8 mov ecx,eax</p>

<p>00660081 8bd6 mov edx,esi</p>

<p>00660083 8b01 mov eax,dword ptr [ecx]</p>

<p>00660085 8b403c mov eax,dword ptr [eax+3Ch]</p>

<p>00660088 ff5010 call dword ptr [eax+10h]</p>

<p>0066008b e8f0a55565 call mscorlib_ni+0x82a680 (65bba680) (System.Console.get_In(), mdToken: 060008cc)</p>

<p>00660090 8bc8 mov ecx,eax</p>

<p>00660092 8b01 mov eax,dword ptr [ecx]</p>

<p>00660094 8b402c mov eax,dword ptr [eax+2Ch]</p>

<p>00660097 ff500c call dword ptr [eax+0Ch]</p>

<p>c:UsersnaveenDocumentsVisual Studio 2010ProjectsConsoleApplication11Program.cs @ 13:</p>

<blockquote>
<blockquote>
<blockquote>
<p>0066009a 5e pop esi</p>
</blockquote>
</blockquote>
</blockquote>

<p>0066009b 5d pop ebp</p>

<p>0066009c c3 ret</p>
</blockquote>

<p>And I see System.Console.get_Out instead of System.Console.WriteLine which I was totally surprised. This was  the reason the break-point never hit. Next I wanted check the IL which was compiled , what we see above is jitted x86 mixed with IL. Here is the command to check the compiled IL. First I had to get the methodesc from the ip using !ip2md</p>

<p>[sourcecode]</p>

<p>!ip2md 0066009a</p>

<p>[/sourcecode]</p>

<blockquote>
<p>0:000&gt; !ip2md 0066009a</p>

<p>MethodDesc: <span style="background-color:#ffff00;">002237f0</span></p>

<p>Method Name: ConsoleApplication.Program.Main(System.String[])</p>

<p>Class: 002213f8</p>

<p>MethodTable: 00223804</p>

<p>mdToken: 06000001</p>

<p>Module: 00222e9c</p>

<p>IsJitted: yes</p>

<p>CodeAddr: 00660070</p>

<p>Transparency: Critical</p>

<p>Source file: c:UsersnaveenDocumentsVisual Studio 2010ProjectsConsoleApplication11Program.cs @ 13</p>
</blockquote>

<p>Here is from the methoddesc to IL</p>

<p>[sourcecode]</p>

<p>!dumpil 002237f0</p>

<p>[/sourcecode]</p>

<blockquote>
<p>0:000&gt; !dumpil 002237f0</p>

<p>ilAddr = 012a2050</p>

<p>IL_0000: ldstr &#8220;naveen&#8221;</p>

<p>IL_0005: stloc.0</p>

<p>IL_0006: ldloc.0</p>

<p>IL_0007: call System.Console::WriteLine</p>

<p>IL_000c: call System.Console::Read</p>

<p>IL_0011: pop</p>

<p>IL_0012: ret</p>
</blockquote>

<p>Which looks very similar to my C# code. So looks like CLR optimized the code ,converted the Console.WriteLine to Console.get_Out. To validate it restarted the app with this as the command for break-point</p>

<p>[sourcecode]</p>

<p>.load sosex;.loadby sos clr;!mbm *System.Console.get_Out* &ldquo;!mk&rdquo;;g</p>

<p>[/sourcecode]</p>

<p>And here is the output</p>

<blockquote>
<p>00:M 0032ed58 655e70d1 <span style="background-color:#ffff00;">System.Console.get_Out()</span>(+0x0 IL)(+0x1 Native) [f:ddndpclrsrcBCLSystemConsole.cs, @ 193,17]</p>

<p>01:M 0032ed60 003a007f *** WARNING: Unable to verify checksum for ConsoleApplication.exe</p>

<p>ConsoleApplication.Program.Main(System.String[])(+0x6 IL)(+0xf Native) [c:UsersnaveenDocumentsVisual Studio 2010ProjectsConsoleApplication11Program.cs, @ 11,13]</p>

<p>02:U 0032ed6c 661621db clr!CallDescrWorker+0x33</p>
</blockquote>

<p>Now that I have solved this I wanted to check the same on the debug build (optimized -) . To validate if it was Console.get_Out or Console.WriteLine. So when mscorlib loaded here was my command to check this</p>

<p>[sourcecode]</p>

<p>.load sosex;.loadby sos clr;!mbm *Program.Main* &ldquo;!u @eip&rdquo;;g</p>

<p>[/sourcecode]</p>

<p>In the above command I am setting a break-point on Main method and when the break-point hits &#8220;!u @eip&#8221; will disassemble the ip, the @eip register will have the address of the current function. Here is the output from !u @eip</p>

<blockquote>
<p>*** WARNING: Unable to verify checksum for ConsoleApplication11.exe</p>

<p>c:usersnaveendocumentsvisual studio 2010ProjectsConsoleApplication11Program.cs @ 11:</p>

<p>01f10070 55 push ebp</p>

<p>01f10071 8bec mov ebp,esp</p>

<p>01f10073 83ec0c sub esp,0Ch</p>

<p>01f10076 894dfc mov dword ptr [ebp-4],ecx</p>

<p>01f10079 833d3c31360000 cmp dword ptr ds:[36313Ch],0</p>

<p>01f10080 7405 je 01f10087</p>

<p>01f10082 e8c85a5064 call clr!JIT_DbgIsJustMyCode (66415b4f)</p>

<p>01f10087 33d2 xor edx,edx</p>

<p>01f10089 8955f4 mov dword ptr [ebp-0Ch],edx</p>

<p>01f1008c 33d2 xor edx,edx</p>

<p>01f1008e 8955f8 mov dword ptr [ebp-8],edx</p>

<blockquote>
<blockquote>
<blockquote>
<p>01f10091 90 nop</p>
</blockquote>
</blockquote>
</blockquote>

<p>c:usersnaveendocumentsvisual studio 2010ProjectsConsoleApplication11Program.cs @ 12:</p>

<p>01f10092 c745f80a000000 mov dword ptr [ebp-8],0Ah</p>

<p>c:usersnaveendocumentsvisual studio 2010ProjectsConsoleApplication11Program.cs @ 13:</p>

<p>01f10099 8b0530200f03 mov eax,dword ptr ds:[30F2030h] (&#8220;naveen&#8221;)</p>

<p>01f1009f 8945f4 mov dword ptr [ebp-0Ch],eax</p>

<p>c:usersnaveendocumentsvisual studio 2010ProjectsConsoleApplication11Program.cs @ 14:</p>

<p>01f100a2 8b4df4 mov ecx,dword ptr [ebp-0Ch]</p>

<p>*** WARNING: Unable to verify checksum for C:WindowsassemblyNativeImages_v4.0.30319_32mscorlib246f1a5abb686b9dcdf22d3505b08ceamscorlib.ni.dll</p>

<p>01f100a5 e802706d63 call mscorlib_ni+0x2570ac (655e70ac) (<span style="background-color:#ffff00;">System.Console.WriteLine(System.String) </span>, mdToken: 06000919)</p>

<p>01f100aa 90 nop</p>

<p>c:usersnaveendocumentsvisual studio 2010ProjectsConsoleApplication11Program.cs @ 15:</p>

<p>01f100ab e8b4c1ca63 call mscorlib_ni+0x82c264 (65bbc264) (System.Console.Read(), mdToken: 0600090a)</p>

<p>01f100b0 90 nop</p>

<p>c:usersnaveendocumentsvisual studio 2010ProjectsConsoleApplication11Program.cs @ 17:</p>

<p>01f100b1 90 nop</p>

<p>01f100b2 8be5 mov esp,ebp</p>

<p>01f100b4 5d pop ebp</p>

<p>01f100b5 c3 ret</p>

<p>eax=003637f0 ebx=00000000 ecx=020fbc7c edx=00000000 esi=004bb2d0 edi=0016f400</p>

<p>eip=01f10091 esp=0016f3c8 ebp=0016f3d4 iopl=0 nv up ei pl zr na pe nc</p>

<p>cs=0023 ss=002b ds=002b es=002b fs=0053 gs=002b efl=00000246</p>

<p>01f10091 90 nop</p>
</blockquote>

<p>Notice in the above code it is Console.WriteLine and not Console.get_Out.</p>

<p>Here is one of gotchas of debugging optimized code.</p>
]]></content>
        </item>
        
        <item>
            <title>Using F# to Automate Reading–The Morning Brew</title>
            <link>/p997/</link>
            <pubDate>Fri, 16 Jul 2010 04:27:24 +0000</pubDate>
            
            <guid>/p997/</guid>
            <description>I guess most of the .NET Devs read The Morning Brew, if not you should. It is a morning newspaper for the dev, so I end up reading it first thing when I go to work. I like to try and automate most of the stuff . So I thought why not write a script that reads the Morning Brew feed, filter the excluded content that I am not interested in and open the urls before I come in.</description>
            <content type="html"><![CDATA[<p>I guess most of the .NET Devs read <a href="http://blog.cwa.me.uk/">The Morning Brew</a>, if not you should.  It is a morning newspaper for the dev, so I end up reading it first thing when I go to work. I like to  try and automate most of the stuff . So I thought why not write a script that reads the Morning Brew feed, filter the excluded content that I am not interested in and open the urls before I come in. The reason behind using F# is I don’t have to compile the code. I could use it with FSI.exe. Incase if the extraction logic changes and I don’t have to recompile , it is just fixing the script. The best part of writing in F# is I avoid all the ceremony. Here is the F# code, it is nothing fancy. And this code can easily be modified for other link collection sites.</p>

<p>[sourcecode]</p>

<p>#r @&ldquo;C:WindowsMicrosoft.NETFrameworkv4.0.30319System.ServiceModel.dll&rdquo;</p>

<p>#r @&ldquo;C:WindowsMicrosoft.NETFrameworkv4.0.30319System.Xml.Linq.dll&rdquo;</p>

<p>open System.IO</p>

<p>open System.ServiceModel.Syndication</p>

<p>open System.Web</p>

<p>open System.Xml</p>

<p>open System.Xml.Linq</p>

<p>open System.Diagnostics</p>

<p>let formatter = new Rss20FeedFormatter()</p>

<p>let sw = new StringWriter();</p>

<p>// Excluded Keywords</p>

<p>let exists (item:string) = File.ReadAllLines @&ldquo;c:Usersnaveenexclude.txt&rdquo; |&gt;</p>

<p>Seq.exists(fun e -&gt; item.ToLower().Contains(e.ToLower()))</p>

<p>formatter.ReadFrom(XmlReader.Create &ldquo;<a href="http://feeds.feedburner.com/ReflectivePerspective&quot;">http://feeds.feedburner.com/ReflectivePerspective&quot;</a>)</p>

<p>formatter.Feed.Items |&gt; Seq.nth 0 |&gt; fun i -&gt; i.SaveAsRss20(new XmlTextWriter(sw))</p>

<p>let data = HttpUtility.HtmlDecode(sw.ToString())</p>

<p>XDocument.Parse(data).Descendants(XName.Get(&ldquo;li&rdquo;)) |&gt;</p>

<p>Seq.filter(fun i -&gt; not (exists i.Value)) |&gt;</p>

<p>Seq.map(fun i -&gt; i.Descendants(XName.Get(&ldquo;a&rdquo;))) |&gt;</p>

<p>Seq.iter(fun x -&gt; x |&gt; Seq.iter(fun y -&gt;</p>

<p>try</p>

<p>System.Diagnostics.Process.Start (y.Attribute(XName.Get(&ldquo;href&rdquo;)).Value) |&gt; ignore</p>

<p>with</p>

<p>|ex -&gt; printfn &ldquo;Error : %s&rdquo; ex.Message))</p>

<p>[/sourcecode]</p>

<p>My excluded file at the moment contains javascript and jquery. I am not much into these. Here is the command line</p>

<p>[sourcecode]</p>

<p>&ldquo;C:Program Files (x86)Microsoft F#v4.0Fsi.exe&rdquo; &#8211;quiet &#8211;exec &ldquo;C:Usersnaveenmorningbrew.fsx&rdquo;</p>

<p>[/sourcecode]</p>

<p><a href="http://104.197.135.42/wp-content/uploads/2010/07/themorningbrew2.jpg"><img class="alignnone size-full wp-image-1011" title="TheMorningBrew" src="http://104.197.135.42/wp-content/uploads/2010/07/themorningbrew2.jpg" alt="" width="700" height="418" /></a></p>
]]></content>
        </item>
        
        <item>
            <title>Combining Stack Overflow RSS, OData and API to query</title>
            <link>/p978/</link>
            <pubDate>Wed, 14 Jul 2010 03:18:05 +0000</pubDate>
            
            <guid>/p978/</guid>
            <description>In my opinion Stack Overflow has a ton of knowledge to learn new tricks. And there are some really smart people in the SO community. I try and learn new things when I find time.
I subscribe to RSS feeds for new questions on a particular topic. Example, here is one for F# from Stack Overflow http://stackoverflow.com/feeds/tag/f%23. The advantage of the RSS feed is I get to see new questions, but the drawback is I would have to navigate to the site to look for answers.</description>
            <content type="html"><![CDATA[<p>In my opinion <a href="http://stackoverflow.com/">Stack Overflow</a> has a ton of knowledge to learn new tricks. And there are some really smart people in the SO community. I try and learn new things when I find time.</p>

<p>I subscribe to RSS feeds for new questions on a particular topic. Example, here is one for F# from Stack Overflow <a href="http://stackoverflow.com/feeds/tag/f%23">http://stackoverflow.com/feeds/tag/f%23</a>. The advantage of the RSS feed is I get to see new questions, but the drawback is I would have to navigate to the site to look for answers. AFAIK the <a href="http://stacky.codeplex.com/">stacky</a> (stack overflow API) does not provide a mechanism for querying new questions based on a tag.</p>

<p>It was easy for me to combine both of them to solve my problem. With RSS feed I could discover new questions and with the stacky I could get answers . And I use Linqpad as a scratchpad so it was easy to write-up something quick.</p>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>void Main()</p>

<p>{</p>

<p>var reader = XmlReader.Create(&ldquo;<a href="http://stackoverflow.com/feeds/tag/f%23&quot;">http://stackoverflow.com/feeds/tag/f%23&quot;</a>);</p>

<p>var feed = SyndicationFeed.Load<SyndicationFeed>(reader);</p>

<p>var length = &ldquo;<a href="http://stackoverflow.com/questions/&quot;.Length">http://stackoverflow.com/questions/&quot;.Length</a>;</p>

<p>var client = new StackyClient(&ldquo;1.0&rdquo;, File.ReadAllText(@&ldquo;c:tempso.txt&rdquo;),HostSite.StackOverflow,new UrlClient(), new JsonProtocol());</p>

<p>var feedItems = from item in feed.Items</p>

<p>let nextOccurence = item.Id.ToString().IndexOf(&ldquo;/&rdquo;,length)</p>

<p>let getId = new Func<int>(() =&gt; Convert.ToInt32( item.Id.Substring(length,nextOccurence &#8211; length)))</p>

<p>select new {Id = getId(), Title = item.Title.Text, Body = item.Summary.Text.StripHTML()};</p>

<p>var answers = client.GetQuestionAnswers(feedItems.Select (y =&gt; y.Id),new AnswerOptions() { IncludeBody = true});</p>

<p>// The latest F# feed questions and answers</p>

<p>var qa = from question in feedItems</p>

<p>join answer in answers on question.Id equals answer.QuestionId</p>

<p>where answer.Accepted == true</p>

<p>select new { Title = question.Title, Question = question.Body.StripHTML(), Answer = answer.Body.StripHTML()};</p>

<p>qa.Dump();</p>

<p>}</p>

<p>public static class Extensions</p>

<p>{</p>

<p>public static string StripHTML(this string s)</p>

<p>{</p>

<p>return Regex.Replace(s, @&rdquo;&lt;(.|n)*?&gt;&ldquo;, string.Empty);</p>

<p>}</p>

<p>}</p>

<p>[/sourcecode]</p>

<p><a href="http://104.197.135.42/wp-content/uploads/2010/07/so1.jpg"><img class="alignnone size-full wp-image-981" title="SO" src="http://104.197.135.42/wp-content/uploads/2010/07/so1.jpg" alt="" width="700" height="418" /></a></p>

<p>And if you have been following F# and functional programming then you would probably know <a href="http://tomasp.net/">Tomas</a>. I would also like to read what he has been answering. Again stacky does not provide an API to query user by name. This is where the SO <a href="https://odata.sqlazurelabs.com/OData.svc/v0.1/rp1uiewita/StackOverflow">OData</a> comes in handy and LinqPad handles OData very well. Here is the code to get Tomas user id via OData and query for questions and answers which he has answered using stacky .</p>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>var tomas = Users.Where(u =&gt; u.DisplayName.StartsWith(&ldquo;Tomas Pet&rdquo;)).First().Id;</p>

<p>var tomasQA = from ans in  client.GetUsersAnswers(tomas,new AnswerOptions() { IncludeBody = true })</p>

<p>select new { Title = ans.Title, Question = client.GetQuestion(ans.QuestionId,true,false).Body.StripHTML(),</p>

<p>Answer = ans.Body.StripHTML()};</p>

<p>tomasQA.Dump();</p>

<p>[/sourcecode]</p>
]]></content>
        </item>
        
        <item>
            <title>Load the same Assembly from GAC and private bin path in .NET</title>
            <link>/p966/</link>
            <pubDate>Mon, 12 Jul 2010 21:31:40 +0000</pubDate>
            
            <guid>/p966/</guid>
            <description>This post is all about exploring the CLR loader to load an assembly from GAC and from private bin path. This is not possible because, if an assembly is loaded from GAC and if the code uses Assembly.LoadFrom to load the same assembly, then the loader would return the assembly that has already been loaded from the GAC.
Here is the ClassLibrary2 code
[sourcecode language=&amp;#8221;csharp&amp;#8221;]
using System;
namespace ClassLibrary2
{</description>
            <content type="html"><![CDATA[<p>This post is all about exploring the CLR loader to load an assembly from GAC and from private bin path. This is not possible because, if an assembly is loaded from GAC and if the code uses Assembly.LoadFrom to load the same assembly, then the loader would return the assembly that has already been loaded from the GAC.</p>

<p>Here is the ClassLibrary2 code</p>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>using System;</p>

<p>namespace ClassLibrary2</p>

<p>{</p>

<p>public class Class1</p>

<p>{</p>

<p>public string Bar()</p>

<p>{</p>

<p>return &ldquo;bar&rdquo;;</p>

<p>}</p>

<p>}</p>

<p>}</p>

<p>[/sourcecode]</p>

<p>Here is the Winforms application to load the Class Library Code</p>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>using System;</p>

<p>using System.Reflection;</p>

<p>using System.Windows.Forms;</p>

<p>using ClassLibrary2;</p>

<p>namespace WindowsFormsApplication4</p>

<p>{</p>

<p>public partial class Form1 : Form</p>

<p>{</p>

<p>public Form1()</p>

<p>{</p>

<p>InitializeComponent();</p>

<p>var c = new Class1();</p>

<p>Console.WriteLine(c.Bar());</p>

<p>}</p>

<p>private void button1_Click(object sender, EventArgs e)</p>

<p>{</p>

<p>var  ad = AppDomain.CreateDomain(&ldquo;Test&rdquo;);</p>

<p>ad.AssemblyResolve += ((a1,e1) =&gt; Assembly.LoadFile(@&ldquo;C:UsersnaveenDocumentsVisual Studio 2010ProjectsConsoleApplication9ClassLibrary2binDebugClassLibrary2.dll&rdquo;));</p>

<p>var a = ad.Load(&ldquo;ClassLibrary&rdquo;);</p>

<p>var c1 = a.CreateInstance(&ldquo;ClassLibrary2.Class1&rdquo;) as Class1;</p>

<p>c1.Bar();</p>

<p>}</p>

<p>}</p>

<p>}</p>

<p>[/sourcecode]</p>

<p>If you notice the code creates an instance of the “Class1” in the Form1 constructor, this will essentially load the ClassLibrary2 in to memory. FYI the ClassLibrary2 is GACed when the application launches. Here is the fusglovwr output , which shows the assembly being loaded from GAC.</p>

<blockquote>
<p>LOG: This bind starts in default load context.</p>

<p>LOG: Using application configuration file: C:UsersnaveenDocumentsVisual Studio 2010ProjectsWindowsFormsApplication4binDebugWindowsFormsApplication4.exe.Config</p>

<p>LOG: Using host configuration file:</p>

<p>LOG: Using machine configuration file from C:WindowsMicrosoft.NETFrameworkv4.0.30319configmachine.config.</p>

<p>LOG: Post-policy reference: ClassLibrary2, Version=1.0.0.0, Culture=neutral, PublicKeyToken=3a0a06f4596f3e16</p>

<p>LOG: Found assembly by looking in the GAC.</p>

<p>LOG: Binding succeeds. Returns assembly from C:WindowsMicrosoft.NetassemblyGAC_MSILClassLibrary2v4.0_1.0.0.0__3a0a06f4596f3e16ClassLibrary2.dll.</p>

<p>LOG: Assembly is loaded in default load context.</p>
</blockquote>

<p>After verifying fuslogvwr output , I uninstall the assembly from gac using gacutil /u (without closing the app). After which I click the button1 ,which will call the Assembly.LoadFrom to load the same assembly from private bin path. And here fuslogvwr output of loading the assembly using the load from, notice GAC lookup was unsuccessful.</p>

<blockquote>
<p>LOG: This bind starts in default load context.</p>

<p>LOG: Using application configuration file: C:UsersnaveenDocumentsVisual Studio 2010ProjectsWindowsFormsApplication4binDebugWindowsFormsApplication4.exe.Config</p>

<p>LOG: Using host configuration file:</p>

<p>LOG: Using machine configuration file from C:WindowsMicrosoft.NETFrameworkv4.0.30319configmachine.config.</p>

<p>LOG: Post-policy reference: ClassLibrary2, Version=1.0.0.0, Culture=neutral, PublicKeyToken=3a0a06f4596f3e16</p>

<p>LOG: GAC Lookup was unsuccessful.</p>

<p>LOG: Attempting download of new URL file:///C:/Users/naveen/Documents/Visual Studio 2010/Projects/WindowsFormsApplication4/bin/Debug/ClassLibrary2.DLL.</p>

<p>LOG: Assembly download was successful. Attempting setup of file: C:UsersnaveenDocumentsVisual Studio 2010ProjectsWindowsFormsApplication4binDebugClassLibrary2.dll</p>

<p>LOG: Entering run-from-source setup phase.</p>

<p>LOG: Assembly Name is: ClassLibrary2, Version=1.0.0.0, Culture=neutral, PublicKeyToken=3a0a06f4596f3e16</p>

<p>LOG: Binding succeeds. Returns assembly from C:UsersnaveenDocumentsVisual Studio 2010ProjectsWindowsFormsApplication4binDebugClassLibrary2.dll.</p>

<p>LOG: Assembly is loaded in default load context.</p>
</blockquote>

<p>And here is the !dumpdomain output from windbg for this process</p>

<blockquote>
<p>Assembly:           003ce1e0 [C:WindowsMicrosoft.NetassemblyGAC_MSILClassLibrary2v4.0_1.0.0.0__3a0a06f4596f3e16ClassLibrary2.dll]</p>

<p>ClassLoader:        003ee5b8</p>

<p>SecurityDescriptor: 003d2838</p>

<p>Module Name</p>

<p>00306b28            C:WindowsMicrosoft.NetassemblyGAC_MSILClassLibrary2v4.0_1.0.0.0__3a0a06f4596f3e16ClassLibrary2.dll</p>

<p>Assembly:           003ceae0 [C:UsersnaveenDocumentsVisual Studio 2010ProjectsConsoleApplication9ClassLibrary2binDebugClassLibrary2.dll]</p>

<p>ClassLoader:        0044f418</p>

<p>SecurityDescriptor: 00445ea8</p>

<p>Module Name</p>

<p>011ee6b4            C:UsersnaveenDocumentsVisual Studio 2010ProjectsConsoleApplication9ClassLibrary2binDebugClassLibrary2.dll</p>
</blockquote>

<p>Notice the first assembly is loaded from the GAC and the second one is loaded from the bin path.</p>

<p>This is not something that I would ever do. This was merely an exercise to bypass the loader.</p>

<p>FYI when the assembly is uninstalled from GAC, the gacutil.exe creates a temp copy and stores the assembly in the temp directory because it is being used by a process. And the temp copy of the assembly is deleted when the process ends. Here is the screen shot of Procmon creating an temp copy of the GACed assembly which I uninstalled.</p>

<p><a href="http://104.197.135.42/wp-content/uploads/2010/07/gacutil1.jpg"><img class="alignnone size-full wp-image-967" title="gacutil" src="http://104.197.135.42/wp-content/uploads/2010/07/gacutil1.jpg" alt="" width="700" height="418" /></a></p>
]]></content>
        </item>
        
        <item>
            <title>Debugging Generic System.Nullable within Windbg</title>
            <link>/p947/</link>
            <pubDate>Thu, 08 Jul 2010 03:58:51 +0000</pubDate>
            
            <guid>/p947/</guid>
            <description>In this post I am going to unravel the mystery of debugging the Nullable within Windbg in .NET 3.5 and also compare it with .NET 4.0. Here is the sample code and it is compiled in .NET 3.5
[sourcecode language=&amp;#8221;csharp&amp;#8221;]
using System;
namespace ConsoleApplication
{
class Program
{
Int32? test;
int i = 10;
static void Main(string[] args)
{
Nullable
Int32? i = 10;
Object o = 10;
var p = new Program() { test = 20 };</description>
            <content type="html"><![CDATA[<p>In this post I am going to unravel the mystery of debugging the Nullable<T> within Windbg in .NET 3.5 and also compare it with .NET 4.0. Here is the sample code and it is compiled in .NET 3.5</p>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>using System;</p>

<p>namespace ConsoleApplication</p>

<p>{</p>

<p>class Program</p>

<p>{</p>

<p>Int32? test;</p>

<p>int i = 10;</p>

<p>static void Main(string[] args)</p>

<p>{</p>

<p>Nullable<T></p>

<p>Int32? i = 10;</p>

<p>Object o = 10;</p>

<p>var p = new Program() { test = 20 };</p>

<p>Console.Read();</p>

<p>p.test = (Int32?) o ;</p>

<p>Console.WriteLine(p.test.HasValue);</p>

<p>}</p>

<p>}</p>

<p>}</p>

<p>[/sourcecode]</p>

<p>Attached to the debugger on the Console.Read. FYI I always load sos and sosex extensions to debug managed code. Here is !mdt 0x0253c11c output</p>

<blockquote>
<p>0:000&gt; !mdt 0x0253c11c</p>

<p>0253c11c (ConsoleApplication.Program)</p>

<p>test:ERROR (0x80070057).</p>

<p>i:0xa (System.Int32)</p>
</blockquote>

<p>Notice that &#8220;test&#8221; does not have a value and has an error. Next issued !dumpobj</p>

<p>[sourcecode]</p>

<p>!do 0x0253c11c</p>

<p>[/sourcecode]</p>

<blockquote>
<p>0:000&gt; !do 0x0253c11c</p>

<p>Name: ConsoleApplication.Program</p>

<p>MethodTable: 002932f0</p>

<p>EEClass: 00291360</p>

<p>Size: 20(0x14) bytes</p>

<p>(C:UsersnaveenDocumentsVisual Studio 2010ProjectsConsoleApplication9binDebugConsoleApplication.exe)</p>

<p>Fields:</p>

<p>MT    Field   Offset                 Type VT     Attr    Value Name</p>

<p><span style="background-color:#ffff00;">00000000</span> 4000001        8                       1 instance 0280c124 test</p>

<p>7776ab0c  4000002        4         System.Int32  1 instance       10 i</p>
</blockquote>

<p>My fault ,I thought sos should be able to get the MethodTable of Nullable<Int32> for &#8220;test&#8221; when sosex couldn&#8217;t.  To my surprise the MT output was <span style="background-color:#ffff00;">00000000</span> . To view the contents of the &#8220;test&#8221; I would have to use  the !dumpvc which requires methodtable. I know I could use the dd command. And here is the output from the dd 0280c124</p>

<blockquote>
<p>0:000&gt; dd 0280c124</p>

<p>0280c124  00000001 <span style="background-color:#ffff00;">00000014</span> 00000000 77767c70</p>

<p>0280c134  00000000 00000000 00000000 00000000</p>

<p>0280c144  00000000 00000000 777684dc 00000000</p>

<p>0280c154  40010000 7776d7ec 00000003 00000008</p>

<p>0280c164  00000100 00000000 77767cc4 00000000</p>

<p>0280c174  00000000 00000000 00000000 00000001</p>

<p>0280c184  0280c158 00000001 00000000 7776841c</p>

<p>0280c194  00000000 00000000 00000000 00000000</p>
</blockquote>

<p>The second field <span style="background-color:#ffff00;">00000014</span> is the actual value of test and here is the actual output</p>

<blockquote>
<p>0:000&gt; ? poi(0280c124+0x4)</p>

<p>Evaluate expression: 20 = 00000014</p>
</blockquote>

<p>But this does not solve the real issue of figuring out the methodtable to use it in !dumpvc. I could have used !mx System.Nullable* to get the MethodTable,  because I knew the type is Nullable<Int> ,what if I didn&#8217;t know the type information.</p>

<p>To get the mt information I had to disassemble the code. First step is to get the !clrstack</p>

<blockquote>
<p>0:000&gt; !CLRStack</p>

<p>OS Thread Id: 0x94c (0)</p>

<p>ESP       EIP</p>

<p>0021f1dc 769d73ea [NDirectMethodFrameStandaloneCleanup: 0021f1dc] System.IO.__ConsoleStream.ReadFile(Microsoft.Win32.SafeHandles.SafeFileHandle, Byte*, Int32, Int32 ByRef, IntPtr)</p>

<p>0021f1f8 77c8ae67 System.IO.__ConsoleStream.ReadFileNative(Microsoft.Win32.SafeHandles.SafeFileHandle, Byte[], Int32, Int32, Int32, Int32 ByRef)</p>

<p>0021f224 77c8ad86 System.IO.__ConsoleStream.Read(Byte[], Int32, Int32)</p>

<p>0021f244 776f9fbb System.IO.StreamReader.ReadBuffer()</p>

<p>0021f258 77c677fc System.IO.StreamReader.Read()</p>

<p>0021f264 77c8dd81 System.IO.TextReader+SyncTextReader.Read()</p>

<p>0021f270 77bd328b System.Console.Read()</p>

<p>0021f278 <span style="background-color:#ffff00;">00320115</span> ConsoleApplication.Program.Main(System.String[])</p>

<p>0021f4d0 59781b6c [GCFrame: 0021f4d0]</p>
</blockquote>

<p>The next is to !u 00320115 and here is the partial ouput</p>

<blockquote>
<p>00320116 8b45d8          mov     eax,dword ptr [ebp-28h]</p>

<p>00320119 3a4008          cmp     al,byte ptr [eax+8]</p>

<p>0032011c 8d4008          lea     eax,[eax+8]</p>

<p>0032011f 8945c8          mov     dword ptr [ebp-38h],eax</p>

<p>00320122 ff75dc          push    dword ptr [ebp-24h]</p>

<p>00320125 8b4dc8          mov     ecx,dword ptr [ebp-38h]</p>

<p>00320128 bae8397777      mov     edx,offset mscorlib_ni+0x2739e8 (<span style="background-color:#ffff00;">777739e8</span>) (MT: System.Nullable`1[[System.Int32, mscorlib]])</p>

<p>0032012d e8d6a74c59      call    mscorwks!JIT_Unbox_Nullable (597ea908)</p>
</blockquote>

<p>Notice the Method table <span style="background-color:#ffff00;">777739e8</span> for System.Nullable`1[[System.Int32, mscorlib]] and here is the output from !dumpmt -md 777739e8</p>

<blockquote>
<p>0:000&gt; !dumpmt -md 777739e8</p>

<p>EEClass: 7752e7c8</p>

<p>Module: 77501000</p>

<p>Name: System.Nullable`1[[System.Int32, mscorlib]]</p>

<p>mdToken: 0200026d  (C:WindowsassemblyGAC_32mscorlib2.0.0.0__b77a5c561934e089mscorlib.dll)</p>

<p>BaseSize: 0x10</p>

<p>ComponentSize: 0x0</p>

<p>Number of IFaces in IFaceMap: 0</p>

<p>Slots in VTable: 14</p>

<p>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;</p>

<p>MethodDesc Table</p>

<p>Entry MethodDesc      JIT Name</p>

<p>77697028   775eace0     NONE System.Nullable`1[[System.Int32, mscorlib]].ToString()</p>

<p>77697020   775eacc0     NONE System.Nullable`1[[System.Int32, mscorlib]].Equals(System.Object)</p>

<p>77697018   775eacd0     NONE System.Nullable`1[[System.Int32, mscorlib]].GetHashCode()</p>

<p>777374c0   775412a4   PreJIT System.Object.Finalize()</p>

<p>77d010a0   775eac98   PreJIT System.Nullable`1[[System.Int32, mscorlib]]..ctor(Int32)</p>

<p>77d01100   775eaca0   PreJIT System.Nullable`1[[System.Int32, mscorlib]].get_HasValue()</p>

<p>77d01120   775eaca8   PreJIT System.Nullable`1[[System.Int32, mscorlib]].get_Value()</p>

<p>77d01030   775eacb0   PreJIT System.Nullable`1[[System.Int32, mscorlib]].GetValueOrDefault()</p>

<p>77d01140   775eacb8   PreJIT System.Nullable`1[[System.Int32, mscorlib]].GetValueOrDefault(Int32)</p>

<p>77d0100c   775eacf0   PreJIT System.Nullable`1[[System.Int32, mscorlib]].op_Implicit(Int32)</p>

<p>77d00fe8   775eacf8   PreJIT System.Nullable`1[[System.Int32, mscorlib]].op_Explicit(System.Nullable`1<Int32>)</p>

<p>77d01040   775eacc8   PreJIT System.Nullable`1[[System.Int32, mscorlib]].Equals(System.Object)</p>

<p>77d01078   775eacd8   PreJIT System.Nullable`1[[System.Int32, mscorlib]].GetHashCode()</p>

<p>77d010c0   775eace8   PreJIT System.Nullable`1[[System.Int32, mscorlib]].ToString()</p>
</blockquote>

<p>Now that I have confirmed the mt and here is the output from !dumpvc 777739e8 0280c124</p>

<blockquote>
<p>0:000&gt; !dumpvc 777739e8 0280c124</p>

<p>Name: System.Nullable`1[[System.Int32, mscorlib]]</p>

<p>MethodTable 777739e8</p>

<p>EEClass: 7752e7c8</p>

<p>Size: 16(0x10) bytes</p>

<p>(C:WindowsassemblyGAC_32mscorlib2.0.0.0__b77a5c561934e089mscorlib.dll)</p>

<p>Fields:</p>

<p>MT    Field   Offset                 Type VT     Attr    Value Name</p>

<p>7776eadc  40009a8        0       System.Boolean  1 instance        1 hasValue</p>

<p>7776ab0c  40009a9        4         System.Int32  1 instance       20 value</p>
</blockquote>

<p>I decided to test this in .NET 4.0 and here is the output of !mdt for the Program object</p>

<blockquote>
<p>0:000&gt; !mdt 0x0236bc44</p>

<p>0236bc44 (ConsoleApplication.Program)</p>

<p>test:(System.Nullable`1[[System.Int32, mscorlib]]) VALTYPE (MT=6229f60c, ADDR=0236bc50)</p>

<p>i:0xa (System.Int32)</p>
</blockquote>

<p>Notice the &#8220;test&#8221; which is Nullable<Int32> is now recognized by sosex and it also provides the method table.</p>
]]></content>
        </item>
        
        <item>
            <title>Recursive !dumpmt – Windbg</title>
            <link>/p928/</link>
            <pubDate>Tue, 06 Jul 2010 01:04:53 +0000</pubDate>
            
            <guid>/p928/</guid>
            <description>In this post I will be demonstrating how we could use CLR internal data-structures to recursively get the methodtable’s of an object and its base classes. The idea behind this is to understand the CLR data structure.
Here is the sample code
[sourcecode language=&amp;#8221;csharp&amp;#8221;]
using System;
namespace ConsoleApplication
{
class Program : B
{
string test = &amp;ldquo;cw&amp;rdquo;;
static void Main(string[] args)
{
var p = new Program();
Console.Read();
}</description>
            <content type="html"><![CDATA[<p>In this post I will be demonstrating how we could use CLR internal data-structures to recursively get the methodtable’s of an object and its base classes. The idea behind this is to understand the CLR data structure.</p>

<p>Here is the sample code</p>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>using System;</p>

<p>namespace ConsoleApplication</p>

<p>{</p>

<p>class Program : B</p>

<p>{</p>

<p>string test = &ldquo;cw&rdquo;;</p>

<p>static void Main(string[] args)</p>

<p>{</p>

<p>var p = new Program();</p>

<p>Console.Read();</p>

<p>}</p>

<p>}</p>

<p>class B : A</p>

<p>{</p>

<p>public void TestB()</p>

<p>{</p>

<p>}</p>

<p>}</p>

<p>class A</p>

<p>{</p>

<p>public void TestA()</p>

<p>{</p>

<p>}</p>

<p>}</p>

<p>}</p>

<p>[/sourcecode]</p>

<p>The “Program” object address  is <span style="background-color:#ffff00;">0x0254bc38 </span> and here  is the output of !dumpobj</p>

<blockquote>
<p>0:000&gt; !do 0x0254bc38</p>

<p>Name:        ConsoleApplication.Program</p>

<p>MethodTable: <span style="background-color:#ffff00;">001c3904</span></p>

<p>EEClass:     001c1508</p>

<p>Size:        12(0xc) bytes</p>

<p>File:        C:UsersnaveenDocumentsVisual Studio 2010ProjectsConsoleApplication9binDebugConsoleApplication.exe</p>

<p>Fields:</p>

<p>MT    Field   Offset                 Type VT     Attr    Value Name</p>

<p>6335f9ac  4000001        4        System.String  0 instance 0254bc44 test</p>
</blockquote>

<p>The method table pointer for the Program class is <span style="background-color:#ffff00;">001c3904 </span> . Let&#8217;s dump the raw memory instead of using !dumpobj</p>

<p>[sourcecode]</p>

<p>dd 0x0254bc38</p>

<p>[/sourcecode]</p>

<blockquote>
<p>0:000&gt; dd 0x0254bc38</p>

<p>0254bc38  <span style="background-color:#ffff00;">001c3904</span> 0254bc44 80000000 6335f9ac</p>

<p>0254bc48  00000002 00770063 00000000 00000000</p>

<p>0254bc58  63367490 00000000 00000000 00000000</p>

<p>0254bc68  00000000 00000000 00000000 6335f5e8</p>

<p>0254bc78  00000000 40010000 63366034 00000003</p>

<p>0254bc88  00000008 00000100 00000000 63366f40</p>

<p>0254bc98  00000000 00000000 00000000 00000000</p>

<p>0254bca8  00000001 0254bc80 00000001 00000000</p>
</blockquote>

<p>Now that we can see the MethodTable pointer is the first field we can get the Methods by using</p>

<p>[sourcecode]</p>

<p>!dumpmt -md poi(0x0254bc38)</p>

<p>[/sourcecode]</p>

<blockquote>
<p>0:000&gt; !dumpmt -md poi(0x0254bc38)</p>

<p>EEClass:      001c1508</p>

<p>Module:       001c2e9c</p>

<p>Name:         ConsoleApplication.Program</p>

<p>mdToken:      02000004</p>

<p>File:         C:UsersnaveenDocumentsVisual Studio 2010ProjectsConsoleApplication9binDebugConsoleApplication.exe</p>

<p>BaseSize:        0xc</p>

<p>ComponentSize:   0x0</p>

<p>Slots in VTable: 6</p>

<p>Number of IFaces in IFaceMap: 0</p>

<p>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;</p>

<p>MethodDesc Table</p>

<p>Entry MethodDesc      JIT Name</p>

<p>6326a7e0   63044934   PreJIT System.Object.ToString()</p>

<p>6326e2e0   6304493c   PreJIT System.Object.Equals(System.Object)</p>

<p>6326e1f0   6304495c   PreJIT System.Object.GetHashCode()</p>

<p>632f1600   63044970   PreJIT System.Object.Finalize()</p>

<p>002200d0   001c38f0      JIT ConsoleApplication.Program..ctor()</p>

<p>00220070   001c38e4      JIT ConsoleApplication.Program.Main(System.String[])</p>
</blockquote>

<p>So next time when we have an object we don&#8217;t have to go look for method table pointer address.</p>

<p>The goal is to get every method of class  Program, B, A and System.Object automatically. To get this, lets dump the raw memory of the method table</p>

<p>[sourcecode]</p>

<p>dd poi(0x0254bc38)</p>

<p>[/sourcecode]</p>

<blockquote>
<p>0:000&gt; dd poi(0x0254bc38)</p>

<p>001c3904  00080000 0000000c 00050011 00000004</p>

<p>001c3914  <span style="background-color:#ffff00;">001c3890 </span> 001c2e9c 001c3934 001c1508</p>

<p>001c3924  00000000 00000000 001c3854 002200d0</p>

<p>001c3934  00000080 00000000 00000000 00000000</p>

<p>001c3944  00000000 00000000 00000000 00000000</p>

<p>001c3954  00000000 00000000 00000000 00000000</p>

<p>001c3964  00000000 00000000 00000000 00000000</p>

<p>001c3974  00000000 00000000 00000000 00000000</p>
</blockquote>

<p>The 10th offset contains the address of its base class method table pointer, So in the above output it is  <span style="background-color:#ffff00;">001c3890 </span>.</p>

<p>Now that we know it is the 10th offset, here is the script to get every method table for a class and its parents. FYI if the 10th offset is 00000000 then it means it is the super class which is System.Object.</p>

<p>[sourcecode]</p>

<p>r$t0 =poi(0x0254bc38);.while(@$t0) {!dumpmt -md @$t0;.echo *<strong>*</strong>*<strong>*</strong>*****;r$t0=poi(@$t0+10)}</p>

<p>[/sourcecode]</p>

<p>And here is the explanation for the above script</p>

<ol>
<li>r$t0 =poi(0x0254bc38) &#8211; Using a pseudo register $t0 to assign the value of mt of the 0x0254bc38</li>
<li>The .while loop will terminate when the value is 0. The  &#8220;!dumpmt -md @$t0&#8221; will dump the Method Table of the $t0 and the  &#8220;r$t0=poi(@$t0+10)&#8221; will reset $t0 its parent object method table.</li>
</ol>

<p>Here is the partial output from the above script with method tables from Program and B</p>

<blockquote>
<p>0:000&gt; r$t0 =poi(0x0254bc38);.while(@$t0) {!dumpmt -md @$t0;.echo *<strong>*</strong>*<strong>*</strong>*****;r$t0=poi(@$t0+10)}</p>

<p>EEClass:      001c1508</p>

<p>Module:       001c2e9c</p>

<p>Name:         ConsoleApplication.Program</p>

<p>mdToken:      02000004</p>

<p>File:         C:UsersnaveenDocumentsVisual Studio 2010ProjectsConsoleApplication9binDebugConsoleApplication.exe</p>

<p>BaseSize:        0xc</p>

<p>ComponentSize:   0x0</p>

<p>Slots in VTable: 6</p>

<p>Number of IFaces in IFaceMap: 0</p>

<p>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;</p>

<p>MethodDesc Table</p>

<p>Entry MethodDesc      JIT Name</p>

<p>6326a7e0   63044934   PreJIT System.Object.ToString()</p>

<p>6326e2e0   6304493c   PreJIT System.Object.Equals(System.Object)</p>

<p>6326e1f0   6304495c   PreJIT System.Object.GetHashCode()</p>

<p>632f1600   63044970   PreJIT System.Object.Finalize()</p>

<p>002200d0   001c38f0      JIT ConsoleApplication.Program..ctor()</p>

<p>00220070   001c38e4      JIT ConsoleApplication.Program.Main(System.String[])</p>

<p>*<strong>*</strong>*<strong>*</strong>*****</p>

<p>EEClass:      001c149c</p>

<p>Module:       001c2e9c</p>

<p>Name:         ConsoleApplication.B</p>

<p>mdToken:      02000003</p>

<p>File:         C:UsersnaveenDocumentsVisual Studio 2010ProjectsConsoleApplication9binDebugConsoleApplication.exe</p>

<p>BaseSize:        0xc</p>

<p>ComponentSize:   0x0</p>

<p>Slots in VTable: 6</p>

<p>Number of IFaces in IFaceMap: 0</p>

<p>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;</p>

<p>MethodDesc Table</p>

<p>Entry MethodDesc      JIT Name</p>

<p>6326a7e0   63044934   PreJIT System.Object.ToString()</p>

<p>6326e2e0   6304493c   PreJIT System.Object.Equals(System.Object)</p>

<p>6326e1f0   6304495c   PreJIT System.Object.GetHashCode()</p>

<p>632f1600   63044970   PreJIT System.Object.Finalize()</p>

<p>00220120   001c3888      JIT ConsoleApplication.B..ctor()</p>

<p>001cc02d   001c387c     NONE ConsoleApplication.B.TestB()</p>

<p>*<strong>*</strong>*<strong>*</strong>*****</p>
</blockquote>
]]></content>
        </item>
        
        <item>
            <title>dumpstring – windbg</title>
            <link>/p913/</link>
            <pubDate>Wed, 30 Jun 2010 01:55:42 +0000</pubDate>
            
            <guid>/p913/</guid>
            <description>Viewing strings inside the debugger has never been pretty, especially if you are using sos extension. Here is a sample !dumpobj on a string
 0:000&amp;gt; !do 00000000025f2280
Name: System.String
MethodTable: 000007fef6e26960
EEClass: 000007fef69aeec8
Size: 32(0x20) bytes
String: Foo
Fields:
MT Field Offset Type VT Attr Value Name
000007fef6e2c848 40000ed 8 System.Int32 1 instance 3 m_stringLength
000007fef6e2b388 40000ee c System.Char 1 instance 46 m_firstChar
000007fef6e26960 40000ef 10 System.String 0 shared static Empty</description>
            <content type="html"><![CDATA[<p>Viewing strings inside the debugger has never been pretty, especially if you are using sos extension.  Here is a sample !dumpobj on a string</p>

<blockquote>
<p>0:000&gt; !do 00000000025f2280</p>

<p>Name:        System.String</p>

<p>MethodTable: 000007fef6e26960</p>

<p>EEClass:     000007fef69aeec8</p>

<p>Size:        32(0x20) bytes</p>

<p>String:     <span style="background-color:#ffff00;">Foo</span></p>

<p>Fields:</p>

<p>MT    Field   Offset                 Type VT     Attr            Value Name</p>

<p>000007fef6e2c848  40000ed        8         System.Int32  1 instance                3 m_stringLength</p>

<p>000007fef6e2b388  40000ee        c          System.Char  1 instance               46 m_firstChar</p>

<p>000007fef6e26960  40000ef       10        System.String  0   shared           static Empty</p>

<blockquote>
<blockquote>
<p>Domain:Value  00000000002ae900:00000000025e1420 &lt;&lt;</p>
</blockquote>
</blockquote>
</blockquote>

<p>Some of the devs like to use the du command</p>

<p>[sourcecode]</p>

<p>du 00000000025f2280+c</p>

<p>[/sourcecode]</p>

<blockquote>
<p>0:000&gt; du 00000000025f2280+c</p>

<p>00000000`025f228c  <span style="background-color:#ffff00;">&#8220;Foo&#8221;</span></p>
</blockquote>

<p>My choice is to use the .printf command and here is my alias for printing string</p>

<p>[sourcecode]</p>

<p>as !ds .printf &ldquo;%mu n&rdquo;, c+</p>

<p>[/sourcecode]</p>

<blockquote>
<p>0:000&gt; !ds 00000000025f2280</p>

<p><span style="background-color:#ffff00;">Foo</span></p>
</blockquote>

<p>I prefer .printf over du because I am not interested in looking at the memory address often especially dumping strings within a script.</p>
]]></content>
        </item>
        
        <item>
            <title>Custom DumpArray – Windbg</title>
            <link>/p885/</link>
            <pubDate>Fri, 25 Jun 2010 00:59:42 +0000</pubDate>
            
            <guid>/p885/</guid>
            <description>The The has !dumparray for getting contents of the array. But it cannot be used for scripting or automation. Here is an example
[sourcecode language=&amp;#8221;csharp&amp;#8221;]
using System;
namespace ConsoleApplication
{
class Program
{
Test[] arr = new[] { new Test() { ID = 1, Name = &amp;ldquo;Foo&amp;rdquo; }, new Test() { ID = 2, Name = &amp;ldquo;Bar&amp;rdquo; } };
static void Main(string[] args)
{
var p = new Program();
Console.WriteLine(p.arr);</description>
            <content type="html"><![CDATA[<p>The <a href="http://msdn.microsoft.com/en-us/library/bb190764.aspx">The</a> has !dumparray for getting contents of the array. But it cannot be used for scripting or automation. Here is an example</p>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>using System;</p>

<p>namespace ConsoleApplication</p>

<p>{</p>

<p>class Program</p>

<p>{</p>

<p>Test[] arr = new[] { new Test() { ID = 1, Name = &ldquo;Foo&rdquo; }, new Test() { ID = 2, Name = &ldquo;Bar&rdquo; } };</p>

<p>static void Main(string[] args)</p>

<p>{</p>

<p>var p = new Program();</p>

<p>Console.WriteLine(p.arr);</p>

<p>Console.Read();</p>

<p>}</p>

<p>}</p>

<p>class Test</p>

<p>{</p>

<p>public int ID;</p>

<p>public string Name;</p>

<p>}</p>

<p>}</p>

<p>[/sourcecode]</p>

<p>And here is the output of the <strong><span style="color:#993366;">arr</span></strong> variable within the debugger</p>

<blockquote>
<p>0:000&gt; !da -details 021fbc6c</p>

<p>Name:        ConsoleApplication.Test[]</p>

<p>MethodTable: 64b56c28</p>

<p>EEClass:     648d9698</p>

<p>Size:        24(0x18) bytes</p>

<p>Array:       Rank 1, Number of elements 2, Type CLASS</p>

<p>Element Methodtable: 001938b0</p>

<p>[0] 021fbc84</p>

<p>Name:        ConsoleApplication.<strong><span style="color:#993366;">Test</span></strong></p>

<p>MethodTable: 001938b0</p>

<p>EEClass:     00191488</p>

<p>Size:        16(0x10) bytes</p>

<p>File:        C:UsersnaveenDocumentsVisual Studio 2010ProjectsConsoleApplication9binDebugConsoleApplication.exe</p>

<p>Fields:</p>

<p>MT    Field   Offset                 Type VT     Attr    Value Name</p>

<p>64ba2978  4000002        8             System.Int32      1     instance            1     ID</p>

<p>64b9f9ac  4000003        4            System.String      0     instance     021fbc44     <strong><span style="color:#993366;">Name</span></strong></p>

<p><a href="http://msdn.microsoft.com/en-us/library/bb190764.aspx">1</a> 021fbc94</p>

<p>Name:        ConsoleApplication.<strong><span style="color:#993366;">Test</span></strong></p>

<p>MethodTable: 001938b0</p>

<p>EEClass:     00191488</p>

<p>Size:        16(0x10) bytes</p>

<p>File:        C:UsersnaveenDocumentsVisual Studio 2010ProjectsConsoleApplication9binDebugConsoleApplication.exe</p>

<p>Fields:</p>

<p>MT    Field   Offset                 Type VT     Attr    Value Name</p>

<p>64ba2978  4000002        8             System.Int32      1     instance            2     ID</p>

<p>64b9f9ac  4000003        4            System.String      0     instance     021fbc58     <strong><span style="color:#993366;">Name</span></strong></p>
</blockquote>

<p>From the output  we cannot see the values of the  <strong><span style="color:#993366;">Name</span></strong> variable within the <strong><span style="color:#993366;">Test</span></strong> class. To get the value we would have manually issue a !dumpobj on each one of these. In this post I will demonstrate how to automate this. In doing so we will also explore the array internals from raw memory perspective.</p>

<p>To start of lets dump the raw memory of the array. The  array address is <span style="color:#0000ff;"><strong>021fbc6c</strong></span></p>

<p>[sourcecode]</p>

<p>dd 021fbc6c</p>

<p>[/sourcecode]</p>

<blockquote>
<p>0:000&gt; dd <strong><span style="color:#0000ff;">021fbc6c </span></strong></p>

<p>021fbc6c  <span style="color:#0000ff;"><strong>64b56c28 </strong></span><span style="color:#0000ff;"><strong>00000002 </strong></span><strong><span style="color:#0000ff;">001938b0 </span><span style="color:#0000ff;"><em>021fbc84</em></span></strong></p>

<p>021fbc7c  <span style="color:#0000ff;"><strong><em>021fbc94 </em></strong></span>00000000 001938b0 021fbc44</p>

<p>021fbc8c  00000001 00000000 001938b0 021fbc58</p>

<p>021fbc9c  00000002 00000000 64ba7490 00000000</p>

<p>021fbcac  00000000 00000000 00000000 00000000</p>

<p>021fbcbc  00000000 64b9f5e8 00000000 40010000</p>

<p>021fbccc  64ba6034 00000007 00000004 00000100</p>

<p>021fbcdc  00000000 64ba6f40 00000000 00000000</p>
</blockquote>

<p>Fields</p>

<ol>
<li><span style="color:#00ff00;"><span style="color:#0000ff;"><strong>64b56c28</strong> </span><span style="color:#000000;">&#8211; Array&#8217;s Method table pointer </span></span></li>
<li><span style="color:#ff9900;"><span style="color:#0000ff;"><strong>00000002 </strong></span><span style="color:#000000;">&#8211; Array&#8217;s length ( this will be used later)</span></span></li>
<li><span style="color:#ff0000;"><span style="color:#0000ff;"><strong>001938b0 </strong></span><span style="color:#000000;">&#8211;</span><span style="color:#000000;">Array contents method table pointer ( Test class)</span></span></li>
<li><span style="color:#ff0000;"><span style="color:#000080;"> </span><span style="color:#0000ff;"><strong>021fbc84</strong></span><span style="color:#000080;">,</span> <span style="color:#000080;"><span style="color:#0000ff;"><strong>021fbc94 </strong></span><span style="color:#000000;">&#8211; Contents of the array( 2 instances of the Test class)</span></span></span></li>
</ol>

<p>I would be using  $t0, $t1   <a href="http://msdn.microsoft.com/en-us/library/ff553485(VS.85).aspx">User-Defined Pseudo-Registers</a> within my script  as local variables to maintain state. Think of them as predefined variables that we can use. Here is the script to get just the <strong><span style="color:#993366;">Name </span></strong>from the array</p>

<p>[sourcecode]</p>

<p>.for (r $t0=0; @$t0 &lt; poi(021fbc6c+0x4); r$t0=@$t0+1 ) { r$t1 = 0; .if(@$t0 = 0) { r$t1=10} .else { r$t1= 10+ @$t0*4};.echo **<strong>*</strong>*****;!do poi(poi((021fbc6c-0x4)+@$t1)+0x4) }</p>

<p>[/sourcecode]</p>

<p>Here is the explanation for the above script</p>

<ol>
<li>The [The <a href="http://msdn.microsoft.com/en-us/library/bb190764.aspx">The</a> has !dumparray for getting contents of the array. But it cannot be used for scripting or automation. Here is an example</li>
</ol>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>using System;</p>

<p>namespace ConsoleApplication</p>

<p>{</p>

<p>class Program</p>

<p>{</p>

<p>Test[] arr = new[] { new Test() { ID = 1, Name = &ldquo;Foo&rdquo; }, new Test() { ID = 2, Name = &ldquo;Bar&rdquo; } };</p>

<p>static void Main(string[] args)</p>

<p>{</p>

<p>var p = new Program();</p>

<p>Console.WriteLine(p.arr);</p>

<p>Console.Read();</p>

<p>}</p>

<p>}</p>

<p>class Test</p>

<p>{</p>

<p>public int ID;</p>

<p>public string Name;</p>

<p>}</p>

<p>}</p>

<p>[/sourcecode]</p>

<p>And here is the output of the <strong><span style="color:#993366;">arr</span></strong> variable within the debugger</p>

<blockquote>
<p>0:000&gt; !da -details 021fbc6c</p>

<p>Name:        ConsoleApplication.Test[]</p>

<p>MethodTable: 64b56c28</p>

<p>EEClass:     648d9698</p>

<p>Size:        24(0x18) bytes</p>

<p>Array:       Rank 1, Number of elements 2, Type CLASS</p>

<p>Element Methodtable: 001938b0</p>

<p>[0] 021fbc84</p>

<p>Name:        ConsoleApplication.<strong><span style="color:#993366;">Test</span></strong></p>

<p>MethodTable: 001938b0</p>

<p>EEClass:     00191488</p>

<p>Size:        16(0x10) bytes</p>

<p>File:        C:UsersnaveenDocumentsVisual Studio 2010ProjectsConsoleApplication9binDebugConsoleApplication.exe</p>

<p>Fields:</p>

<p>MT    Field   Offset                 Type VT     Attr    Value Name</p>

<p>64ba2978  4000002        8             System.Int32      1     instance            1     ID</p>

<p>64b9f9ac  4000003        4            System.String      0     instance     021fbc44     <strong><span style="color:#993366;">Name</span></strong></p>

<p><a href="http://msdn.microsoft.com/en-us/library/bb190764.aspx">1</a> 021fbc94</p>

<p>Name:        ConsoleApplication.<strong><span style="color:#993366;">Test</span></strong></p>

<p>MethodTable: 001938b0</p>

<p>EEClass:     00191488</p>

<p>Size:        16(0x10) bytes</p>

<p>File:        C:UsersnaveenDocumentsVisual Studio 2010ProjectsConsoleApplication9binDebugConsoleApplication.exe</p>

<p>Fields:</p>

<p>MT    Field   Offset                 Type VT     Attr    Value Name</p>

<p>64ba2978  4000002        8             System.Int32      1     instance            2     ID</p>

<p>64b9f9ac  4000003        4            System.String      0     instance     021fbc58     <strong><span style="color:#993366;">Name</span></strong></p>
</blockquote>

<p>From the output  we cannot see the values of the  <strong><span style="color:#993366;">Name</span></strong> variable within the <strong><span style="color:#993366;">Test</span></strong> class. To get the value we would have manually issue a !dumpobj on each one of these. In this post I will demonstrate how to automate this. In doing so we will also explore the array internals from raw memory perspective.</p>

<p>To start of lets dump the raw memory of the array. The  array address is <span style="color:#0000ff;"><strong>021fbc6c</strong></span></p>

<p>[sourcecode]</p>

<p>dd 021fbc6c</p>

<p>[/sourcecode]</p>

<blockquote>
<p>0:000&gt; dd <strong><span style="color:#0000ff;">021fbc6c </span></strong></p>

<p>021fbc6c  <span style="color:#0000ff;"><strong>64b56c28 </strong></span><span style="color:#0000ff;"><strong>00000002 </strong></span><strong><span style="color:#0000ff;">001938b0 </span><span style="color:#0000ff;"><em>021fbc84</em></span></strong></p>

<p>021fbc7c  <span style="color:#0000ff;"><strong><em>021fbc94 </em></strong></span>00000000 001938b0 021fbc44</p>

<p>021fbc8c  00000001 00000000 001938b0 021fbc58</p>

<p>021fbc9c  00000002 00000000 64ba7490 00000000</p>

<p>021fbcac  00000000 00000000 00000000 00000000</p>

<p>021fbcbc  00000000 64b9f5e8 00000000 40010000</p>

<p>021fbccc  64ba6034 00000007 00000004 00000100</p>

<p>021fbcdc  00000000 64ba6f40 00000000 00000000</p>
</blockquote>

<p>Fields</p>

<ol>
<li><span style="color:#00ff00;"><span style="color:#0000ff;"><strong>64b56c28</strong> </span><span style="color:#000000;">&#8211; Array&#8217;s Method table pointer </span></span></li>
<li><span style="color:#ff9900;"><span style="color:#0000ff;"><strong>00000002 </strong></span><span style="color:#000000;">&#8211; Array&#8217;s length ( this will be used later)</span></span></li>
<li><span style="color:#ff0000;"><span style="color:#0000ff;"><strong>001938b0 </strong></span><span style="color:#000000;">&#8211;</span><span style="color:#000000;">Array contents method table pointer ( Test class)</span></span></li>
<li><span style="color:#ff0000;"><span style="color:#000080;"> </span><span style="color:#0000ff;"><strong>021fbc84</strong></span><span style="color:#000080;">,</span> <span style="color:#000080;"><span style="color:#0000ff;"><strong>021fbc94 </strong></span><span style="color:#000000;">&#8211; Contents of the array( 2 instances of the Test class)</span></span></span></li>
</ol>

<p>I would be using  $t0, $t1   <a href="http://msdn.microsoft.com/en-us/library/ff553485(VS.85).aspx">User-Defined Pseudo-Registers</a> within my script  as local variables to maintain state. Think of them as predefined variables that we can use. Here is the script to get just the <strong><span style="color:#993366;">Name </span></strong>from the array</p>

<p>[sourcecode]</p>

<p>.for (r $t0=0; @$t0 &lt; poi(021fbc6c+0x4); r$t0=@$t0+1 ) { r$t1 = 0; .if(@$t0 = 0) { r$t1=10} .else { r$t1= 10+ @$t0*4};.echo **<strong>*</strong>*****;!do poi(poi((021fbc6c-0x4)+@$t1)+0x4) }</p>

<p>[/sourcecode]</p>

<p>Here is the explanation for the above script</p>

<ol>
<li>The]<a href="http://msdn.microsoft.com/en-us/library/ff563115(VS.85).aspx">3</a> loop is used to iterate through the contents of the array :  &#8220;.for (r $t0=0; @$t0 &lt; poi(021fbc6c+0x4); r$t0=@$t0+1 ) &#8221;

<ul>
<li>The loop variable is $t0, which is initialized to zero  &#8220;r $t0=0;&#8221;,</li>
<li>Next is the loop condition check @$to &lt; poi(021fbc6c+0x4) , the poi(021fbc6c+0x4) is the pointer deference to array length which is <span style="color:#0000ff;"><strong>00000002<br /> </strong></span></li>
<li><span style="color:#0000ff;"><span style="color:#000000;">And the last statement is the increment command of the loop variable </span></span>r$t0=@$t0+1</li>
<li>Tip :- I am using &#8220;@&#8221; before the &#8220;$&#8221; for increased speed within the debugger when accessing registers.</li>
</ul></li>
<li>The next statement is &#8220;r$t1 = 0&#8221; is initializing another pseudo register to zero</li>
<li>After which the command &#8220;if(@$t0 = 0) { r$t1=10} .else { r$t1= 10+ @$t0*4}&#8221; resets the value of $t1 register either &#8220;10&#8221; or $t0 * 4, where $to is loop variable. I do this because the first instance of the <strong><span style="color:#993366;">Test</span></strong> class within the array is in the 10th offset and the rest of them would be on the next 4th offset. So for example the first time loop ,$t1 would be 10 , the second time  $t1 would 14 (10 + 1*4).</li>
<li>The &#8220;.echo *<strong>*</strong>*<strong>*</strong>&#8221; is just for line separation</li>
<li>The last command is the one which does most of the work

<ul>
<li>The command poi((021fbc6c-0x4)+@$t1) would return the pointer of the each element in the array which is instance of Test class . The first time it would be poi((021fbc6c-0x4)+10) which would point <span style="color:#0000ff;"><strong>021fbc84<em> </em></strong><span style="color:#000000;">and the next time it would be </span></span>poi((021fbc6c-0x4)+14) which would be <strong><span style="color:#0000ff;">021fbc94</span></strong></li>
<li><span style="color:#0000ff;"><span style="color:#000000;">The outermost &#8220;poi 0x4</span><span style="color:#000000;">&#8221; is to get pointer of the member variable <strong><span style="color:#993366;">Name </span></strong></span><span style="color:#000000;">and dump its content using !do</span></span></li>
</ul></li>
</ol>

<p>And here is the output from the script</p>

<blockquote>
<p>0:000&gt; .for (r $t0=0; @$t0 &lt; poi(021fbc6c   +0x4); r$t0=@$t0+1 ) { r$t1 = 0; .if(@$t0 = 0) { r$t1=10} .else { r$t1= 10+ @$t0*4};.echo **<strong>*</strong>*****;  !do poi(poi((021fbc6c-0x4)+@$t1)+0x4) }</p>

<p>*<strong>*</strong>*<strong>*</strong></p>

<p>Name:        System.String</p>

<p>MethodTable: 64b9f9ac</p>

<p>EEClass:     648d8bb0</p>

<p>Size:        20(0x14) bytes</p>

<p>File:        C:WindowsMicrosoft.NetassemblyGAC_32mscorlibv4.0_4.0.0.0__b77a5c561934e089mscorlib.dll</p>

<p>String:      <strong><span style="color:#993300;">Foo</span></strong></p>

<p>Fields:</p>

<p>MT    Field   Offset                 Type VT     Attr    Value Name</p>

<p>64ba2978  40000ed        4         System.Int32  1 instance        3 m_stringLength</p>

<p>64ba1dc8  40000ee        8          System.Char  1 instance       46 m_firstChar</p>

<p>64b9f9ac  40000ef        8        System.String  0   shared   static Empty</p>

<blockquote>
<blockquote>
<p>Domain:Value  00745c28:021f1228 &lt;&lt;</p>
</blockquote>
</blockquote>

<p>*<strong>*</strong>*<strong>*</strong></p>

<p>Name:        System.String</p>

<p>MethodTable: 64b9f9ac</p>

<p>EEClass:     648d8bb0</p>

<p>Size:        20(0x14) bytes</p>

<p>File:        C:WindowsMicrosoft.NetassemblyGAC_32mscorlibv4.0_4.0.0.0__b77a5c561934e089mscorlib.dll</p>

<p>String:      <strong><span style="color:#993300;">Bar</span></strong></p>

<p>Fields:</p>

<p>MT    Field   Offset                 Type VT     Attr    Value Name</p>

<p>64ba2978  40000ed        4         System.Int32  1 instance        3 m_stringLength</p>

<p>64ba1dc8  40000ee        8          System.Char  1 instance       42 m_firstChar</p>

<p>64b9f9ac  40000ef        8        System.String  0   shared   static Empty</p>

<blockquote>
<blockquote>
<p>Domain:Value  00745c28:021f1228 &lt;&lt;</p>
</blockquote>
</blockquote>
</blockquote>
]]></content>
        </item>
        
        <item>
            <title>Do I have Managed or Native memory leak?</title>
            <link>/p868/</link>
            <pubDate>Tue, 22 Jun 2010 22:38:52 +0000</pubDate>
            
            <guid>/p868/</guid>
            <description>I noticed someone who couldn’t figure out the cause of memory leak in managed application within the debugger. This person had basic debugging skills and was comfortable with sos. FYI the leak wasn’t in the managed code, but in the native code. The managed code was using native code via PInvoke.
Here is how I figured out the cause. Every time I have to debug a memory leak in managed code ,the first command I run is !</description>
            <content type="html"><![CDATA[<p>I noticed someone who couldn’t figure out the cause of memory leak in  managed application within the debugger. This person had basic debugging skills and was comfortable with sos.  FYI the leak wasn’t in the managed code, but in the native code. The managed code was using native code via PInvoke.</p>

<p>Here is how I figured out the cause. Every time I have to debug a memory leak in managed code ,the first command I run is !vmstat. The !vmstat is available in psscor2.dll for .net 3.5 and for .net 4.0 it is available in sos. This command provides summary of VM. The output is similar to the <a href="http://technet.microsoft.com/en-us/sysinternals/dd535533.aspx">VMMap</a> tool and here is the output from the command.</p>

<p><a href="http://104.197.135.42/wp-content/uploads/2010/06/vmstat1.jpg"><img class="alignnone size-full wp-image-869" title="vmstat" src="http://104.197.135.42/wp-content/uploads/2010/06/vmstat1.jpg" alt="" width="450" height="266" /></a></p>

<p>Now that I know there is a memory leak, I always start of with running these commands</p>

<p>[sourcecode]</p>

<p>.shell -ci &ldquo;!EEHeap -loader&rdquo; findstr  &ldquo;LoaderHeap&rdquo;</p>

<p>.shell -ci &ldquo;!EEHeap -gc&rdquo; findstr /B &ldquo;Total Size&rdquo;</p>

<p>!heapstat  &#8211; iu</p>

<p>[/sourcecode]</p>

<p>And here is the output from the above commands</p>

<blockquote>
<p>0:004&gt; .shell -ci &#8220;!EEHeap -loader&#8221; findstr  &#8220;LoaderHeap&#8221;</p>

<p>Total LoaderHeap size: 0x10000(65,536)bytes</p>

<p>.shell: Process exited</p>

<p>0:004&gt; .shell -ci &#8220;!EEHeap -gc&#8221; findstr /B &#8220;Total Size&#8221;</p>

<p>Total Size   0x3df74(253,812)</p>

<p>.shell: Process exited</p>

<p>0:004&gt; !heapstat -iu</p>

<p>Heap     Gen0         Gen1         Gen2         LOH</p>

<p>Heap0    8204         182020       54820        8768</p>

<p>Free space:                                                 Percentage</p>

<p>Heap0    12           149212       36           48          SOH: 60% LOH:  0%</p>

<p>Unrooted objects:                                           Percentage</p>

<p>Heap0    1188         0            0            0           SOH:  0% LOH:  0%</p>

<p>0:004&gt;</p>
</blockquote>

<p>And from the output I know there isn’t a managed memory leak. The total heap size is only 253,812 bytes and my loader heap is 65,536 bytes, so it has to be native code.  Now I can focus my efforts on the native code debugging.</p>
]]></content>
        </item>
        
        <item>
            <title>Customizing Witty Twitter Client Part 1- using C# as Compiler Service</title>
            <link>/p840/</link>
            <pubDate>Sun, 20 Jun 2010 03:28:46 +0000</pubDate>
            
            <guid>/p840/</guid>
            <description>This is going to be a multipart blog post where I am going to be demonstrating how I have customized This is going to be a multipart blog post where I am going to be demonstrating how I have customized twitter client for my need. I chose Witty because it is the only OSS .NET twitter client I know of.
One of the reasons for customizing is primarily using C# as compiler service to extend it for my needs dynamically.</description>
            <content type="html"><![CDATA[<p>This is going to be a multipart blog post where I am going to be demonstrating how I have customized <a href="http://code.google.com/p/wittytwitter/">This is going to be a multipart blog post where I am going to be demonstrating how I have customized</a> twitter client for my need. I chose Witty because it is the only OSS .NET twitter client I know of.</p>

<p>One of the reasons for customizing is primarily using C# as compiler service to extend it for my needs dynamically. For example I follow this twitter list <a href="http://twitter.com/shanselman/programmers">http://twitter.com/shanselman/programmers</a> , it’s a cool list that Scott maintains, thanks to him. But there is one person in this list who keeps tweeting about weight loss, which I am least interested and I didn’t have control over it but to ignore, until now. And it is always fun to write  software for your daily needs, which for me saves time.  Thanks to Mono for C# as compiler service. FYI I have shown a simple usage of Mono Csharp compiler service in this <a href="http://naveensrinivasan.com/2010/05/11/using-c-compiler-as-a-service-in-f-poshconsole-powershell/">post</a>.</p>

<p>Here are things that I could get done by just spending few hours of my weekend time</p>

<p>Here is my the default witty</p>

<p><a href="http://104.197.135.42/wp-content/uploads/2010/06/initialwitty2.jpg"><img class="alignnone size-full wp-image-841" title="InitialWitty" src="http://104.197.135.42/wp-content/uploads/2010/06/initialwitty2.jpg" alt="" width="450" height="484" /></a></p>

<p>Filter the list by user name  which I am not interested in</p>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>new Func<Tweet, bool>(t =&gt; !t.User.Name.Contains(&ldquo;CNN&rdquo;));</p>

<p>[/sourcecode]</p>

<p>Here is the same without CNN</p>

<p><a href="http://104.197.135.42/wp-content/uploads/2010/06/witty-filteredbyname2.jpg"><img class="alignnone size-full wp-image-842" title="Witty-FilteredByName" src="http://104.197.135.42/wp-content/uploads/2010/06/witty-filteredbyname2.jpg" alt="" width="450" height="436" /></a></p>

<p>FYI the filter C# code is in the Filter Text box</p>

<p>The next filter criteria is to look for tweets that have hashtag as fsharp and also at least have one link</p>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>new Func<Tweet, bool>(t =&gt; t.HashTags.DefaultIfEmpty().Contains(&ldquo;#fsharp&rdquo;) &amp;&amp; t.Urls.DefaultIfEmpty().Count() &gt; 0);</p>

<p>[/sourcecode]</p>

<p>And here is the filtered list</p>

<p><a href="http://104.197.135.42/wp-content/uploads/2010/06/witty-filteredbyfsharp2.png"><img class="alignnone size-full wp-image-843" title="Witty-FilteredByFSharp" src="http://104.197.135.42/wp-content/uploads/2010/06/witty-filteredbyfsharp2.png" alt="" width="450" height="436" /></a></p>

<p>Be even crazier look for tweets that have hashtag as fsharp and at least one link and then open the link automatically</p>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>new Func<Tweet, bool>(t =&gt; {</p>

<p>if (t.HashTags.DefaultIfEmpty().Contains(&ldquo;#fsharp&rdquo;) &amp;&amp; t.Urls.DefaultIfEmpty().Count() &gt; 0)</p>

<p>System.Diagnostics.Process.Start(t.Urls.First().ToString());</p>

<p>return t.HashTags.DefaultIfEmpty().Contains(&ldquo;#fsharp&rdquo;) &amp;&amp; t.Urls.DefaultIfEmpty().Count() &gt; 0; });</p>

<p>[/sourcecode]</p>

<p><a href="http://104.197.135.42/wp-content/uploads/2010/06/witty-browseropenlink2.png"><img class="alignnone size-full wp-image-844" title="Witty-BrowserOpenLink" src="http://104.197.135.42/wp-content/uploads/2010/06/witty-browseropenlink2.png" alt="" width="450" height="268" /></a></p>

<p>The browser with the link opened automatically.</p>

<p>It&#8217;s a hack and I shouldn&#8217;t be doing the above, but it does the job.</p>

<p>There is so much more possibilities. I could easily provide a save feature for these search scripts and reuse the same.  At the end of the series I will post the entire code in GitHub. But if you want to try it before that here are the simple changes I started doing to the code.</p>

<p>Extension Method for Compilation</p>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>static class Extensions</p>

<p>{</p>

<p>public static object Compile(this string code)</p>

<p>{</p>

<p>return Mono.CSharp.Evaluator.Evaluate(code);</p>

<p>}</p>

<p>public static void Run(this string code)</p>

<p>{</p>

<p>Mono.CSharp.Evaluator.Run(code);</p>

<p>}</p>

<p>}</p>

<p>[/sourcecode]</p>

<p>The filter code</p>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>public bool TweetFilter(object item)</p>

<p>{</p>

<p>Tweet tweet = item as Tweet;</p>

<p>// this will prevent the fade animation from starting when the tweet is filtered</p>

<p>tweet.IsNew = false;</p>

<p>try</p>

<p>{</p>

<p>Func<Tweet, bool> compare = (Func<Tweet, bool>)FilterTextBox.Text.Compile();</p>

<p>return compare.Invoke(tweet);</p>

<p>}</p>

<p>catch(Exception ex)</p>

<p>{</p>

<p>Console.WriteLine(ex);</p>

<p>}</p>

<p>return true;</p>

<p>}</p>

<p>[/sourcecode]</p>

<p>The hashtags and Links weren’t part of the tweet class , but they were part of the UI class. So I had to bring them to the tweet class and populate them.</p>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>public IEnumerable<Uri> Urls</p>

<p>{</p>

<p>get</p>

<p>{</p>

<p>return links;</p>

<p>}</p>

<p>set</p>

<p>{</p>

<p>links.Clear();</p>

<p>links.AddRange(value);</p>

<p>}</p>

<p>}</p>

<p>public IEnumerable<string> HashTags</p>

<p>{</p>

<p>get</p>

<p>{</p>

<p>return hashTags;</p>

<p>}</p>

<p>set</p>

<p>{</p>

<p>hashTags.Clear();</p>

<p>hashTags.AddRange(value);</p>

<p>}</p>

<p>}</p>

<p>[/sourcecode]</p>

<p>And here is the code to populate the above properties</p>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>private IEnumerable<Uri> GetLinks(string text)</p>

<p>{</p>

<p>string[] words = Regex.Split(text, @&ldquo;([ (){}[]])&ldquo;);</p>

<p>return (from word in words</p>

<p>let isUrl = new Func<string, bool>(s =&gt; UrlShorteningService.IsUrl(s))</p>

<p>where isUrl(word)</p>

<p>select new Uri(word) ).ToList();</p>

<p>}</p>

<p>private IEnumerable<string> GetHashTags(string text)</p>

<p>{</p>

<p>string[] words = Regex.Split(text, @&ldquo;([ (){}[]])&ldquo;);</p>

<p>return (from word in words</p>

<p>let ishash = new Func<string, bool>(s =&gt; s.StartsWith(&ldquo;#&rdquo;))</p>

<p>where ishash(word)</p>

<p>select word).ToList();</p>

<p>}</p>

<p>[/sourcecode]</p>

<p>I know for the above 2 functions I could have written a High-Order Function</p>
]]></content>
        </item>
        
        <item>
            <title>Using Tuple as Dictionary / Map key</title>
            <link>/p829/</link>
            <pubDate>Sat, 19 Jun 2010 12:37:53 +0000</pubDate>
            
            <guid>/p829/</guid>
            <description>I recently had to create a dictionary which needed a multipart key like  . To do this I would have to create a custom class override equals and gethashcode. That’s when someone told I could use Tuple, but weren’t sure it was possible. Here was the quick sample to try it in F#
[sourcecode]
let x = [(&amp;ldquo;naveen&amp;rdquo;,1),1;(&amp;ldquo;naveen&amp;rdquo;,1),2] |&amp;gt; Map.ofList
[/sourcecode]
as expected only one item in the Map</description>
            <content type="html"><![CDATA[<p>I  recently had to create a dictionary which needed a multipart key like <string,int> . To do this I would have to create a custom class  override equals and gethashcode. That’s when someone told I could use Tuple, but weren’t sure it was possible.  Here was the quick sample to try it in F#</p>

<p>[sourcecode]</p>

<p>let x = [(&ldquo;naveen&rdquo;,1),1;(&ldquo;naveen&rdquo;,1),2] |&gt; Map.ofList</p>

<p>[/sourcecode]</p>

<p>as expected only one item in the Map</p>

<blockquote>
<p>val x : Map&lt;(string * int),int&gt; = map [((&#8220;naveen&#8221;, 1), 2)]</p>
</blockquote>

<p>And the same in C#</p>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>Console.WriteLine(Tuple.Create(&ldquo;Naveen&rdquo;,1).Equals( Tuple.Create(&ldquo;Naveen&rdquo;,1)));</p>

<p>[/sourcecode]</p>

<p>The next step was to actually disassemble Tuple in reflector</p>

<p><a href="http://104.197.135.42/wp-content/uploads/2010/06/tuple2.jpg"><img class="alignnone size-full wp-image-830" title="Tuple" src="http://104.197.135.42/wp-content/uploads/2010/06/tuple2.jpg" alt="" width="450" height="268" /></a></p>

<p>The code implements IStructuralComparable.CompareTo and does the comparison for each item. This is one of the reasons why generics is cool.</p>
]]></content>
        </item>
        
        <item>
            <title>Using Tech-Ed OData to download videos</title>
            <link>/p2071/</link>
            <pubDate>Tue, 15 Jun 2010 12:20:32 +0000</pubDate>
            
            <guid>/p2071/</guid>
            <description>I wanted to watch the Teched 2010 videos, but the problem I had was going to the site manually to download files for offline viewing. And I was also interested only in Dev sessions which were level 300 / 400. Thanks to OData for teched http://odata.msteched.com/sessions.svc/ ,I could write 3 statements in linqpad and had them all downloaded using wget
[sourcecode language=&amp;#8221;csharp&amp;#8221;]
File.Delete(@&amp;ldquo;C:tempdownload.txt&amp;rdquo;);
Sessions
.Where (s =&amp;gt; (s.Level.StartsWith(&amp;ldquo;400&amp;rdquo;) || s.Level.StartsWith(&amp;ldquo;300&amp;rdquo;) ) &amp;amp;&amp;amp; s.</description>
            <content type="html"><![CDATA[<p>I wanted to watch the Teched 2010 videos, but the problem I had was going to the site manually to download files for offline viewing.  And I was also interested only in Dev sessions which were level 300 / 400. Thanks to OData for teched <a href="http://odata.msteched.com/sessions.svc/">http://odata.msteched.com/sessions.svc/</a> ,I  could write 3 statements in linqpad and had them all downloaded using <a href="http://gnuwin32.sourceforge.net/packages/wget.htm">wget</a></p>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>File.Delete(@&ldquo;C:tempdownload.txt&rdquo;);</p>

<p>Sessions</p>

<p>.Where (s =&gt; (s.Level.StartsWith(&ldquo;400&rdquo;) ||  s.Level.StartsWith(&ldquo;300&rdquo;) ) &amp;&amp; s.Code.StartsWith(&ldquo;DEV&rdquo;))</p>

<p>.Take(10)</p>

<p>.ToList()</p>

<p>.Select (s =&gt; @&ldquo;<a href="http://ecn.channel9.msdn.com/o9/te/NorthAmerica/2010/mp4/&quot;">http://ecn.channel9.msdn.com/o9/te/NorthAmerica/2010/mp4/&quot;</a> + s.Code + &ldquo;.mp4&rdquo; )</p>

<p>.Run(s =&gt; File.AppendAllText(@&ldquo;C:tempdownload.txt&rdquo;,s + Environment.NewLine));</p>

<p>Util.Cmd(@&ldquo;wget.exe -b -i c:Tempdownload.txt&rdquo;,true);</p>

<p>[/sourcecode]</pre></p>

<p>Forgot to mention for the Run extension method is from Reactive Extensions</p>
]]></content>
        </item>
        
        <item>
            <title>Debugging base class method with conditional break point in .NET using Windbg</title>
            <link>/p803/</link>
            <pubDate>Tue, 15 Jun 2010 04:40:17 +0000</pubDate>
            
            <guid>/p803/</guid>
            <description>In this post I am going to be demonstrating how to have a conditional break-point on the base class method where it has been used by multiple derived classes. A classic example is Winform UI.
The Control base class has got methods like set_Enabled , set_Visible which could be consumed by multiple derived controls. The goal is to debug only the control instance that we are interested in. Here is the sample code.</description>
            <content type="html"><![CDATA[<p>In this post I am going to be demonstrating how to have a conditional break-point on the base class method where it has been used by multiple derived classes. A classic example is Winform UI.</p>

<p>The Control base class has got methods like set_Enabled , set_Visible which could be consumed by multiple derived controls. The goal is to debug only the control instance that we are interested in. Here is the sample code.</p>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>using System;</p>

<p>using System.Windows.Forms;</p>

<p>namespace WindowsFormsApplication1</p>

<p>{</p>

<p>public partial class Form1 : Form</p>

<p>{</p>

<p>public Form1()</p>

<p>{</p>

<p>InitializeComponent();</p>

<p>button3.Click += (s, b) =&gt; button1.Enabled = button1.Enabled ? false : true;</p>

<p>button4.Click += (s, b) =&gt; button2.Enabled = button2.Enabled ? false : true;</p>

<p>}</p>

<p>}</p>

<p>}</p>

<p>[/sourcecode]</p>

<p><a href="http://104.197.135.42/wp-content/uploads/2010/06/image2.png"><img style="display:inline;border-width:0;" title="image" src="http://104.197.135.42/wp-content/uploads/2010/06/image_thumb2.png" border="0" alt="image" width="244" height="244" /></a></p>

<p>This app that has four buttons. On the click of button3 it toggles button1’s enabled property and the button 4 does the same for button2. The goal is to break only when button1&#8217;s enabled property is set.</p>

<p>Launched the app and attached it to windbg and loaded sosex, issued the command</p>

<p>[sourcecode]</p>

<p>!mbm *Control.set_Enabled</p>

<p>[/sourcecode]</p>

<p>to set a break-point on enabled method. FYI set_Enabled is not available in the button class because it is derived from the base class. The goal is to break only when the button1’s enabled property is changed. With the above command it will break every time and here is the output when the break-point hits</p>

<blockquote>
<p>rax=000007fede335c40 rbx=0000000000060b28 rcx=000000000242ed18</p>

<p>rdx=0000000000000000 rsi=0000000000000000 rdi=000000000242ed18</p>

<p>rip=000007fede335c4d rsp=000000000015dde0 rbp=000000000015df80</p>

<p>r8=0000000002464500  r9=0000000000000000 r10=000007fffff10018</p>

<p>r11=000000000015dd20 r12=00000000002f5980 r13=000000000015dea8</p>

<p>r14=000000000015e380 r15=0000000000100000</p>

<p>iopl=0         nv up ei pl nz na pe nc</p>

<p>cs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202</p>

<p>System_Windows_Forms_ni+0x2b5c4d:</p>

<p>000007fe`de335c4d 488bcf          mov     rcx,rdi</p>
</blockquote>

<p>The rcx register contains the reference of the instance of the class ,  example button1 / button2. And here is the command to get the offset of the button text</p>

<p>[sourcecode]</p>

<p>.shell -ci &ldquo;!do @rcx&rdquo; findstr /E text</p>

<p>[/sourcecode]</p>

<p>and the output of the command is</p>

<blockquote>
<p>0:000&gt; .shell -ci&#8221;!do @ecx&#8221; findstr /E text</p>

<p>000007fef6db6960  40001c2       40        System.String  0 instance 000000000242ec50 text</p>

<p>000007fef6db5ab8  400016d      280        System.Object  0   static 0000000002403d80 EventBindingContext</p>

<p>.shell: Process exited</p>
</blockquote>

<p>The reason behind getting the button text offset is to use the text as the property for conditional break-point. The text member is available in the 40 offset of the button class. Now that we have the offset of the text property lets try and reset the break-point with a condition. To do this  get the address of the break-point using the bl command and the output is</p>

<blockquote>
<p>0:000&gt; bl</p>

<p>0 e 000007fe`de335c4d     0001 (0001)  0:**** System_Windows_Forms_ni+0x2b5c4d</p>
</blockquote>

<p>The address of the set_Enabled function is 000007fe`de335c4d.   Here is the conditional break-point for button1</p>

<p>[sourcecode]</p>

<p>bp 000007fe`de335c4d &ldquo;as /mu ${/v:name} (poi(@rcx+40)+c);.block{ .if (0== $scmp( &ldquo;${name}&rdquo;, &ldquo;button1&rdquo;) ) { .echo &#8216;in button1&#8217;;gc } .else { gc}}&rdquo;</p>

<p>[/sourcecode]</p>

<p>The “as /mu ${/v:name} (poi(@rcx+40)+c)” will set the value of text property  to the variable “name”. The .block command is used to evaluate the variable  “name” and the rest is a simple .if .else command. Every time the button1 is clicked it would output  “in button1” and continue. Now we have managed to break-in only on the button1 click.</p>
]]></content>
        </item>
        
        <item>
            <title>Piracy in .NET Code – Part 3 – Even when the code is obfuscated</title>
            <link>/p769/</link>
            <pubDate>Sat, 12 Jun 2010 00:37:46 +0000</pubDate>
            
            <guid>/p769/</guid>
            <description>Continuing with my series on Piracy, in this post I am going to be exploring how someone with little advanced knowledge in CLR / Windows can bypass important function calls like license validation.
Most of the developers assume just because the code is obfuscated nobody can bypass the licensing logic. I am going to be demonstrating how to bypass certain function call,this is very similar to “Set Next Statement &amp;#8221; in VS.</description>
            <content type="html"><![CDATA[<p>Continuing with my <a href="http://naveensrinivasan.com/category/security/">series</a> on Piracy, in this post I am going to be  exploring how someone with little advanced knowledge in CLR / Windows can bypass important function calls like  license validation.</p>

<p>Most of the developers assume just because the code is obfuscated nobody can bypass the licensing logic. I am going to be demonstrating how to bypass certain function call,this is very similar to “Set Next Statement &#8221; in VS. I am not going to be discussing on how to fix this problem.</p>

<p>Here is a sample code.</p>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>using System;</p>

<p>namespace Conosole</p>

<p>{   class Program</p>

<p>{</p>

<p>static void Main(string[] args)</p>

<p>{</p>

<p>Console.WriteLine(&ldquo;Test&rdquo;);</p>

<p>Console.Read();</p>

<p>}</p>

<p>}</p>

<p>}</p>

<p>[/sourcecode]</p>

<p>The code has only two instructions. First one writes to console and the next to reads from the console. I would want to bypass the call to that WriteLine function.</p>

<p>Loaded the assembly within windbg and then issued the command</p>

<p>[sourcecode]</p>

<p>sxe ld: clrjit</p>

<p>[/sourcecode]</p>

<p>When the break-point hits ,issued the command to set a break-point on the Main Method</p>

<p>[sourcecode]</p>

<p>.loadby sos clr;.load sosex;!mbm *Program.Main;g</p>

<p>[/sourcecode]</p>

<p>Then when the break-point hits for the Main method , issued the following command to disassemble the Main method.</p>

<p>[sourcecode]</p>

<p>!u ($ip)</p>

<p>[/sourcecode]</p>

<blockquote>
<p>0:000&gt; !u ($ip)</p>

<p>Normal JIT generated code</p>

<p>Conosole.Program.Main(System.String[])</p>

<p>Begin 00230070, size 2d</p>

<p>C:UsersnaveenDocumentsVisual Studio 2010ProjectsConsoleApplication6Program.cs @ 6:</p>

<p>00230070 55              push    ebp</p>

<p>00230071 8bec            mov     ebp,esp</p>

<p>00230073 50              push    eax</p>

<p>00230074 894dfc          mov     dword ptr [ebp-4],ecx</p>

<p>00230077 833d3c31180000  cmp     dword ptr ds:[18313Ch],0</p>

<p>0023007e 7405            je      00230085</p>

<p>00230080 e8ca5a6962      call    clr!JIT_DbgIsJustMyCode (628c5b4f)</p>

<blockquote>
<blockquote>
<blockquote>
<p>00230085 90              nop</p>
</blockquote>
</blockquote>
</blockquote>

<p>C:UsersnaveenDocumentsVisual Studio 2010ProjectsConsoleApplication6Program.cs @ 7:</p>

<p>00230086 8b0d30204a03    mov     ecx,dword ptr ds:[34A2030h] (&#8220;Test&#8221;)</p>

<p>0023008c e81b707a61      call    mscorlib_ni+0x2570ac (619d70ac) (System.Console.WriteLine(System.String), mdToken: 06000919)</p>

<p>00230091 90              nop</p>

<p>C:UsersnaveenDocumentsVisual Studio 2010ProjectsConsoleApplication6Program.cs @ 8:</p>

<p>00230092 e8cdc1d761      call    mscorlib_ni+0x82c264 (61fac264) (System.Console.Read(), mdToken: 0600090a)</p>

<p>00230097 90              nop</p>

<p>C:UsersnaveenDocumentsVisual Studio 2010ProjectsConsoleApplication6Program.cs @ 9:</p>

<p>00230098 90              nop</p>

<p>00230099 8be5            mov     esp,ebp</p>

<p>0023009b 5d              pop     ebp</p>

<p>0023009c c3              ret</p>

<p>0:000&gt; bp 0023008c</p>

<p>0:000&gt; g</p>
</blockquote>

<p>Because I have private symbols the line information is shown. So the function I want to bypass is “0023008c e81b707a61      call    mscorlib_ni+0x2570ac (619d70ac) (System.Console.WriteLine(System.String), mdToken: 06000919)” and the ip for this is 0023008c , so went ahead and set a break-point on the address</p>

<p>[sourcecode]</p>

<p>bp 0023008c</p>

<p>[/sourcecode]</p>

<p>When the break-point hits on 0023008c, I move pointer to the next instruction that I am interested in ,which is “00230092 e8cdc1d761      call    mscorlib_ni+0x82c264 (61fac264) (System.Console.Read(), mdToken: 0600090a)” to avoid the function being invoked and here is the command</p>

<p>[sourcecode]</p>

<p>r eip=00230092</p>

<p>[/sourcecode]</p>

<blockquote>
<p>0:000&gt; g</p>

<p>Breakpoint 1 hit</p>

<p>eax=001837f0 ebx=00000000 ecx=024abb50 edx=0041efd0 esi=008196c0 edi=0041ef20</p>

<p>eip=0023008c esp=0041eef0 ebp=0041eef4 iopl=0         nv up ei pl zr na pe nc</p>

<p>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246</p>

<p>0023008c e81b707a61      call    mscorlib_ni+0x2570ac (619d70ac)</p>

<p>0:000&gt; r eip=00230092</p>
</blockquote>

<p>Now we have managed to bypass the call to Console.WriteLine and here is my output .</p>

<p><a href="http://104.197.135.42/wp-content/uploads/2010/06/console1.jpg"><img class="alignnone size-full wp-image-776" title="Console" src="http://104.197.135.42/wp-content/uploads/2010/06/console1.jpg" alt="" width="450" height="227" /></a></p>

<p>So the key takeaway is to understand the working  of the platform closer to the metal, which can help us write better and secure code.</p>
]]></content>
        </item>
        
        <item>
            <title>Using Windows Error Reporting (WER) API in managed code to generate memory dump</title>
            <link>/p750/</link>
            <pubDate>Thu, 10 Jun 2010 03:01:09 +0000</pubDate>
            
            <guid>/p750/</guid>
            <description>The WER is a pretty cool technology from Microsoft for collecting memory dumps on process crash/ hang. This can be extended to generate on demand when the application needs to. The usual reason for getting a memory dump could be based on certain conditions, for example, the customer feels the application is slow and would want to send the information to WinQual (WER server). If the application happens to be installed on hundreds / thousands of boxes then its not going to be possible to get from individual customers, the best bet is WER.</description>
            <content type="html"><![CDATA[<p>The WER is a pretty cool technology from Microsoft for collecting memory dumps on process crash/ hang. This can be extended to generate on demand when the application needs to. The usual reason for getting a memory dump could be based on certain conditions, for example, the customer feels the application is slow and would want to send the information to WinQual (WER server). If the application happens to be installed on hundreds / thousands of boxes then its not going to be possible to get from individual customers, the best bet is WER. To do this here is an <a href="http://msdn.microsoft.com/en-us/library/bb513635%28VS.85%29.aspx">API</a>. But this is unmanaged API and I didn’t see one for managed code. FYI this would work only on Vista + systems, it will not work on XP.</p>

<p>Here is the basic PInvoke for creating dump and submitting a report. I am also using it along with the watsonbuckets that I had <a href="http://naveensrinivasan.com/2010/04/24/exploring-unhandledexception-in-net-and-watson-buckets/">blogged</a> about.</p>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>internal enum WER_CONSENT</p>

<p>{</p>

<p>WerConsentAlwaysPrompt = 4,</p>

<p>WerConsentApproved = 2,</p>

<p>WerConsentDenied = 3,</p>

<p>WerConsentMax = 5,</p>

<p>WerConsentNotAsked = 1</p>

<p>}</p>

<p>internal enum WER_DUMP_TYPE</p>

<p>{</p>

<p>WerDumpTypeHeapDump = 3,</p>

<p>WerDumpTypeMax = 4,</p>

<p>WerDumpTypeMicroDump = 1,</p>

<p>WerDumpTypeMiniDump = 2</p>

<p>}</p>

<p>internal enum WER_REPORT_TYPE</p>

<p>{</p>

<p>WerReportNonCritical,</p>

<p>WerReportCritical,</p>

<p>WerReportApplicationCrash,</p>

<p>WerReportApplicationHange,</p>

<p>WerReportKernel,</p>

<p>WerReportInvalid</p>

<p>}</p>

<p>internal static class Unmanaged</p>

<p>{</p>

<p>[DllImport(&ldquo;wer.dll&rdquo;, CharSet = CharSet.Unicode, SetLastError = true)]</p>

<p>internal static extern int WerReportAddDump(IntPtr hReportHandle,</p>

<p>IntPtr hProcess, IntPtr hThread, WER_DUMP_TYPE dumpType, IntPtr pExceptionParam, IntPtr pDumpCustomOptions, int dwFlags);</p>

<p>[DllImport(&ldquo;wer.dll&rdquo;, CharSet = CharSet.Unicode, SetLastError = true)]</p>

<p>internal static extern int WerReportCreate(string pwzEventType,</p>

<p>WER_REPORT_TYPE repType, IntPtr pReportInformation, ref IntPtr phReportHandle);</p>

<p>[DllImport(&ldquo;wer.dll&rdquo;, CharSet = CharSet.Unicode, SetLastError = true)]</p>

<p>internal static extern int WerReportSetParameter(IntPtr hReportHandle, int dwparamID, string pwzName, string pwzValue);</p>

<p>[DllImport(&ldquo;wer.dll&rdquo;, CharSet = CharSet.Unicode, SetLastError = true)]</p>

<p>internal static extern int WerReportSubmit(IntPtr hReportHandle, WER_CONSENT consent, int dwFlags, ref IntPtr pSubmitResult);</p>

<p>}</p>

<p>[/sourcecode]</p>

<p>I have shown only few functions in the wer api, there are few more.  Here is the total implementation</p>

<p>[sourcecode language=&#8221;csharp&#8221;]</p>

<p>using System;</p>

<p>using System.Windows.Forms;</p>

<p>using System.Runtime.InteropServices;</p>

<p>namespace WER</p>

<p>{</p>

<p>public partial class Form1 : Form</p>

<p>{</p>

<p>static bool Failed(int result)</p>

<p>{</p>

<p>return (result &lt; 0);</p>

<p>}</p>

<p>public Form1()</p>

<p>{</p>

<p>InitializeComponent();</p>

<p>button1.Click += (s, b) =&gt;</p>

<p>{</p>

<p>try</p>

<p>{</p>

<p>throw new NullReferenceException(&ldquo;Test&rdquo;);</p>

<p>}</p>

<p>catch (Exception ex)</p>

<p>{</p>

<p>var bucket = GetWatsonBuckets();</p>

<p>var zero = IntPtr.Zero;</p>

<p>if ((!Failed(Unmanaged.WerReportCreate(&ldquo;CrashingApp&rdquo;,</p>

<p>WER_REPORT_TYPE.WerReportCritical, IntPtr.Zero, ref zero)) &amp;&amp;</p>

<p>(zero != IntPtr.Zero)) &amp;&amp; ((((!Failed(Unmanaged.WerReportSetParameter(zero, 0, &ldquo;AppName&rdquo;, bucket.param0))</p>

<p>&amp;&amp; !Failed(Unmanaged.WerReportSetParameter(zero, 1, &ldquo;AppVer&rdquo;, bucket.param1))) &amp;&amp;</p>

<p>(!Failed(Unmanaged.WerReportSetParameter(zero, 2, &ldquo;AppStamp&rdquo;, bucket.param2)) &amp;&amp;</p>

<p>!Failed(Unmanaged.WerReportSetParameter(zero, 3, &ldquo;AsmAndModName&rdquo;, bucket.param3)))) &amp;&amp;</p>

<p>((!Failed(Unmanaged.WerReportSetParameter(zero, 4, &ldquo;AsmVer&rdquo;, bucket.param4)) &amp;&amp;</p>

<p>!Failed(Unmanaged.WerReportSetParameter(zero, 5, &ldquo;ModStamp&rdquo;, bucket.param5))) &amp;&amp;</p>

<p>(!Failed(Unmanaged.WerReportSetParameter(zero, 6, &ldquo;MethodDef&rdquo;, bucket.param6)) &amp;&amp;</p>

<p>!Failed(Unmanaged.WerReportSetParameter(zero, 7, &ldquo;Offset&rdquo;, bucket.param7))))) &amp;&amp;</p>

<p>!Failed(Unmanaged.WerReportSetParameter(zero, 8, &ldquo;ExceptionType&rdquo;, bucket.param8))))</p>

<p>{</p>

<p>var currentProcess = System.Diagnostics.Process.GetCurrentProcess().Handle;</p>

<p>if (!Failed(Unmanaged.WerReportAddDump(zero, currentProcess,</p>

<p>IntPtr.Zero, WER_DUMP_TYPE.WerDumpTypeHeapDump, IntPtr.Zero, IntPtr.Zero, 0)))</p>

<p>{</p>

<p>var pSubmitResult = IntPtr.Zero;</p>

<p>Unmanaged.WerReportSubmit(zero, WER_CONSENT.WerConsentNotAsked, 4, ref pSubmitResult);</p>

<p>}</p>

<p>}</p>

<p>}</p>

<p>};</p>

<p>}</p>

<p>private static WatsonBuckets GetWatsonBuckets()</p>

<p>{</p>

<p>var pParams = new WatsonBuckets();</p>

<p>IClrRuntimeHost host = null;</p>

<p>host = Activator.CreateInstance(Type.GetTypeFromCLSID(ClrGuids.ClsIdClrRuntimeHost)) as IClrRuntimeHost;</p>

<p>if (host != null)</p>

<p>{</p>

<p>var clrControl = host.GetCLRControl();</p>

<p>if (clrControl == null)</p>

<p>{</p>

<p>return pParams;</p>

<p>}</p>

<p>var clrErrorReportingManager =</p>

<p>clrControl.GetCLRManager(ref ClrGuids.IClrErrorReportingManager) as IClrErrorReportingManager;</p>

<p>if (clrErrorReportingManager == null)</p>

<p>{</p>

<p>return pParams;</p>

<p>}</p>

<p>clrErrorReportingManager.GetBucketParametersForCurrentException(out pParams);</p>

<p>}</p>

<p>return pParams;</p>

<p>}</p>

<p>}</p>

<p>// BucketParameters Structure to get watson buckets back from CLR</p>

<p>//<a href="http://msdn.microsoft.com/en-us/library/ms404466(v=VS.100).aspx">http://msdn.microsoft.com/en-us/library/ms404466(v=VS.100).aspx</a></p>

<p>[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]</p>

<p>internal struct WatsonBuckets</p>

<p>{</p>

<p>internal int fInited;</p>

<p>[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 0xff)]</p>

<p>internal string pszEventTypeName;</p>

<p>[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 0xff)]</p>

<p>internal string param0;</p>

<p>[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 0xff)]</p>

<p>internal string param1;</p>

<p>[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 0xff)]</p>

<p>internal string param2;</p>

<p>[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 0xff)]</p>

<p>internal string param3;</p>

<p>[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 0xff)]</p>

<p>internal string param4;</p>

<p>[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 0xff)]</p>

<p>internal string param5;</p>

<p>[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 0xff)]</p>

<p>internal string param6;</p>

<p>[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 0xff)]</p>

<p>internal string param7;</p>

<p>[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 0xff)]</p>

<p>internal string param8;</p>

<p>[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 0xff)]</p>

<p>internal string param9;</p>

<p>}</p>

<p>internal static class ClrGuids</p>

<p>{</p>

<p>internal static readonly Guid ClsIdClrRuntimeHost = new Guid(&ldquo;90F1A06E-7712-4762-86B5-7A5EBA6BDB02&rdquo;);</p>

<p>internal static Guid IClrErrorReportingManager = new Guid(&ldquo;980D2F1A-BF79-4c08-812A-BB9778928F78&rdquo;);</p>

<p>internal static readonly Guid IClrRuntimeHost = new Guid(&ldquo;90F1A06C-7712-4762-86B5-7A5EBA6BDB02&rdquo;);</p>

<p>}</p>

<p>[Guid(&ldquo;90F1A06C-7712-4762-86B5-7A5EBA6BDB02&rdquo;), InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]</p>

<p>internal interface IClrRuntimeHost</p>

<p>{</p>

<p>void Start();</p>

<p>void Stop();</p>

<p>void SetHostControl(IntPtr pHostControl);</p>

<p>IClrControl GetCLRControl();</p>

<p>void UnloadAppDomain(int dwAppDomainId, bool fWaitUntilDone);</p>

<p>void ExecuteInAppDomain(int dwAppDomainId, IntPtr pCallback, IntPtr cookie);</p>

<p>int GetCurrentAppDomainId();</p>

<p>int ExecuteApplication(string pwzAppFullName, int dwManifestPaths, string[] ppwzManifestPaths,</p>

<p>int dwActivationData, string[] ppwzActivationData);</p>

<p>int ExecuteInDefaultAppDomain(string pwzAssemblyPath, string pwzTypeName, string pwzMethodName,</p>

<p>string pwzArgument);</p>

<p>}</p>

<p>[Guid(&ldquo;9065597E-D1A1-4fb2-B6BA-7E1FCE230F61&rdquo;), InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]</p>

<p>internal interface IClrControl</p>

<p>{</p>

<p>[return: MarshalAs(UnmanagedType.IUnknown)]</p>

<p>object GetCLRManager([In] ref Guid riid);</p>

<p>void SetAppDomainManagerType(string pwzAppDomainManagerAssembly, string pwzAppDomainManagerType);</p>

<p>}</p>

<p>// IClrErrorReportingManager to get watson bukets back from CLR</p>

<p>//<a href="http://msdn.microsoft.com/en-us/library/ms164367(v=VS.100).aspx">http://msdn.microsoft.com/en-us/library/ms164367(v=VS.100).aspx</a></p>

<p>[Guid(&ldquo;980D2F1A-BF79-4c08-812A-BB9778928F78&rdquo;), InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]</p>

<p>internal interface IClrErrorReportingManager</p>

<p>{</p>

<p>[PreserveSig]</p>

<p>int GetBucketParametersForCurrentException(out WatsonBuckets pParams);</p>

<p>}</p>

<p>}</p>

<p>[/sourcecode]</p>

<p>In the above code ,I am using this within a windows form to create a memory dump when an exception is thrown. The GetWatson bucket and the clr hosting interface is just to get the watson bucket information from clr. This can even be extended to attach a custom log file. How cool is this. Here is the call-stack for the above exception</p>

<p><a href="http://104.197.135.42/wp-content/uploads/2010/06/wer12.jpg"><img class="alignnone size-full wp-image-762" title="wer1" src="http://104.197.135.42/wp-content/uploads/2010/06/wer12.jpg" alt="" width="450" height="268" /></a></p>
]]></content>
        </item>
        
        <item>
            <title>Identifying High CPU in GC (.NET) because of LOH – using Windbg</title>
            <link>/p40/</link>
            <pubDate>Mon, 15 Feb 2010 04:57:22 +0000</pubDate>
            
            <guid>/p40/</guid>
            <description>I am sure most of us are aware that one of the common reasons for High CPU usage .NET is because of, percentage time spent on GC is high. There are lot of write up about this. Tess has amazing blog post on this specifically, which explains in detail how to identify the symptoms. But one thing that I want share was the experience I had ,where in i could identify the real call stack which was causing allocation on LOH by have a break-point on the CLR Garbage collector itself.</description>
            <content type="html"><![CDATA[<p>I am sure most of us are aware that one of the common reasons for High CPU usage .NET is because of, percentage time spent on GC is high. There are lot of write up about this. <a href="http://blogs.msdn.com/tess/archive/2006/06/22/643309.aspx" target="_blank">Tess</a> has amazing blog post  on this specifically, which explains in detail how to identify the symptoms. But one thing that I want share was the experience I had ,where in i could identify the real call stack which was causing allocation on LOH by have a break-point on the CLR Garbage collector itself. I am going to assume that you are aware of CLR GC and LOH and basic debugging using windbg.</p>

<p>FYI the Perfmon counter like “% Time spent in GC”, “Large Object Heap size” can identify we have an issue with allocation in LOH. But this only indicates there is a problem in High allocations that’s causing  GC to work hard and in turn causing high CPU usage . But does not point where the exact problem is .If there is a large code base and all of sudden if there is an issue like this it is hard to pinpoint where the root cause of the problem.</p>

<p>I am going to walk through an example on a button click the code allocates objects on LOH and identify it using windbg.</p>

<p><span style="color:blue;">using </span>System;</p>

<p><span style="color:blue;">using</span>System.Collections.Generic;</p>

<p><span style="color:blue;">using</span>System.Linq;</p>

<p><span style="color:blue;">using</span>System.Windows.Forms;</p>

<p><span style="color:blue;">namespace</span>WindowsFormsApplication1</p>

<p>{</p>

<p><span style="color:blue;">public partial class</span><span style="color:#2b91af;">Form1</span>: <span style="color:#2b91af;">Form<br /> </span>{</p>

<p><span style="color:blue;">public</span><span style="color:#2b91af;">List</span>&lt;<span style="color:blue;">byte</span>[]&gt; buffer = <span style="color:blue;">new</span><span style="color:#2b91af;">List</span>&lt;<span style="color:blue;">byte</span>[]&gt;();</p>

<p style="padding-left:30px;">
  <span style="color:blue;">public</span>Form1()<br /> {<br /> InitializeComponent();<br /> }
</p>

<p style="padding-left:30px;">
  <span style="color:blue;">private void</span>Button1Click(<span style="color:blue;">object</span>sender, <span style="color:#2b91af;">EventArgs </span>e)<br /> {<br /> AllocateinLOH();<br /> }
</p>

<p style="padding-left:30px;">
  <span style="color:blue;">void</span>AllocateinLOH()<br /> {<br /> <span style="color:blue;">var </span>b = <span style="color:blue;">new byte</span>[85001];<br /> b.ToList().ForEach(<br /> (x) => x = <span style="color:blue;">new byte</span>());
</p>

<p style="padding-left:30px;">
  buffer.Add(<span style="color:blue;">new byte</span>[85001]);<br /> }
</p>

<p>}</p>

<p>}</p>

<p>[]<a href="http://11011.net/software/vspaste">1</a>In the above code AllocateinLOH will cause the heap allocations to LOH because the size is more than 85000 bytes. The next step is to launch the application and attach it to the debugger. To figure out the cause I could have got multiple memory dumps  and checked at every call stack when GC was happening . That is the harder way and we could be spending lot of time on that.</p>

<p>To get to solve the problem i always like to approach from the bottom of the stack. I was certain there should be a function within the CLR / GC which should be doing this and I was certain it has to be within MSCORWKS.dll. The next step was examine symbols using “x” command and here is the output</p>

<blockquote>
<p>0:000&gt; x mscorwks!wks::gc_heap::*</p>

<p>000007fe`e90d1340 mscorwks!WKS::gc_heap::alloc_allocated = <no type information></p>

<p>000007fe`e89fd380 mscorwks!WKS::gc_heap::limit_from_size = <no type information></p>

<p>000007fe`e8907e20 mscorwks!WKS::gc_heap::fix_older_allocation_area = <no type information></p>

<p>000007fe`e90d1310 mscorwks!WKS::gc_heap::max_free_space_items = <no type information></p>

<p>000007fe`e90cba38 mscorwks!WKS::gc_heap::gc_low = <no type information></p>

<p>000007fe`e8dae150 mscorwks!WKS::gc_heap::grow_brick_card_tables = <no type information></p>

<p>000007fe`e8a12d40 mscorwks!WKS::gc_heap::fix_generation_bounds = <no type information></p>

<p>000007fe`e8a13040 mscorwks!WKS::gc_heap::fix_large_allocation_area = <no type information></p>

<p>000007fe`e8a2c680 mscorwks!WKS::gc_heap::allocate_large_object = <no type information></p>

<p>000007fe`e90c0478 mscorwks!WKS::gc_heap::slow = <no type information></p>

<p>000007fe`e8ed8ec0 mscorwks!WKS::gc_heap::c_promote_callback = <no type information></p>
</blockquote>

<p>The above results are only partial because it was not necessary to get all the methods. The command “x mscorwks!wks::gc_heap::*” causes the debugger to get all the functions that are within the mscorwks dll with class name gc_heap. I knew it is gc_heap because prior to this I issued the command “x mscorwks!*gc*”. Because we don’t have private symbols for mscorwks we cannot see the type information. But we don’t need that for our purpose. The public symbols has FPO information for us to have break-point.</p>

<p>Form the above result the method name should be “allocate_large_object”</p>

<p>The next step was to put a break-point on the method</p>

<blockquote>
<p>bp mscorwks!wks::gc_heap::allocate_large_object &#8220;!CLRStack&#8221;</p>
</blockquote>

<p>And then click button and here is the callstack output</p>

<blockquote>
<p>0:004&gt; g</p>

<p>OS Thread Id: 0xf6f4 (0)</p>

<p>Child-SP         RetAddr          Call Site</p>

<p>000000000027e000 000007ff00190684 WindowsFormsApplication1.Form1.AllocateinLOH()</p>

<p>000000000027e060 000007feeab00555 WindowsFormsApplication1.Form1.Button1Click(System.Object, System.EventArgs)</p>

<p>000000000027e090 000007feeb1f5873 System.Windows.Forms.Control.OnClick(System.EventArgs)</p>

<p>000000000027e0d0 000007feeb1aadf7 System.Windows.Forms.Button.OnMouseUp(System.Windows.Forms.MouseEventArgs)</p>

<p>000000000027e130 000007feeb702b7d System.Windows.Forms.Control.WmMouseUp(System.Windows.Forms.Message ByRef, System.Windows.Forms.MouseButtons, Int32)</p>

<p>000000000027e200 000007feeab49b5a System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message ByRef)</p>

<p>000000000027e3b0 000007feeab49954 System.Windows.Forms.ButtonBase.WndProc(System.Windows.Forms.Message ByRef)</p>

<p>000000000027e430 000007feeab53aa6 System.Windows.Forms.Button.WndProc(System.Windows.Forms.Message ByRef)</p>

<p>000000000027e460 000007feeab53945 System.Windows.Forms.Control+ControlNativeWindow.WndProc(System.Windows.Forms.Message ByRef)</p>

<p>000000000027e4b0 000007feeab52244 System.Windows.Forms.NativeWindow.Callback(IntPtr, Int32, IntPtr, IntPtr)</p>

<p>000000000027e560 000007fee8aab07a DomainBoundILStubClass.IL_STUB(Int64, Int32, Int64, Int64)</p>

<p>000000000027e810 000007feeab6e883 DomainBoundILStubClass.IL_STUB(MSG ByRef)</p>

<p>000000000027e990 000007feeab6e0f8 System.Windows.Forms.Application+ComponentManager.System.Windows.Forms.</p>

<p>UnsafeNativeMethods.IMsoComponentManager.FPushMessageLoop(Int32, Int32, Int32)</p>

<p>000000000027ebe0 000007feeab6db65 System.Windows.Forms.Application+ThreadContext.RunMessageLoopInner(Int32, System.Windows.Forms.ApplicationContext)</p>

<p>000000000027ed30 000007ff00190171 System.Windows.Forms.Application+ThreadContext.RunMessageLoop(Int32, System.Windows.Forms.ApplicationContext)</p>

<p>000000000027ed90 000007fee8aad502 WindowsFormsApplication1.Program.Main()</p>

<p>mscorwks!WKS::gc_heap::allocate_large_object:</p>

<p>000007fe`e8a2c680 4053            push    rbx</p>
</blockquote>

<p>Bingo now at the bottom of the stack we can see the “allocate_large_object” and on the top of the stack it is the managed code that we wrote “AllocateinLOH”.  Now we have solved the reason behind the High CPU usage in GC because of LOH.</p>

<p>The “allocate_large_object” is not documented by Microsoft as a public API and I don’t know whether the name would be same going forward from .NET framework 4.0.  This holds good until .NET framework 3.5. The idea behind this is just digging in to the framework can give us some information which has saved us valuable time and effort.</p>
]]></content>
        </item>
        
        <item>
            <title>Function hit count using Pseudo-Register in Windbg</title>
            <link>/p30/</link>
            <pubDate>Sat, 13 Feb 2010 01:41:01 +0000</pubDate>
            
            <guid>/p30/</guid>
            <description>What if we want to know the number of times a function was invoked. We can have “.echo” or “.printf” on break-point of a function and count the output manually. The better way to do this is using pseudo-registers.
In my previous post I had mentioned about alias inside the debugger. The debugger also provides User defined Pseudo-Registers for scripting inside the debugger. We can use them to manipulate values within our scripts.</description>
            <content type="html"><![CDATA[<p>What if we want to know the number of times a function was invoked. We can have “.echo” or “.printf” on break-point of a function and count the output manually. The better way to do this is using pseudo-registers.</p>

<p>In my <a href="http://naveensrinivasan.com/2010/02/10/conditional-breakpoint-in-net-using-windbg/" target="_blank">previous</a> post I had mentioned about alias inside the debugger. The debugger also provides User defined Pseudo-Registers for scripting inside the debugger. We can use them to manipulate values within our scripts. There are 20 of them from $t0,$t1.. $t19. These are pre-defined names that we cannot change.</p>

<p>The syntax to assign value to the register is “r”</p>

<blockquote>
<p>r @$t0 = 0</p>
</blockquote>

<p>FYI the default value is 0.</p>

<blockquote>
<p>bp 000007ff0003c050  &#8221;  r @$t0 =@$t0 + 1;gc &#8220;</p>
</blockquote>

<p>The above command will increment the $t0 register by one more, every time the break-point is hit. And gc is to go to next conditional break-point. To get the output of the register we can use the expression evaluator command “?”</p>

<blockquote>
<p>0:004&gt; ? @$t0</p>

<p>Evaluate expression: 5 = 00000000`00000005</p>
</blockquote>

<p>There quite a few places we can use these inside the debugger. Example we could calculate the total size of multiple instances of an object type inside the debugger. That is we could get !objsize of each instance for type DataTable and then total it, to get the total memory consumption of datatable within our process.</p>
]]></content>
        </item>
        
        <item>
            <title>Conditional Breakpoint in .NET using Windbg</title>
            <link>/p26/</link>
            <pubDate>Thu, 11 Feb 2010 03:50:00 +0000</pubDate>
            
            <guid>/p26/</guid>
            <description>With my few years of production debugging .NET code ,one thing that has really helped me a lot is Windbg. Lot us of know that using sos, sosex and Windbg we should be able to troubleshoot most of the .NET Code. But certain tips / tricks makes us productive in those crucial moments. I am assuming that you are aware of basic usage of sos and windbg.
We know by using !</description>
            <content type="html"><![CDATA[<p>With my few years of production debugging .NET code ,one thing that has really helped me a lot is Windbg. Lot us of know that using sos, sosex and Windbg we should be able to troubleshoot most of the .NET Code. But certain tips / tricks makes us productive in those crucial moments. I am assuming that you are aware of basic usage of sos and windbg.</p>

<p>We know by using !bpmd command we can stick in a break-point on a method. But the issue is we would want to break in to the debugger only on a certain condition, very similar to VS.NET break-point condition.</p>

<p>Here is the sample code that i am going to be using to set the conditional break-point. This is a simple Winforms app.</p>

<pre style="border:1px solid #cecece;background-color:#fbfbfb;min-height:40px;width:500px;overflow:auto;padding:5px;"><pre style="background-color:#fbfbfb;width:100%;">  1: <span style="color:#0000ff;">using</span> System;
</pre>

<pre style="background-color:#ffffff;width:100%;">  2: <span style="color:#0000ff;">using</span> System.Windows.Forms;
</pre>

<pre style="background-color:#fbfbfb;width:100%;">  3:
</pre>

<pre style="background-color:#ffffff;width:100%;">  4: <span style="color:#0000ff;">namespace</span> WindowsFormsApplication2
</pre>

<pre style="background-color:#fbfbfb;width:100%;">  5: {
</pre>

<pre style="background-color:#ffffff;width:100%;">  6:     <span style="color:#0000ff;">public</span> partial <span style="color:#0000ff;">class</span> Form1 : Form
</pre>

<pre style="background-color:#fbfbfb;width:100%;">  7:     {
</pre>

<pre style="background-color:#ffffff;width:100%;">  8:         <span style="color:#0000ff;">public</span> <span style="color:#0000ff;">int</span> Foo;
</pre>

<pre style="background-color:#fbfbfb;width:100%;">  9:
</pre>

<pre style="background-color:#ffffff;width:100%;"> 10:         <span style="color:#0000ff;">public</span> Form1()
</pre>

<pre style="background-color:#fbfbfb;width:100%;"> 11:         {
</pre>

<pre style="background-color:#ffffff;width:100%;"> 12:             InitializeComponent();
</pre>

<pre style="background-color:#fbfbfb;width:100%;"> 13:         }
</pre>

<pre style="background-color:#ffffff;width:100%;"> 14:
</pre>

<pre style="background-color:#fbfbfb;width:100%;"> 15:         <span style="color:#0000ff;">private</span> <span style="color:#0000ff;">void</span> Button1Click(<span style="color:#0000ff;">object</span> sender, EventArgs e)
</pre>

<pre style="background-color:#ffffff;width:100%;"> 16:         {
</pre>

<pre style="background-color:#fbfbfb;width:100%;"> 17:             Test(textBox1.Text);
</pre>

<pre style="background-color:#ffffff;width:100%;"> 18:         }
</pre>

<pre style="background-color:#fbfbfb;width:100%;"> 19:
</pre>

<pre style="background-color:#ffffff;width:100%;"> 20:         <span style="color:#0000ff;">void</span> Test(<span style="color:#0000ff;">string</span> s)
</pre>

<pre style="background-color:#fbfbfb;width:100%;"> 21:         {
</pre>

<pre style="background-color:#ffffff;width:100%;"> 22:             Console.WriteLine(s);
</pre>

<pre style="background-color:#fbfbfb;width:100%;"> 23:         }
</pre>

<pre style="background-color:#ffffff;width:100%;"> 24:
</pre>

<pre style="background-color:#fbfbfb;width:100%;"> 25:     }
</pre>

<pre style="background-color:#ffffff;width:100%;"> 26: }
</pre>

<pre style="background-color:#fbfbfb;width:100%;"> 27:</pre>

<p>
  In this sample code I would like to put a conditional break-point on the Test method. After attaching the application to windbg ,look for the object Form1 in the heap.
</p>

<blockquote>
  <p>
    0:000> !dumpheap -type WindowsFormsApplication2.Form1<br />
             Address               MT     Size<br />
    0000000002c92548 000007ff004b7b78      480<br />
    total 1 objects<br />
    Statistics:<br />
                  MT    Count    TotalSize Class Name<br />
    000007ff004b7b78        1          480 WindowsFormsApplication2.Form1<br />
    Total 1 objects
  </p>
</blockquote>

<p>
  The next step was to get the address of the function Test.
</p>

<blockquote>
  <p>
    0:000> .shell  -ci &#8220;!dumpmt -md  000007ff004b7b78&#8221; FIND &#8220;Test&#8221;<br />
    000007ff004a3508 000007ff004b7af0      JIT WindowsFormsApplication2.Form1.Test(System.String)<br />
    .shell: Process exited
  </p>
</blockquote>

<p>
  The reason to get address of the function is to use the native “bp” command to set the break-point. FYI the sos also uses only the built in bp command for setting the break-point. The difference is condition that we can pass to the break-point. In the above I use the .shell command to look for Test function address instead of manually looking for the Test function. The .shell command comes in very handy.
</p>

<p>
  In this exercise I would like to break into the debugger only if the argument “s” matches certain condition. I set the bp on the method test using the command “bp 000007ff004a3508”. And here is the result when the break-point hits.
</p>

<blockquote>
  <p>
    0:000> g<br />
    Breakpoint 0 hit<br />
    rax=0000000002d9fcd8 rbx=0000000000000000 rcx=0000000002c92548<br />
    rdx=0000000002d9fcd8 rsi=0000000000000001 rdi=0000000000000000<br />
    rip=000007ff004a3508 rsp=000000000028d3e8 rbp=000000000028d590<br />
    r8=000000000028cde0  r9=000007feed0b14c0 r10=000007feff469f20<br />
    r11=000007ff00060120 r12=00000000003a9460 r13=0000000000000202<br />
    r14=000000001b3e23b8 r15=0000000000030672<br />
    iopl=0         nv up ei pl nz na po nc<br />
    cs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000206<br />
    000007ff`004a3508 e9f35a2c00      jmp     000007ff`00769000
  </p>
</blockquote>

<p>
  FYI I am using a 64-bit machine and that’s the reason my pointers are much bigger than usual x86. We are interested on the argument “s”  that is passed to the method which is @rdx register “rdx=0000000002d7ed00”. To verify that we setting the break-point on the correct argument we can test it by using command
</p>

<blockquote>
  <p>
    0:000> .printf &#8220;%mu&#8221;,@rdx+10<br />
    testa
  </p>
</blockquote>

<p>
  Not many of them are aware of how to get just the string from string object , instead of the all additions from !dumpobj. The above command would get just the string . The command .printf contains “%mu” because it is null terminated unicode string and @rdx is the register which contains the argument “s”. The <a href="mailto:“@rdx+10">“@rdx+10</a>” is the actual location of the string in memory and for the x86 it would be <a href="mailto:“@rdx+c">“@rdx+c</a>” for the actual string. Now that we are sure the @rdx is the register we can build condition for the argument. Here it is
</p>

<blockquote>
  <p>
    <strong>bp 000007ff004a3508 &#8220;.block {as /mu ${/v:cmp} @rdx+10; .if ( $spat( &#8220;${cmp}&#8221;, &#8220;*test*&#8221; )  ) { !clrstack; } .else { gc }}&#8221;</strong>
  </p>
</blockquote>

<p>
  <!--CRLF-->
</p>

<p>
  And here is the detailed explanation of the above condition within quotes. The .block command is used for alias evaluation. Alias is like variables within windbg. The “as /mu ${v:cmp} @rdx+10” command creates an string alias by name  of cmp which contains the value of argument “s”. This condition would be evaluated only when the functions first line of code is executed so @rdx will always have the value that is passed to the function. The next
</p>

<blockquote>
  <p>
    “.if ( $spat( &#8220;${cmp}&#8221;, &#8220;*test*&#8221; )  ) { !clrstack; } .else { gc }}”
  </p>
</blockquote>

<p>
  command is real crux where the code compares the alias cmp with “*test*”. Notice i am using a built-in function called $spat which is nothing but a string pattern function. So from the above condition i am instructing the break-point to give a callstack if the argument “s” has something like “*test*” . If not the command “gc” means go to the next conditional break-point,similar  F5 in VS.NET. So, for example if the function is called 40 times and of which we are interested only once when it is  something like “*test*” ,with the existing  !bpmd we would wasted our time 39 times.
</p>

<p>
  The “” is a escape character in windbg ,i am using it because i would have to a string compare.
</p>
]]></content>
        </item>
        
        <item>
            <title>Identify and Patch .NET Code using Windbg</title>
            <link>/p19/</link>
            <pubDate>Sun, 07 Feb 2010 13:30:13 +0000</pubDate>
            
            <guid>/p19/</guid>
            <description>&amp;#160;
The last week was really an interesting one with debugging production code. I was debugging a Winforms application which was using .NET framework 3.5 version. The real problem was with the latest release of the code, there was bug which caused certain elements on the UI not to be displayed. This is was High priority bug and very important to the business.
The code that was causing this bug was an integer variable inside a class.</description>
            <content type="html"><![CDATA[<p>&#160;</p>

<p>The last week was really an interesting one with debugging production code. I was debugging a Winforms application which was using .NET framework 3.5 version. The real problem was with the latest release of the code, there was bug which caused certain elements on the UI not to be displayed. This is was High priority bug and very important to the business.</p>

<p>The code that was causing this bug was an integer variable inside a class.</p>

<pre class="code"><span style="color:blue;">using </span>System;
<span style="color:blue;">using </span>System.Windows.Forms;

<span style="color:blue;">namespace </span>WindowsFormsApplication2
{
    <span style="color:blue;">public partial class </span><span style="color:#2b91af;">Form1 </span>: <span style="color:#2b91af;">Form
    </span>{
        <span style="color:blue;">public int </span>Foo;
        <span style="color:blue;">public </span>Form1()
        {
            InitializeComponent();
        }
        <span style="color:blue;">private void </span>Button1Click(<span style="color:blue;">object </span>sender, <span style="color:#2b91af;">EventArgs </span>e)
        {
            <span style="color:blue;">if </span>(Foo == <span style="color:brown;">100</span>) 
                <span style="color:blue;">this</span>.label1.Visible = <span style="color:blue;">true</span>;
        }
    }
}</pre>

<p>[]<a href="http://11011.net/software/vspaste">1</a><a href="http://11011.net/software/vspaste">1</a></p>

<p>The code was something like this. If Foo was equal 100 then the label was set to be visible. <a href="http://www.red-gate.com/products/reflector/" target="_blank">Reflector</a> came in handy to disassemble&#160; the code.With the latest code release the&#160; “<span style="color:blue;">if </span>(Foo == <span style="color:brown;">100</span>) “ condition was introduced.</p>

<p>The next step was to verify and validate that this condition was the reason for this bug. Though this looks very simple because i have shown a very contrived example which does not involve all the dependencies of the real world business application.</p>

<p>Fired up windbg looked up the heap for object type Form1 using dumpheap.</p>

<p>0:004&gt; !dumpheap -type Form1</p>

<p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; Address&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; MT&#160;&#160;&#160;&#160; Size</p>

<p><strong>0000000002cb2548</strong> 000007ff004b7b68&#160;&#160;&#160;&#160;&#160; 480&#160;&#160;&#160;&#160;<br />
total 1 objects</p>

<p>Statistics:</p>

<p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; MT&#160;&#160;&#160; Count&#160;&#160;&#160; TotalSize Class Name</p>

<p>000007ff004b7b68&#160;&#160;&#160;&#160;&#160;&#160;&#160; 1&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; 480 WindowsFormsApplication2.Form1</p>

<p>Total 1 objects</p>

<p>The next was figure of the offset of Foo. So used the !do command on Form1 instance. <strong>!do 0000000002cb2548</strong> and here is the partial output of the command&#160;&#160;&#160;</p>

<p>000007ff00107050&#160; 4001e9b&#160;&#160;&#160;&#160; 1780&#160;&#160;&#160;&#160;&#160;&#160;&#160; System.Object&#160; 0&#160;&#160; static 0000000002cb2d48 EVENT_MAXIMIZEDBOUNDSCHANGED</p>

<p>0000000000000000&#160; 4000002&#160;&#160;&#160;&#160;&#160; 1b8&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; 0 instance 0000000000000000 components</p>

<p>000007ff00694f40&#160; 4000003&#160;&#160;&#160;&#160;&#160; 1c0 &#8230;dows.Forms.Button&#160; 0 instance 0000000002cdc040 button1</p>

<p>000007ff006962c8&#160; 4000004&#160;&#160;&#160;&#160;&#160; 1c8 &#8230;ndows.Forms.Label&#160; 0 instance 0000000002cdc2f8 label1</p>

<p>000007ff002683d8&#160; 4000005&#160;&#160;&#160;&#160;&#160; <strong>1d0&#160;&#160;&#160;</strong> &#160;&#160;&#160;&#160; System.Int32&#160; 1 instance&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; 0 Foo</p>

<p>So from the result i could identify that the Foo variable was on the <strong>1d0</strong> offset of the Form1 object.</p>

<p>After couple of test case runs i dumped the object and here was the output</p>

<p>000007ff00694f40&#160; 4000003&#160;&#160;&#160;&#160;&#160; 1c0 &#8230;dows.Forms.Button&#160; 0 instance 0000000002cdc040 button1</p>

<p>000007ff006962c8&#160; 4000004&#160;&#160;&#160;&#160;&#160; 1c8 &#8230;ndows.Forms.Label&#160; 0 instance 0000000002cdc2f8 label1</p>

<p><strong>000007ff002683d8&#160; 4000005&#160;&#160;&#160;&#160;&#160; 1d0&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; System.Int32&#160; 1 instance&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; 23 Foo</strong></p>

<p>So the Foo’s value was now 23. I am sure most of us are used to updating the variable’s value in VS.NET using immediate window. I did something similar to that but instead used windbg.</p>

<p>In Windbg numbers are hex values, so to set the value as 100 it would have to be 64. You can fire up calc to figure this out or you use the command in windbg <strong>?64</strong></p>

<p><strong>Evaluate expression: 100 = 00000000`00000064</strong></p>

<p>FYI “?” expression evaluator in windbg. Now the final step of updating the Foo in memory. The command to do that is</p>

<p><strong>ed 0000000002cb2548+1d0 64</strong></p>

<p>“e” command is enter values in memory. “e” has many flavors like eu,ed,ea. And ed command is for updating&#160; Double-word values. So ed is to update double-word value and the memory location is <strong>0000000002cb2548+1d0</strong> which is the Form1 memory location&#160; along with Foo is offset.&#160;</p>

<p>Voila here is the output of !dumpobj after updating the memory</p>

<p><strong>000007ff002683d8&#160; 4000005&#160;&#160;&#160;&#160;&#160; 1d0&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; System.Int32&#160; 1 instance&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; 100 Foo</strong></p>

<p>Now we could make an emergency patch and be certain the patch would work with the fix already tested in production using the debugger. Having windbg in your toolbox is always saves a lot of time.&#160;&#160;</p>
]]></content>
        </item>
        
        <item>
            <title>Home cooked web monitoring use Rx</title>
            <link>/p14/</link>
            <pubDate>Wed, 03 Feb 2010 03:07:22 +0000</pubDate>
            
            <guid>/p14/</guid>
            <description>One of the key things in software is to write succinct , declarative and asynchronous code. The answer to that is Reactive Extensions for .NET&amp;#160;
I have been digging into Rx for sometime now. Though there isn’t much of documentation I have been kind of successful in getting certain things done with it.
One of requirement that came up from our Operations was to monitor some websites and notify someone if the site was not accessible.</description>
            <content type="html"><![CDATA[<p>One of the key things in software is to write succinct , declarative and asynchronous code. The answer to that is <a href="http://msdn.microsoft.com/en-us/devlabs/ee794896.aspx" target="_blank">Reactive Extensions for .NET</a>&#160;</p>

<p>I have been digging into Rx for sometime now. Though there isn’t much of documentation I have been kind of successful in getting certain things done with it.</p>

<p>One of requirement that came up from our Operations was to monitor some websites and notify someone if the site was not accessible. But the added constraints to this were check for the site status only at a certain interval and report failure only if it was more than certain percentage within a certain duration.</p>

<p>So it was like check the site status every 5 seconds , buffer the results for a minute and in the buffered response if it had more 3&#160; failures then tweet someone about it.</p>

<p>And here is the code to solve the problem</p>

<p><pre class="code">(<span style="color:blue;">from </span>time <span style="color:blue;">in </span><span style="color:#2b91af;">Observable</span>.Interval(<span style="color:#2b91af;">TimeSpan</span>.FromSeconds(<span style="color:brown;">5</span>))
 <span style="color:blue;">let </span>req = <span style="color:#2b91af;">WebRequest</span>.Create(<span style="color:#a31515;">&ldquo;<a href="http://www.nonexisting.com&quot;">http://www.nonexisting.com&quot;</a></span>)
 <span style="color:blue;">from </span>res <span style="color:blue;">in </span><span style="color:#2b91af;">Observable</span>.
    FromAsyncPattern&lt;<span style="color:#2b91af;">WebResponse</span>&gt;(
        req.BeginGetResponse, req.EndGetResponse)()
 .Materialize()<span style="color:blue;">select </span>res).Buffer(<span style="color:blue;">new </span><span style="color:#2b91af;">TimeSpan</span>(<span style="color:brown;"></span>, <span style="color:brown;"></span>, <span style="color:brown;">1</span>, <span style="color:brown;"></span>)).
    Select(failed =&gt;
        failed.Where(
        n =&gt; n.Kind == <span style="color:#2b91af;">NotificationKind</span>.OnError)).
    Where(failed =&gt; failed.Count() &gt; <span style="color:brown;">3</span>).
    Subscribe(x =&gt; Tweet(<span style="color:#a31515;">&ldquo;Nonexisting.com Failed thrice&rdquo;</span>));
<span style="color:#2b91af;">Console</span>.Read();</pre></p> </p></p>

<p>[]<a href="http://11011.net/software/vspaste">1</a><a href="http://11011.net/software/vspaste">1</a><a href="http://11011.net/software/vspaste">1</a><a href="http://11011.net/software/vspaste">1</a></p>

<p>The “from time in Observable.Interval(TimeSpan.FromSeconds(5)” is for ensuring that an Observable is generated every 5 seconds to check the status of the website. In the next line the code creates a web request.</p>

<p>Using the FromAsyncPattern I was able to reduce all the plumbing code to handle async i/o calls for the web request.&#160; The materialize is for the sequence to continue even if there is an exception. Here is an good write up on <a href="http://bartdesmet.net/blogs/bart/archive/2009/12/29/more-linq-with-system-interactive-exploiting-the-code-data-relationship.aspx" target="_blank">Materialize</a>. And the rest is just the usual Linq where the code filters Notification type of error.</p>

<p>This was a fun exercise. I will continue to explore Rx and blog about it.</p>
]]></content>
        </item>
        
        <item>
            <title>Resharper Template for F#</title>
            <link>/p6/</link>
            <pubDate>Mon, 01 Feb 2010 19:06:03 +0000</pubDate>
            
            <guid>/p6/</guid>
            <description>I have been hacking F# lately and I am big fan of ReSharper. So why not create a few Live Templates for the things i do daily in F#.
Download R# live template for F#. I am sure there are few more things that can be part of this template. I have posted the code in MSDN Code gallery so that others can find and contribute.</description>
            <content type="html"><![CDATA[<p>I have been hacking F# lately and I am big fan of ReSharper. So why not create a few Live Templates for the things i do daily in F#.</p>

<p><a href="http://bit.ly/dvXmEH">Download</a> R# live template for F#. I am sure there are few more things that can be part of this template. I have posted the code in MSDN Code gallery so that others can find and contribute.</p>
]]></content>
        </item>
        
    </channel>
</rss>
